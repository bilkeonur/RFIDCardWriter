
RFID.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f5c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  0800401c  0800401c  0001401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080040d8  080040d8  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  080040d8  080040d8  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  080040d8  080040d8  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080040d8  080040d8  000140d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080040dc  080040dc  000140dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080040e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e0  20000078  08004158  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000158  08004158  00020158  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000600d  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001661  00000000  00000000  000260ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006a0  00000000  00000000  00027710  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000640  00000000  00000000  00027db0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001070a  00000000  00000000  000283f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008a96  00000000  00000000  00038afa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005b967  00000000  00000000  00041590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0009cef7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000019c8  00000000  00000000  0009cf48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000078 	.word	0x20000078
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004004 	.word	0x08004004

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000007c 	.word	0x2000007c
 8000104:	08004004 	.word	0x08004004

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <delay>:
#include "stm32f0xx_hal.h"
#include "main.h"
#include "LCD.h"

void delay(uint32_t i)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b082      	sub	sp, #8
 8000238:	af00      	add	r7, sp, #0
 800023a:	6078      	str	r0, [r7, #4]
	for(; i != 0; i--);
 800023c:	e002      	b.n	8000244 <delay+0x10>
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	3b01      	subs	r3, #1
 8000242:	607b      	str	r3, [r7, #4]
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	2b00      	cmp	r3, #0
 8000248:	d1f9      	bne.n	800023e <delay+0xa>
}
 800024a:	46c0      	nop			; (mov r8, r8)
 800024c:	46c0      	nop			; (mov r8, r8)
 800024e:	46bd      	mov	sp, r7
 8000250:	b002      	add	sp, #8
 8000252:	bd80      	pop	{r7, pc}

08000254 <lcdDelay>:

void lcdDelay(void)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	af00      	add	r7, sp, #0
	delay(1000);
 8000258:	23fa      	movs	r3, #250	; 0xfa
 800025a:	009b      	lsls	r3, r3, #2
 800025c:	0018      	movs	r0, r3
 800025e:	f7ff ffe9 	bl	8000234 <delay>
}
 8000262:	46c0      	nop			; (mov r8, r8)
 8000264:	46bd      	mov	sp, r7
 8000266:	bd80      	pop	{r7, pc}

08000268 <lcdCmd>:

void lcdCmd(char outChar)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	b082      	sub	sp, #8
 800026c:	af00      	add	r7, sp, #0
 800026e:	0002      	movs	r2, r0
 8000270:	1dfb      	adds	r3, r7, #7
 8000272:	701a      	strb	r2, [r3, #0]
	LCD_RS_GPIO_Port->BRR  = LCD_RS_Pin;
 8000274:	4b57      	ldr	r3, [pc, #348]	; (80003d4 <lcdCmd+0x16c>)
 8000276:	2202      	movs	r2, #2
 8000278:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_EN_GPIO_Port->BRR  = LCD_EN_Pin;
 800027a:	4b56      	ldr	r3, [pc, #344]	; (80003d4 <lcdCmd+0x16c>)
 800027c:	2208      	movs	r2, #8
 800027e:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D4_GPIO_Port->BRR  = LCD_D4_Pin;
 8000280:	4b54      	ldr	r3, [pc, #336]	; (80003d4 <lcdCmd+0x16c>)
 8000282:	2210      	movs	r2, #16
 8000284:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D5_GPIO_Port->BRR  = LCD_D5_Pin;
 8000286:	4b53      	ldr	r3, [pc, #332]	; (80003d4 <lcdCmd+0x16c>)
 8000288:	2220      	movs	r2, #32
 800028a:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D6_GPIO_Port->BRR  = LCD_D6_Pin;
 800028c:	4b51      	ldr	r3, [pc, #324]	; (80003d4 <lcdCmd+0x16c>)
 800028e:	2240      	movs	r2, #64	; 0x40
 8000290:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D7_GPIO_Port->BRR  = LCD_D7_Pin;
 8000292:	4b50      	ldr	r3, [pc, #320]	; (80003d4 <lcdCmd+0x16c>)
 8000294:	2280      	movs	r2, #128	; 0x80
 8000296:	629a      	str	r2, [r3, #40]	; 0x28

	lcdDelay();
 8000298:	f7ff ffdc 	bl	8000254 <lcdDelay>

	LCD_EN_GPIO_Port->ODR |= LCD_EN_Pin;
 800029c:	4b4d      	ldr	r3, [pc, #308]	; (80003d4 <lcdCmd+0x16c>)
 800029e:	695a      	ldr	r2, [r3, #20]
 80002a0:	4b4c      	ldr	r3, [pc, #304]	; (80003d4 <lcdCmd+0x16c>)
 80002a2:	2108      	movs	r1, #8
 80002a4:	430a      	orrs	r2, r1
 80002a6:	615a      	str	r2, [r3, #20]

	if((outChar & 0x10)>>4) LCD_D4_GPIO_Port->BSRR = LCD_D4_Pin; else LCD_D4_GPIO_Port->BSRR = (uint32_t)LCD_D4_Pin << 16;
 80002a8:	1dfb      	adds	r3, r7, #7
 80002aa:	781b      	ldrb	r3, [r3, #0]
 80002ac:	2210      	movs	r2, #16
 80002ae:	4013      	ands	r3, r2
 80002b0:	d003      	beq.n	80002ba <lcdCmd+0x52>
 80002b2:	4b48      	ldr	r3, [pc, #288]	; (80003d4 <lcdCmd+0x16c>)
 80002b4:	2210      	movs	r2, #16
 80002b6:	619a      	str	r2, [r3, #24]
 80002b8:	e003      	b.n	80002c2 <lcdCmd+0x5a>
 80002ba:	4b46      	ldr	r3, [pc, #280]	; (80003d4 <lcdCmd+0x16c>)
 80002bc:	2280      	movs	r2, #128	; 0x80
 80002be:	0352      	lsls	r2, r2, #13
 80002c0:	619a      	str	r2, [r3, #24]
	if((outChar & 0x20)>>5) LCD_D5_GPIO_Port->BSRR = LCD_D5_Pin; else LCD_D5_GPIO_Port->BSRR = (uint32_t)LCD_D5_Pin << 16;
 80002c2:	1dfb      	adds	r3, r7, #7
 80002c4:	781b      	ldrb	r3, [r3, #0]
 80002c6:	2220      	movs	r2, #32
 80002c8:	4013      	ands	r3, r2
 80002ca:	d003      	beq.n	80002d4 <lcdCmd+0x6c>
 80002cc:	4b41      	ldr	r3, [pc, #260]	; (80003d4 <lcdCmd+0x16c>)
 80002ce:	2220      	movs	r2, #32
 80002d0:	619a      	str	r2, [r3, #24]
 80002d2:	e003      	b.n	80002dc <lcdCmd+0x74>
 80002d4:	4b3f      	ldr	r3, [pc, #252]	; (80003d4 <lcdCmd+0x16c>)
 80002d6:	2280      	movs	r2, #128	; 0x80
 80002d8:	0392      	lsls	r2, r2, #14
 80002da:	619a      	str	r2, [r3, #24]
	if((outChar & 0x40)>>6) LCD_D6_GPIO_Port->BSRR = LCD_D6_Pin; else LCD_D6_GPIO_Port->BSRR = (uint32_t)LCD_D6_Pin << 16;
 80002dc:	1dfb      	adds	r3, r7, #7
 80002de:	781b      	ldrb	r3, [r3, #0]
 80002e0:	2240      	movs	r2, #64	; 0x40
 80002e2:	4013      	ands	r3, r2
 80002e4:	d003      	beq.n	80002ee <lcdCmd+0x86>
 80002e6:	4b3b      	ldr	r3, [pc, #236]	; (80003d4 <lcdCmd+0x16c>)
 80002e8:	2240      	movs	r2, #64	; 0x40
 80002ea:	619a      	str	r2, [r3, #24]
 80002ec:	e003      	b.n	80002f6 <lcdCmd+0x8e>
 80002ee:	4b39      	ldr	r3, [pc, #228]	; (80003d4 <lcdCmd+0x16c>)
 80002f0:	2280      	movs	r2, #128	; 0x80
 80002f2:	03d2      	lsls	r2, r2, #15
 80002f4:	619a      	str	r2, [r3, #24]
	if((outChar & 0x80)>>7) LCD_D7_GPIO_Port->BSRR = LCD_D7_Pin; else LCD_D7_GPIO_Port->BSRR = (uint32_t)LCD_D7_Pin << 16;
 80002f6:	1dfb      	adds	r3, r7, #7
 80002f8:	781b      	ldrb	r3, [r3, #0]
 80002fa:	b25b      	sxtb	r3, r3
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	da03      	bge.n	8000308 <lcdCmd+0xa0>
 8000300:	4b34      	ldr	r3, [pc, #208]	; (80003d4 <lcdCmd+0x16c>)
 8000302:	2280      	movs	r2, #128	; 0x80
 8000304:	619a      	str	r2, [r3, #24]
 8000306:	e003      	b.n	8000310 <lcdCmd+0xa8>
 8000308:	4b32      	ldr	r3, [pc, #200]	; (80003d4 <lcdCmd+0x16c>)
 800030a:	2280      	movs	r2, #128	; 0x80
 800030c:	0412      	lsls	r2, r2, #16
 800030e:	619a      	str	r2, [r3, #24]

	lcdDelay();
 8000310:	f7ff ffa0 	bl	8000254 <lcdDelay>

	LCD_EN_GPIO_Port->BRR = LCD_EN_Pin;
 8000314:	4b2f      	ldr	r3, [pc, #188]	; (80003d4 <lcdCmd+0x16c>)
 8000316:	2208      	movs	r2, #8
 8000318:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D4_GPIO_Port->BRR = LCD_D4_Pin;
 800031a:	4b2e      	ldr	r3, [pc, #184]	; (80003d4 <lcdCmd+0x16c>)
 800031c:	2210      	movs	r2, #16
 800031e:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D5_GPIO_Port->BRR = LCD_D5_Pin;
 8000320:	4b2c      	ldr	r3, [pc, #176]	; (80003d4 <lcdCmd+0x16c>)
 8000322:	2220      	movs	r2, #32
 8000324:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D6_GPIO_Port->BRR = LCD_D6_Pin;
 8000326:	4b2b      	ldr	r3, [pc, #172]	; (80003d4 <lcdCmd+0x16c>)
 8000328:	2240      	movs	r2, #64	; 0x40
 800032a:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D7_GPIO_Port->BRR = LCD_D7_Pin;
 800032c:	4b29      	ldr	r3, [pc, #164]	; (80003d4 <lcdCmd+0x16c>)
 800032e:	2280      	movs	r2, #128	; 0x80
 8000330:	629a      	str	r2, [r3, #40]	; 0x28

	lcdDelay();
 8000332:	f7ff ff8f 	bl	8000254 <lcdDelay>

	LCD_EN_GPIO_Port->ODR |= LCD_EN_Pin;
 8000336:	4b27      	ldr	r3, [pc, #156]	; (80003d4 <lcdCmd+0x16c>)
 8000338:	695a      	ldr	r2, [r3, #20]
 800033a:	4b26      	ldr	r3, [pc, #152]	; (80003d4 <lcdCmd+0x16c>)
 800033c:	2108      	movs	r1, #8
 800033e:	430a      	orrs	r2, r1
 8000340:	615a      	str	r2, [r3, #20]

	if(outChar & 0x01) LCD_D4_GPIO_Port->BSRR = LCD_D4_Pin; else LCD_D4_GPIO_Port->BSRR = (uint32_t)LCD_D4_Pin << 16;
 8000342:	1dfb      	adds	r3, r7, #7
 8000344:	781b      	ldrb	r3, [r3, #0]
 8000346:	2201      	movs	r2, #1
 8000348:	4013      	ands	r3, r2
 800034a:	d003      	beq.n	8000354 <lcdCmd+0xec>
 800034c:	4b21      	ldr	r3, [pc, #132]	; (80003d4 <lcdCmd+0x16c>)
 800034e:	2210      	movs	r2, #16
 8000350:	619a      	str	r2, [r3, #24]
 8000352:	e003      	b.n	800035c <lcdCmd+0xf4>
 8000354:	4b1f      	ldr	r3, [pc, #124]	; (80003d4 <lcdCmd+0x16c>)
 8000356:	2280      	movs	r2, #128	; 0x80
 8000358:	0352      	lsls	r2, r2, #13
 800035a:	619a      	str	r2, [r3, #24]
	if((outChar & 0x02)>>1) LCD_D5_GPIO_Port->BSRR = LCD_D5_Pin; else LCD_D5_GPIO_Port->BSRR = (uint32_t)LCD_D5_Pin << 16;
 800035c:	1dfb      	adds	r3, r7, #7
 800035e:	781b      	ldrb	r3, [r3, #0]
 8000360:	2202      	movs	r2, #2
 8000362:	4013      	ands	r3, r2
 8000364:	d003      	beq.n	800036e <lcdCmd+0x106>
 8000366:	4b1b      	ldr	r3, [pc, #108]	; (80003d4 <lcdCmd+0x16c>)
 8000368:	2220      	movs	r2, #32
 800036a:	619a      	str	r2, [r3, #24]
 800036c:	e003      	b.n	8000376 <lcdCmd+0x10e>
 800036e:	4b19      	ldr	r3, [pc, #100]	; (80003d4 <lcdCmd+0x16c>)
 8000370:	2280      	movs	r2, #128	; 0x80
 8000372:	0392      	lsls	r2, r2, #14
 8000374:	619a      	str	r2, [r3, #24]
	if((outChar & 0x04)>>2) LCD_D6_GPIO_Port->BSRR = LCD_D6_Pin; else LCD_D6_GPIO_Port->BSRR = (uint32_t)LCD_D6_Pin << 16;
 8000376:	1dfb      	adds	r3, r7, #7
 8000378:	781b      	ldrb	r3, [r3, #0]
 800037a:	2204      	movs	r2, #4
 800037c:	4013      	ands	r3, r2
 800037e:	d003      	beq.n	8000388 <lcdCmd+0x120>
 8000380:	4b14      	ldr	r3, [pc, #80]	; (80003d4 <lcdCmd+0x16c>)
 8000382:	2240      	movs	r2, #64	; 0x40
 8000384:	619a      	str	r2, [r3, #24]
 8000386:	e003      	b.n	8000390 <lcdCmd+0x128>
 8000388:	4b12      	ldr	r3, [pc, #72]	; (80003d4 <lcdCmd+0x16c>)
 800038a:	2280      	movs	r2, #128	; 0x80
 800038c:	03d2      	lsls	r2, r2, #15
 800038e:	619a      	str	r2, [r3, #24]
	if((outChar & 0x08)>>3) LCD_D7_GPIO_Port->BSRR = LCD_D7_Pin; else LCD_D7_GPIO_Port->BSRR = (uint32_t)LCD_D7_Pin << 16;
 8000390:	1dfb      	adds	r3, r7, #7
 8000392:	781b      	ldrb	r3, [r3, #0]
 8000394:	2208      	movs	r2, #8
 8000396:	4013      	ands	r3, r2
 8000398:	d003      	beq.n	80003a2 <lcdCmd+0x13a>
 800039a:	4b0e      	ldr	r3, [pc, #56]	; (80003d4 <lcdCmd+0x16c>)
 800039c:	2280      	movs	r2, #128	; 0x80
 800039e:	619a      	str	r2, [r3, #24]
 80003a0:	e003      	b.n	80003aa <lcdCmd+0x142>
 80003a2:	4b0c      	ldr	r3, [pc, #48]	; (80003d4 <lcdCmd+0x16c>)
 80003a4:	2280      	movs	r2, #128	; 0x80
 80003a6:	0412      	lsls	r2, r2, #16
 80003a8:	619a      	str	r2, [r3, #24]

	lcdDelay();
 80003aa:	f7ff ff53 	bl	8000254 <lcdDelay>

	LCD_EN_GPIO_Port->BRR = LCD_EN_Pin;
 80003ae:	4b09      	ldr	r3, [pc, #36]	; (80003d4 <lcdCmd+0x16c>)
 80003b0:	2208      	movs	r2, #8
 80003b2:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D4_GPIO_Port->BRR = LCD_D4_Pin;
 80003b4:	4b07      	ldr	r3, [pc, #28]	; (80003d4 <lcdCmd+0x16c>)
 80003b6:	2210      	movs	r2, #16
 80003b8:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D5_GPIO_Port->BRR = LCD_D5_Pin;
 80003ba:	4b06      	ldr	r3, [pc, #24]	; (80003d4 <lcdCmd+0x16c>)
 80003bc:	2220      	movs	r2, #32
 80003be:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D6_GPIO_Port->BRR = LCD_D6_Pin;
 80003c0:	4b04      	ldr	r3, [pc, #16]	; (80003d4 <lcdCmd+0x16c>)
 80003c2:	2240      	movs	r2, #64	; 0x40
 80003c4:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D7_GPIO_Port->BRR = LCD_D7_Pin;
 80003c6:	4b03      	ldr	r3, [pc, #12]	; (80003d4 <lcdCmd+0x16c>)
 80003c8:	2280      	movs	r2, #128	; 0x80
 80003ca:	629a      	str	r2, [r3, #40]	; 0x28
}
 80003cc:	46c0      	nop			; (mov r8, r8)
 80003ce:	46bd      	mov	sp, r7
 80003d0:	b002      	add	sp, #8
 80003d2:	bd80      	pop	{r7, pc}
 80003d4:	48000400 	.word	0x48000400

080003d8 <lcdCharCp>:

void lcdCharCp(char outChar)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	b082      	sub	sp, #8
 80003dc:	af00      	add	r7, sp, #0
 80003de:	0002      	movs	r2, r0
 80003e0:	1dfb      	adds	r3, r7, #7
 80003e2:	701a      	strb	r2, [r3, #0]
	LCD_RS_GPIO_Port->ODR |= LCD_RS_Pin;
 80003e4:	4b59      	ldr	r3, [pc, #356]	; (800054c <lcdCharCp+0x174>)
 80003e6:	695a      	ldr	r2, [r3, #20]
 80003e8:	4b58      	ldr	r3, [pc, #352]	; (800054c <lcdCharCp+0x174>)
 80003ea:	2102      	movs	r1, #2
 80003ec:	430a      	orrs	r2, r1
 80003ee:	615a      	str	r2, [r3, #20]

	LCD_EN_GPIO_Port->BRR  = LCD_EN_Pin;
 80003f0:	4b56      	ldr	r3, [pc, #344]	; (800054c <lcdCharCp+0x174>)
 80003f2:	2208      	movs	r2, #8
 80003f4:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D4_GPIO_Port->BRR  = LCD_D4_Pin;
 80003f6:	4b55      	ldr	r3, [pc, #340]	; (800054c <lcdCharCp+0x174>)
 80003f8:	2210      	movs	r2, #16
 80003fa:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D5_GPIO_Port->BRR  = LCD_D5_Pin;
 80003fc:	4b53      	ldr	r3, [pc, #332]	; (800054c <lcdCharCp+0x174>)
 80003fe:	2220      	movs	r2, #32
 8000400:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D6_GPIO_Port->BRR  = LCD_D6_Pin;
 8000402:	4b52      	ldr	r3, [pc, #328]	; (800054c <lcdCharCp+0x174>)
 8000404:	2240      	movs	r2, #64	; 0x40
 8000406:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D7_GPIO_Port->BRR  = LCD_D7_Pin;
 8000408:	4b50      	ldr	r3, [pc, #320]	; (800054c <lcdCharCp+0x174>)
 800040a:	2280      	movs	r2, #128	; 0x80
 800040c:	629a      	str	r2, [r3, #40]	; 0x28

	lcdDelay();
 800040e:	f7ff ff21 	bl	8000254 <lcdDelay>

	LCD_EN_GPIO_Port->ODR |= LCD_EN_Pin;
 8000412:	4b4e      	ldr	r3, [pc, #312]	; (800054c <lcdCharCp+0x174>)
 8000414:	695a      	ldr	r2, [r3, #20]
 8000416:	4b4d      	ldr	r3, [pc, #308]	; (800054c <lcdCharCp+0x174>)
 8000418:	2108      	movs	r1, #8
 800041a:	430a      	orrs	r2, r1
 800041c:	615a      	str	r2, [r3, #20]

	if((outChar & 0x10)>>4) LCD_D4_GPIO_Port->BSRR = LCD_D4_Pin; else LCD_D4_GPIO_Port->BSRR = (uint32_t)LCD_D4_Pin << 16;
 800041e:	1dfb      	adds	r3, r7, #7
 8000420:	781b      	ldrb	r3, [r3, #0]
 8000422:	2210      	movs	r2, #16
 8000424:	4013      	ands	r3, r2
 8000426:	d003      	beq.n	8000430 <lcdCharCp+0x58>
 8000428:	4b48      	ldr	r3, [pc, #288]	; (800054c <lcdCharCp+0x174>)
 800042a:	2210      	movs	r2, #16
 800042c:	619a      	str	r2, [r3, #24]
 800042e:	e003      	b.n	8000438 <lcdCharCp+0x60>
 8000430:	4b46      	ldr	r3, [pc, #280]	; (800054c <lcdCharCp+0x174>)
 8000432:	2280      	movs	r2, #128	; 0x80
 8000434:	0352      	lsls	r2, r2, #13
 8000436:	619a      	str	r2, [r3, #24]
	if((outChar & 0x20)>>5) LCD_D5_GPIO_Port->BSRR = LCD_D5_Pin; else LCD_D5_GPIO_Port->BSRR = (uint32_t)LCD_D5_Pin << 16;
 8000438:	1dfb      	adds	r3, r7, #7
 800043a:	781b      	ldrb	r3, [r3, #0]
 800043c:	2220      	movs	r2, #32
 800043e:	4013      	ands	r3, r2
 8000440:	d003      	beq.n	800044a <lcdCharCp+0x72>
 8000442:	4b42      	ldr	r3, [pc, #264]	; (800054c <lcdCharCp+0x174>)
 8000444:	2220      	movs	r2, #32
 8000446:	619a      	str	r2, [r3, #24]
 8000448:	e003      	b.n	8000452 <lcdCharCp+0x7a>
 800044a:	4b40      	ldr	r3, [pc, #256]	; (800054c <lcdCharCp+0x174>)
 800044c:	2280      	movs	r2, #128	; 0x80
 800044e:	0392      	lsls	r2, r2, #14
 8000450:	619a      	str	r2, [r3, #24]
	if((outChar & 0x40)>>6) LCD_D6_GPIO_Port->BSRR = LCD_D6_Pin; else LCD_D6_GPIO_Port->BSRR = (uint32_t)LCD_D6_Pin << 16;
 8000452:	1dfb      	adds	r3, r7, #7
 8000454:	781b      	ldrb	r3, [r3, #0]
 8000456:	2240      	movs	r2, #64	; 0x40
 8000458:	4013      	ands	r3, r2
 800045a:	d003      	beq.n	8000464 <lcdCharCp+0x8c>
 800045c:	4b3b      	ldr	r3, [pc, #236]	; (800054c <lcdCharCp+0x174>)
 800045e:	2240      	movs	r2, #64	; 0x40
 8000460:	619a      	str	r2, [r3, #24]
 8000462:	e003      	b.n	800046c <lcdCharCp+0x94>
 8000464:	4b39      	ldr	r3, [pc, #228]	; (800054c <lcdCharCp+0x174>)
 8000466:	2280      	movs	r2, #128	; 0x80
 8000468:	03d2      	lsls	r2, r2, #15
 800046a:	619a      	str	r2, [r3, #24]
	if((outChar & 0x80)>>7) LCD_D7_GPIO_Port->BSRR = LCD_D7_Pin; else LCD_D7_GPIO_Port->BSRR = (uint32_t)LCD_D7_Pin << 16;
 800046c:	1dfb      	adds	r3, r7, #7
 800046e:	781b      	ldrb	r3, [r3, #0]
 8000470:	b25b      	sxtb	r3, r3
 8000472:	2b00      	cmp	r3, #0
 8000474:	da03      	bge.n	800047e <lcdCharCp+0xa6>
 8000476:	4b35      	ldr	r3, [pc, #212]	; (800054c <lcdCharCp+0x174>)
 8000478:	2280      	movs	r2, #128	; 0x80
 800047a:	619a      	str	r2, [r3, #24]
 800047c:	e003      	b.n	8000486 <lcdCharCp+0xae>
 800047e:	4b33      	ldr	r3, [pc, #204]	; (800054c <lcdCharCp+0x174>)
 8000480:	2280      	movs	r2, #128	; 0x80
 8000482:	0412      	lsls	r2, r2, #16
 8000484:	619a      	str	r2, [r3, #24]

	lcdDelay();
 8000486:	f7ff fee5 	bl	8000254 <lcdDelay>

	LCD_EN_GPIO_Port->BRR = LCD_EN_Pin;
 800048a:	4b30      	ldr	r3, [pc, #192]	; (800054c <lcdCharCp+0x174>)
 800048c:	2208      	movs	r2, #8
 800048e:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D4_GPIO_Port->BRR = LCD_D4_Pin;
 8000490:	4b2e      	ldr	r3, [pc, #184]	; (800054c <lcdCharCp+0x174>)
 8000492:	2210      	movs	r2, #16
 8000494:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D5_GPIO_Port->BRR = LCD_D5_Pin;
 8000496:	4b2d      	ldr	r3, [pc, #180]	; (800054c <lcdCharCp+0x174>)
 8000498:	2220      	movs	r2, #32
 800049a:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D6_GPIO_Port->BRR = LCD_D6_Pin;
 800049c:	4b2b      	ldr	r3, [pc, #172]	; (800054c <lcdCharCp+0x174>)
 800049e:	2240      	movs	r2, #64	; 0x40
 80004a0:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D7_GPIO_Port->BRR = LCD_D7_Pin;
 80004a2:	4b2a      	ldr	r3, [pc, #168]	; (800054c <lcdCharCp+0x174>)
 80004a4:	2280      	movs	r2, #128	; 0x80
 80004a6:	629a      	str	r2, [r3, #40]	; 0x28

	lcdDelay();
 80004a8:	f7ff fed4 	bl	8000254 <lcdDelay>

	LCD_EN_GPIO_Port->ODR |= LCD_EN_Pin;
 80004ac:	4b27      	ldr	r3, [pc, #156]	; (800054c <lcdCharCp+0x174>)
 80004ae:	695a      	ldr	r2, [r3, #20]
 80004b0:	4b26      	ldr	r3, [pc, #152]	; (800054c <lcdCharCp+0x174>)
 80004b2:	2108      	movs	r1, #8
 80004b4:	430a      	orrs	r2, r1
 80004b6:	615a      	str	r2, [r3, #20]

	if(outChar & 0x01) LCD_D4_GPIO_Port->BSRR = LCD_D4_Pin; else LCD_D4_GPIO_Port->BSRR = (uint32_t)LCD_D4_Pin << 16;
 80004b8:	1dfb      	adds	r3, r7, #7
 80004ba:	781b      	ldrb	r3, [r3, #0]
 80004bc:	2201      	movs	r2, #1
 80004be:	4013      	ands	r3, r2
 80004c0:	d003      	beq.n	80004ca <lcdCharCp+0xf2>
 80004c2:	4b22      	ldr	r3, [pc, #136]	; (800054c <lcdCharCp+0x174>)
 80004c4:	2210      	movs	r2, #16
 80004c6:	619a      	str	r2, [r3, #24]
 80004c8:	e003      	b.n	80004d2 <lcdCharCp+0xfa>
 80004ca:	4b20      	ldr	r3, [pc, #128]	; (800054c <lcdCharCp+0x174>)
 80004cc:	2280      	movs	r2, #128	; 0x80
 80004ce:	0352      	lsls	r2, r2, #13
 80004d0:	619a      	str	r2, [r3, #24]
	if((outChar & 0x02)>>1) LCD_D5_GPIO_Port->BSRR = LCD_D5_Pin; else LCD_D5_GPIO_Port->BSRR = (uint32_t)LCD_D5_Pin << 16;
 80004d2:	1dfb      	adds	r3, r7, #7
 80004d4:	781b      	ldrb	r3, [r3, #0]
 80004d6:	2202      	movs	r2, #2
 80004d8:	4013      	ands	r3, r2
 80004da:	d003      	beq.n	80004e4 <lcdCharCp+0x10c>
 80004dc:	4b1b      	ldr	r3, [pc, #108]	; (800054c <lcdCharCp+0x174>)
 80004de:	2220      	movs	r2, #32
 80004e0:	619a      	str	r2, [r3, #24]
 80004e2:	e003      	b.n	80004ec <lcdCharCp+0x114>
 80004e4:	4b19      	ldr	r3, [pc, #100]	; (800054c <lcdCharCp+0x174>)
 80004e6:	2280      	movs	r2, #128	; 0x80
 80004e8:	0392      	lsls	r2, r2, #14
 80004ea:	619a      	str	r2, [r3, #24]
	if((outChar & 0x04)>>2) LCD_D6_GPIO_Port->BSRR = LCD_D6_Pin; else LCD_D6_GPIO_Port->BSRR = (uint32_t)LCD_D6_Pin << 16;
 80004ec:	1dfb      	adds	r3, r7, #7
 80004ee:	781b      	ldrb	r3, [r3, #0]
 80004f0:	2204      	movs	r2, #4
 80004f2:	4013      	ands	r3, r2
 80004f4:	d003      	beq.n	80004fe <lcdCharCp+0x126>
 80004f6:	4b15      	ldr	r3, [pc, #84]	; (800054c <lcdCharCp+0x174>)
 80004f8:	2240      	movs	r2, #64	; 0x40
 80004fa:	619a      	str	r2, [r3, #24]
 80004fc:	e003      	b.n	8000506 <lcdCharCp+0x12e>
 80004fe:	4b13      	ldr	r3, [pc, #76]	; (800054c <lcdCharCp+0x174>)
 8000500:	2280      	movs	r2, #128	; 0x80
 8000502:	03d2      	lsls	r2, r2, #15
 8000504:	619a      	str	r2, [r3, #24]
	if((outChar & 0x08)>>3) LCD_D7_GPIO_Port->BSRR = LCD_D7_Pin; else LCD_D7_GPIO_Port->BSRR = (uint32_t)LCD_D7_Pin << 16;
 8000506:	1dfb      	adds	r3, r7, #7
 8000508:	781b      	ldrb	r3, [r3, #0]
 800050a:	2208      	movs	r2, #8
 800050c:	4013      	ands	r3, r2
 800050e:	d003      	beq.n	8000518 <lcdCharCp+0x140>
 8000510:	4b0e      	ldr	r3, [pc, #56]	; (800054c <lcdCharCp+0x174>)
 8000512:	2280      	movs	r2, #128	; 0x80
 8000514:	619a      	str	r2, [r3, #24]
 8000516:	e003      	b.n	8000520 <lcdCharCp+0x148>
 8000518:	4b0c      	ldr	r3, [pc, #48]	; (800054c <lcdCharCp+0x174>)
 800051a:	2280      	movs	r2, #128	; 0x80
 800051c:	0412      	lsls	r2, r2, #16
 800051e:	619a      	str	r2, [r3, #24]

	lcdDelay();
 8000520:	f7ff fe98 	bl	8000254 <lcdDelay>

	LCD_EN_GPIO_Port->BRR = LCD_EN_Pin;
 8000524:	4b09      	ldr	r3, [pc, #36]	; (800054c <lcdCharCp+0x174>)
 8000526:	2208      	movs	r2, #8
 8000528:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D4_GPIO_Port->BRR = LCD_D4_Pin;
 800052a:	4b08      	ldr	r3, [pc, #32]	; (800054c <lcdCharCp+0x174>)
 800052c:	2210      	movs	r2, #16
 800052e:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D5_GPIO_Port->BRR = LCD_D5_Pin;
 8000530:	4b06      	ldr	r3, [pc, #24]	; (800054c <lcdCharCp+0x174>)
 8000532:	2220      	movs	r2, #32
 8000534:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D6_GPIO_Port->BRR = LCD_D6_Pin;
 8000536:	4b05      	ldr	r3, [pc, #20]	; (800054c <lcdCharCp+0x174>)
 8000538:	2240      	movs	r2, #64	; 0x40
 800053a:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D7_GPIO_Port->BRR = LCD_D7_Pin;
 800053c:	4b03      	ldr	r3, [pc, #12]	; (800054c <lcdCharCp+0x174>)
 800053e:	2280      	movs	r2, #128	; 0x80
 8000540:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000542:	46c0      	nop			; (mov r8, r8)
 8000544:	46bd      	mov	sp, r7
 8000546:	b002      	add	sp, #8
 8000548:	bd80      	pop	{r7, pc}
 800054a:	46c0      	nop			; (mov r8, r8)
 800054c:	48000400 	.word	0x48000400

08000550 <lcdOutCp>:

void lcdOutCp(char *outChar)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b082      	sub	sp, #8
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
	while(*outChar)
 8000558:	e008      	b.n	800056c <lcdOutCp+0x1c>
	{
		lcdDelay();
 800055a:	f7ff fe7b 	bl	8000254 <lcdDelay>
		lcdCharCp(*outChar++);
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	1c5a      	adds	r2, r3, #1
 8000562:	607a      	str	r2, [r7, #4]
 8000564:	781b      	ldrb	r3, [r3, #0]
 8000566:	0018      	movs	r0, r3
 8000568:	f7ff ff36 	bl	80003d8 <lcdCharCp>
	while(*outChar)
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	781b      	ldrb	r3, [r3, #0]
 8000570:	2b00      	cmp	r3, #0
 8000572:	d1f2      	bne.n	800055a <lcdOutCp+0xa>
	}

	lcdDelay();
 8000574:	f7ff fe6e 	bl	8000254 <lcdDelay>
}
 8000578:	46c0      	nop			; (mov r8, r8)
 800057a:	46bd      	mov	sp, r7
 800057c:	b002      	add	sp, #8
 800057e:	bd80      	pop	{r7, pc}

08000580 <lcdInit>:

void lcdInit(char bits, char font, char lines)
{
 8000580:	b590      	push	{r4, r7, lr}
 8000582:	b083      	sub	sp, #12
 8000584:	af00      	add	r7, sp, #0
 8000586:	0004      	movs	r4, r0
 8000588:	0008      	movs	r0, r1
 800058a:	0011      	movs	r1, r2
 800058c:	1dfb      	adds	r3, r7, #7
 800058e:	1c22      	adds	r2, r4, #0
 8000590:	701a      	strb	r2, [r3, #0]
 8000592:	1dbb      	adds	r3, r7, #6
 8000594:	1c02      	adds	r2, r0, #0
 8000596:	701a      	strb	r2, [r3, #0]
 8000598:	1d7b      	adds	r3, r7, #5
 800059a:	1c0a      	adds	r2, r1, #0
 800059c:	701a      	strb	r2, [r3, #0]
	HAL_Delay(250);
 800059e:	20fa      	movs	r0, #250	; 0xfa
 80005a0:	f001 fab2 	bl	8001b08 <HAL_Delay>
	lcdCmd(_RETURN_HOME);
 80005a4:	2002      	movs	r0, #2
 80005a6:	f7ff fe5f 	bl	8000268 <lcdCmd>
    HAL_Delay(50);
 80005aa:	2032      	movs	r0, #50	; 0x32
 80005ac:	f001 faac 	bl	8001b08 <HAL_Delay>
    lcdCmd(0x20 | bits | font | lines);
 80005b0:	1dfa      	adds	r2, r7, #7
 80005b2:	1dbb      	adds	r3, r7, #6
 80005b4:	7812      	ldrb	r2, [r2, #0]
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	4313      	orrs	r3, r2
 80005ba:	b2da      	uxtb	r2, r3
 80005bc:	1d7b      	adds	r3, r7, #5
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	4313      	orrs	r3, r2
 80005c2:	b2db      	uxtb	r3, r3
 80005c4:	2220      	movs	r2, #32
 80005c6:	4313      	orrs	r3, r2
 80005c8:	b2db      	uxtb	r3, r3
 80005ca:	0018      	movs	r0, r3
 80005cc:	f7ff fe4c 	bl	8000268 <lcdCmd>
    HAL_Delay(50);
 80005d0:	2032      	movs	r0, #50	; 0x32
 80005d2:	f001 fa99 	bl	8001b08 <HAL_Delay>
    lcdCmd(_LCD_INIT);
 80005d6:	2006      	movs	r0, #6
 80005d8:	f7ff fe46 	bl	8000268 <lcdCmd>
    HAL_Delay(50);
 80005dc:	2032      	movs	r0, #50	; 0x32
 80005de:	f001 fa93 	bl	8001b08 <HAL_Delay>
    lcdCmd(0x0E);
 80005e2:	200e      	movs	r0, #14
 80005e4:	f7ff fe40 	bl	8000268 <lcdCmd>
    HAL_Delay(50);
 80005e8:	2032      	movs	r0, #50	; 0x32
 80005ea:	f001 fa8d 	bl	8001b08 <HAL_Delay>
    lcdCmd(0x0C);
 80005ee:	200c      	movs	r0, #12
 80005f0:	f7ff fe3a 	bl	8000268 <lcdCmd>
    HAL_Delay(50);
 80005f4:	2032      	movs	r0, #50	; 0x32
 80005f6:	f001 fa87 	bl	8001b08 <HAL_Delay>
    lcdCmd(0x01);
 80005fa:	2001      	movs	r0, #1
 80005fc:	f7ff fe34 	bl	8000268 <lcdCmd>
    HAL_Delay(100);
 8000600:	2064      	movs	r0, #100	; 0x64
 8000602:	f001 fa81 	bl	8001b08 <HAL_Delay>
}
 8000606:	46c0      	nop			; (mov r8, r8)
 8000608:	46bd      	mov	sp, r7
 800060a:	b003      	add	sp, #12
 800060c:	bd90      	pop	{r4, r7, pc}

0800060e <lcdGotoXY>:

void lcdGotoXY(unsigned char row, unsigned char column)
{
 800060e:	b580      	push	{r7, lr}
 8000610:	b082      	sub	sp, #8
 8000612:	af00      	add	r7, sp, #0
 8000614:	0002      	movs	r2, r0
 8000616:	1dfb      	adds	r3, r7, #7
 8000618:	701a      	strb	r2, [r3, #0]
 800061a:	1dbb      	adds	r3, r7, #6
 800061c:	1c0a      	adds	r2, r1, #0
 800061e:	701a      	strb	r2, [r3, #0]
	if(row == 1)
 8000620:	1dfb      	adds	r3, r7, #7
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	2b01      	cmp	r3, #1
 8000626:	d107      	bne.n	8000638 <lcdGotoXY+0x2a>
	{
		lcdCmd(0x80 + (column - 1));
 8000628:	1dbb      	adds	r3, r7, #6
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	337f      	adds	r3, #127	; 0x7f
 800062e:	b2db      	uxtb	r3, r3
 8000630:	0018      	movs	r0, r3
 8000632:	f7ff fe19 	bl	8000268 <lcdCmd>
	}
	else if(row == 2)
	{
		lcdCmd(0xC0 + (column - 1));
	}
}
 8000636:	e00a      	b.n	800064e <lcdGotoXY+0x40>
	else if(row == 2)
 8000638:	1dfb      	adds	r3, r7, #7
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	2b02      	cmp	r3, #2
 800063e:	d106      	bne.n	800064e <lcdGotoXY+0x40>
		lcdCmd(0xC0 + (column - 1));
 8000640:	1dbb      	adds	r3, r7, #6
 8000642:	781b      	ldrb	r3, [r3, #0]
 8000644:	3b41      	subs	r3, #65	; 0x41
 8000646:	b2db      	uxtb	r3, r3
 8000648:	0018      	movs	r0, r3
 800064a:	f7ff fe0d 	bl	8000268 <lcdCmd>
}
 800064e:	46c0      	nop			; (mov r8, r8)
 8000650:	46bd      	mov	sp, r7
 8000652:	b002      	add	sp, #8
 8000654:	bd80      	pop	{r7, pc}

08000656 <lcdPrint>:
	lcdGotoXY(row, column);
	lcdCharCp(outChar);
}

void lcdPrint(unsigned char row, unsigned char column, char *outChar)
{
 8000656:	b580      	push	{r7, lr}
 8000658:	b082      	sub	sp, #8
 800065a:	af00      	add	r7, sp, #0
 800065c:	603a      	str	r2, [r7, #0]
 800065e:	1dfb      	adds	r3, r7, #7
 8000660:	1c02      	adds	r2, r0, #0
 8000662:	701a      	strb	r2, [r3, #0]
 8000664:	1dbb      	adds	r3, r7, #6
 8000666:	1c0a      	adds	r2, r1, #0
 8000668:	701a      	strb	r2, [r3, #0]
	lcdGotoXY(row, column);
 800066a:	1dbb      	adds	r3, r7, #6
 800066c:	781a      	ldrb	r2, [r3, #0]
 800066e:	1dfb      	adds	r3, r7, #7
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	0011      	movs	r1, r2
 8000674:	0018      	movs	r0, r3
 8000676:	f7ff ffca 	bl	800060e <lcdGotoXY>
	lcdOutCp(outChar);
 800067a:	683b      	ldr	r3, [r7, #0]
 800067c:	0018      	movs	r0, r3
 800067e:	f7ff ff67 	bl	8000550 <lcdOutCp>
}
 8000682:	46c0      	nop			; (mov r8, r8)
 8000684:	46bd      	mov	sp, r7
 8000686:	b002      	add	sp, #8
 8000688:	bd80      	pop	{r7, pc}

0800068a <lcdClear>:

void lcdClear(void)
{
 800068a:	b580      	push	{r7, lr}
 800068c:	af00      	add	r7, sp, #0
	lcdCmd(_CLEAR);
 800068e:	2001      	movs	r0, #1
 8000690:	f7ff fdea 	bl	8000268 <lcdCmd>
	HAL_Delay(2);
 8000694:	2002      	movs	r0, #2
 8000696:	f001 fa37 	bl	8001b08 <HAL_Delay>
}
 800069a:	46c0      	nop			; (mov r8, r8)
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}

080006a0 <singleBip>:
uint8_t digit3 = 0;
uint32_t credit = 0;
bool cardState = false;

void singleBip()
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 80006a4:	2380      	movs	r3, #128	; 0x80
 80006a6:	0119      	lsls	r1, r3, #4
 80006a8:	2390      	movs	r3, #144	; 0x90
 80006aa:	05db      	lsls	r3, r3, #23
 80006ac:	2201      	movs	r2, #1
 80006ae:	0018      	movs	r0, r3
 80006b0:	f001 fc8f 	bl	8001fd2 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80006b4:	2064      	movs	r0, #100	; 0x64
 80006b6:	f001 fa27 	bl	8001b08 <HAL_Delay>
	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 80006ba:	2380      	movs	r3, #128	; 0x80
 80006bc:	0119      	lsls	r1, r3, #4
 80006be:	2390      	movs	r3, #144	; 0x90
 80006c0:	05db      	lsls	r3, r3, #23
 80006c2:	2200      	movs	r2, #0
 80006c4:	0018      	movs	r0, r3
 80006c6:	f001 fc84 	bl	8001fd2 <HAL_GPIO_WritePin>
}
 80006ca:	46c0      	nop			; (mov r8, r8)
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}

080006d0 <multiBip>:

void multiBip(uint8_t cnt)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b084      	sub	sp, #16
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	0002      	movs	r2, r0
 80006d8:	1dfb      	adds	r3, r7, #7
 80006da:	701a      	strb	r2, [r3, #0]
	for(uint8_t i=0; i<cnt; i++)
 80006dc:	230f      	movs	r3, #15
 80006de:	18fb      	adds	r3, r7, r3
 80006e0:	2200      	movs	r2, #0
 80006e2:	701a      	strb	r2, [r3, #0]
 80006e4:	e01b      	b.n	800071e <multiBip+0x4e>
	{
		HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 80006e6:	2380      	movs	r3, #128	; 0x80
 80006e8:	0119      	lsls	r1, r3, #4
 80006ea:	2390      	movs	r3, #144	; 0x90
 80006ec:	05db      	lsls	r3, r3, #23
 80006ee:	2201      	movs	r2, #1
 80006f0:	0018      	movs	r0, r3
 80006f2:	f001 fc6e 	bl	8001fd2 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 80006f6:	2064      	movs	r0, #100	; 0x64
 80006f8:	f001 fa06 	bl	8001b08 <HAL_Delay>
		HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 80006fc:	2380      	movs	r3, #128	; 0x80
 80006fe:	0119      	lsls	r1, r3, #4
 8000700:	2390      	movs	r3, #144	; 0x90
 8000702:	05db      	lsls	r3, r3, #23
 8000704:	2200      	movs	r2, #0
 8000706:	0018      	movs	r0, r3
 8000708:	f001 fc63 	bl	8001fd2 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 800070c:	2064      	movs	r0, #100	; 0x64
 800070e:	f001 f9fb 	bl	8001b08 <HAL_Delay>
	for(uint8_t i=0; i<cnt; i++)
 8000712:	210f      	movs	r1, #15
 8000714:	187b      	adds	r3, r7, r1
 8000716:	781a      	ldrb	r2, [r3, #0]
 8000718:	187b      	adds	r3, r7, r1
 800071a:	3201      	adds	r2, #1
 800071c:	701a      	strb	r2, [r3, #0]
 800071e:	230f      	movs	r3, #15
 8000720:	18fa      	adds	r2, r7, r3
 8000722:	1dfb      	adds	r3, r7, #7
 8000724:	7812      	ldrb	r2, [r2, #0]
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	429a      	cmp	r2, r3
 800072a:	d3dc      	bcc.n	80006e6 <multiBip+0x16>
	}
}
 800072c:	46c0      	nop			; (mov r8, r8)
 800072e:	46c0      	nop			; (mov r8, r8)
 8000730:	46bd      	mov	sp, r7
 8000732:	b004      	add	sp, #16
 8000734:	bd80      	pop	{r7, pc}
	...

08000738 <checkButtons>:

void checkButtons()
{
 8000738:	b590      	push	{r4, r7, lr}
 800073a:	b083      	sub	sp, #12
 800073c:	af00      	add	r7, sp, #0
	if(!HAL_GPIO_ReadPin(GPIOA, BTN_1_Pin))
 800073e:	2380      	movs	r3, #128	; 0x80
 8000740:	021a      	lsls	r2, r3, #8
 8000742:	2390      	movs	r3, #144	; 0x90
 8000744:	05db      	lsls	r3, r3, #23
 8000746:	0011      	movs	r1, r2
 8000748:	0018      	movs	r0, r3
 800074a:	f001 fc25 	bl	8001f98 <HAL_GPIO_ReadPin>
 800074e:	1e03      	subs	r3, r0, #0
 8000750:	d140      	bne.n	80007d4 <checkButtons+0x9c>
	{
		if(digit1 != 9) {
 8000752:	4bdf      	ldr	r3, [pc, #892]	; (8000ad0 <checkButtons+0x398>)
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	2b09      	cmp	r3, #9
 8000758:	d006      	beq.n	8000768 <checkButtons+0x30>
			digit1++;
 800075a:	4bdd      	ldr	r3, [pc, #884]	; (8000ad0 <checkButtons+0x398>)
 800075c:	781b      	ldrb	r3, [r3, #0]
 800075e:	3301      	adds	r3, #1
 8000760:	b2da      	uxtb	r2, r3
 8000762:	4bdb      	ldr	r3, [pc, #876]	; (8000ad0 <checkButtons+0x398>)
 8000764:	701a      	strb	r2, [r3, #0]
 8000766:	e002      	b.n	800076e <checkButtons+0x36>
		}
		else {
			digit1 = 0;
 8000768:	4bd9      	ldr	r3, [pc, #868]	; (8000ad0 <checkButtons+0x398>)
 800076a:	2200      	movs	r2, #0
 800076c:	701a      	strb	r2, [r3, #0]
		}

		credit = digit3 * 1000 + digit2 * 100 + digit1 * 10;
 800076e:	4bd9      	ldr	r3, [pc, #868]	; (8000ad4 <checkButtons+0x39c>)
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	001a      	movs	r2, r3
 8000774:	0013      	movs	r3, r2
 8000776:	015b      	lsls	r3, r3, #5
 8000778:	1a9b      	subs	r3, r3, r2
 800077a:	009b      	lsls	r3, r3, #2
 800077c:	189b      	adds	r3, r3, r2
 800077e:	00db      	lsls	r3, r3, #3
 8000780:	001a      	movs	r2, r3
 8000782:	4bd5      	ldr	r3, [pc, #852]	; (8000ad8 <checkButtons+0x3a0>)
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	0019      	movs	r1, r3
 8000788:	2364      	movs	r3, #100	; 0x64
 800078a:	434b      	muls	r3, r1
 800078c:	18d2      	adds	r2, r2, r3
 800078e:	4bd0      	ldr	r3, [pc, #832]	; (8000ad0 <checkButtons+0x398>)
 8000790:	781b      	ldrb	r3, [r3, #0]
 8000792:	0019      	movs	r1, r3
 8000794:	000b      	movs	r3, r1
 8000796:	009b      	lsls	r3, r3, #2
 8000798:	185b      	adds	r3, r3, r1
 800079a:	005b      	lsls	r3, r3, #1
 800079c:	18d3      	adds	r3, r2, r3
 800079e:	001a      	movs	r2, r3
 80007a0:	4bce      	ldr	r3, [pc, #824]	; (8000adc <checkButtons+0x3a4>)
 80007a2:	601a      	str	r2, [r3, #0]

		lcdClear();
 80007a4:	f7ff ff71 	bl	800068a <lcdClear>
		lcdPrint(1,1,"KREDi YUKLE");
 80007a8:	4bcd      	ldr	r3, [pc, #820]	; (8000ae0 <checkButtons+0x3a8>)
 80007aa:	001a      	movs	r2, r3
 80007ac:	2101      	movs	r1, #1
 80007ae:	2001      	movs	r0, #1
 80007b0:	f7ff ff51 	bl	8000656 <lcdPrint>
		sprintf(screen2,"KREDi : %d ",credit);
 80007b4:	4bc9      	ldr	r3, [pc, #804]	; (8000adc <checkButtons+0x3a4>)
 80007b6:	681a      	ldr	r2, [r3, #0]
 80007b8:	49ca      	ldr	r1, [pc, #808]	; (8000ae4 <checkButtons+0x3ac>)
 80007ba:	4bcb      	ldr	r3, [pc, #812]	; (8000ae8 <checkButtons+0x3b0>)
 80007bc:	0018      	movs	r0, r3
 80007be:	f002 ffb7 	bl	8003730 <siprintf>
		lcdPrint(2,1,screen2);
 80007c2:	4bc9      	ldr	r3, [pc, #804]	; (8000ae8 <checkButtons+0x3b0>)
 80007c4:	001a      	movs	r2, r3
 80007c6:	2101      	movs	r1, #1
 80007c8:	2002      	movs	r0, #2
 80007ca:	f7ff ff44 	bl	8000656 <lcdPrint>

		HAL_Delay(100);
 80007ce:	2064      	movs	r0, #100	; 0x64
 80007d0:	f001 f99a 	bl	8001b08 <HAL_Delay>
	}

	if(!HAL_GPIO_ReadPin(GPIOA, BTN_2_Pin))
 80007d4:	2380      	movs	r3, #128	; 0x80
 80007d6:	01da      	lsls	r2, r3, #7
 80007d8:	2390      	movs	r3, #144	; 0x90
 80007da:	05db      	lsls	r3, r3, #23
 80007dc:	0011      	movs	r1, r2
 80007de:	0018      	movs	r0, r3
 80007e0:	f001 fbda 	bl	8001f98 <HAL_GPIO_ReadPin>
 80007e4:	1e03      	subs	r3, r0, #0
 80007e6:	d140      	bne.n	800086a <checkButtons+0x132>
	{
		if(digit2 != 9) {
 80007e8:	4bbb      	ldr	r3, [pc, #748]	; (8000ad8 <checkButtons+0x3a0>)
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	2b09      	cmp	r3, #9
 80007ee:	d006      	beq.n	80007fe <checkButtons+0xc6>
			digit2++;
 80007f0:	4bb9      	ldr	r3, [pc, #740]	; (8000ad8 <checkButtons+0x3a0>)
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	3301      	adds	r3, #1
 80007f6:	b2da      	uxtb	r2, r3
 80007f8:	4bb7      	ldr	r3, [pc, #732]	; (8000ad8 <checkButtons+0x3a0>)
 80007fa:	701a      	strb	r2, [r3, #0]
 80007fc:	e002      	b.n	8000804 <checkButtons+0xcc>
		}
		else {
			digit2 = 0;
 80007fe:	4bb6      	ldr	r3, [pc, #728]	; (8000ad8 <checkButtons+0x3a0>)
 8000800:	2200      	movs	r2, #0
 8000802:	701a      	strb	r2, [r3, #0]
		}

		credit = digit3 * 1000 + digit2 * 100 + digit1 * 10;
 8000804:	4bb3      	ldr	r3, [pc, #716]	; (8000ad4 <checkButtons+0x39c>)
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	001a      	movs	r2, r3
 800080a:	0013      	movs	r3, r2
 800080c:	015b      	lsls	r3, r3, #5
 800080e:	1a9b      	subs	r3, r3, r2
 8000810:	009b      	lsls	r3, r3, #2
 8000812:	189b      	adds	r3, r3, r2
 8000814:	00db      	lsls	r3, r3, #3
 8000816:	001a      	movs	r2, r3
 8000818:	4baf      	ldr	r3, [pc, #700]	; (8000ad8 <checkButtons+0x3a0>)
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	0019      	movs	r1, r3
 800081e:	2364      	movs	r3, #100	; 0x64
 8000820:	434b      	muls	r3, r1
 8000822:	18d2      	adds	r2, r2, r3
 8000824:	4baa      	ldr	r3, [pc, #680]	; (8000ad0 <checkButtons+0x398>)
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	0019      	movs	r1, r3
 800082a:	000b      	movs	r3, r1
 800082c:	009b      	lsls	r3, r3, #2
 800082e:	185b      	adds	r3, r3, r1
 8000830:	005b      	lsls	r3, r3, #1
 8000832:	18d3      	adds	r3, r2, r3
 8000834:	001a      	movs	r2, r3
 8000836:	4ba9      	ldr	r3, [pc, #676]	; (8000adc <checkButtons+0x3a4>)
 8000838:	601a      	str	r2, [r3, #0]

		lcdClear();
 800083a:	f7ff ff26 	bl	800068a <lcdClear>
		lcdPrint(1,1,"KREDi YUKLE");
 800083e:	4ba8      	ldr	r3, [pc, #672]	; (8000ae0 <checkButtons+0x3a8>)
 8000840:	001a      	movs	r2, r3
 8000842:	2101      	movs	r1, #1
 8000844:	2001      	movs	r0, #1
 8000846:	f7ff ff06 	bl	8000656 <lcdPrint>
		sprintf(screen2,"KREDi : %d ",credit);
 800084a:	4ba4      	ldr	r3, [pc, #656]	; (8000adc <checkButtons+0x3a4>)
 800084c:	681a      	ldr	r2, [r3, #0]
 800084e:	49a5      	ldr	r1, [pc, #660]	; (8000ae4 <checkButtons+0x3ac>)
 8000850:	4ba5      	ldr	r3, [pc, #660]	; (8000ae8 <checkButtons+0x3b0>)
 8000852:	0018      	movs	r0, r3
 8000854:	f002 ff6c 	bl	8003730 <siprintf>
		lcdPrint(2,1,screen2);
 8000858:	4ba3      	ldr	r3, [pc, #652]	; (8000ae8 <checkButtons+0x3b0>)
 800085a:	001a      	movs	r2, r3
 800085c:	2101      	movs	r1, #1
 800085e:	2002      	movs	r0, #2
 8000860:	f7ff fef9 	bl	8000656 <lcdPrint>

		HAL_Delay(100);
 8000864:	2064      	movs	r0, #100	; 0x64
 8000866:	f001 f94f 	bl	8001b08 <HAL_Delay>
	}

	if(!HAL_GPIO_ReadPin(GPIOA, BTN_3_Pin))
 800086a:	2380      	movs	r3, #128	; 0x80
 800086c:	019a      	lsls	r2, r3, #6
 800086e:	2390      	movs	r3, #144	; 0x90
 8000870:	05db      	lsls	r3, r3, #23
 8000872:	0011      	movs	r1, r2
 8000874:	0018      	movs	r0, r3
 8000876:	f001 fb8f 	bl	8001f98 <HAL_GPIO_ReadPin>
 800087a:	1e03      	subs	r3, r0, #0
 800087c:	d140      	bne.n	8000900 <checkButtons+0x1c8>
	{
		if(digit3 != 9) {
 800087e:	4b95      	ldr	r3, [pc, #596]	; (8000ad4 <checkButtons+0x39c>)
 8000880:	781b      	ldrb	r3, [r3, #0]
 8000882:	2b09      	cmp	r3, #9
 8000884:	d006      	beq.n	8000894 <checkButtons+0x15c>
			digit3++;
 8000886:	4b93      	ldr	r3, [pc, #588]	; (8000ad4 <checkButtons+0x39c>)
 8000888:	781b      	ldrb	r3, [r3, #0]
 800088a:	3301      	adds	r3, #1
 800088c:	b2da      	uxtb	r2, r3
 800088e:	4b91      	ldr	r3, [pc, #580]	; (8000ad4 <checkButtons+0x39c>)
 8000890:	701a      	strb	r2, [r3, #0]
 8000892:	e002      	b.n	800089a <checkButtons+0x162>
		}
		else {
			digit3 = 0;
 8000894:	4b8f      	ldr	r3, [pc, #572]	; (8000ad4 <checkButtons+0x39c>)
 8000896:	2200      	movs	r2, #0
 8000898:	701a      	strb	r2, [r3, #0]
		}

		credit = digit3 * 1000 + digit2 * 100 + digit1 * 10;
 800089a:	4b8e      	ldr	r3, [pc, #568]	; (8000ad4 <checkButtons+0x39c>)
 800089c:	781b      	ldrb	r3, [r3, #0]
 800089e:	001a      	movs	r2, r3
 80008a0:	0013      	movs	r3, r2
 80008a2:	015b      	lsls	r3, r3, #5
 80008a4:	1a9b      	subs	r3, r3, r2
 80008a6:	009b      	lsls	r3, r3, #2
 80008a8:	189b      	adds	r3, r3, r2
 80008aa:	00db      	lsls	r3, r3, #3
 80008ac:	001a      	movs	r2, r3
 80008ae:	4b8a      	ldr	r3, [pc, #552]	; (8000ad8 <checkButtons+0x3a0>)
 80008b0:	781b      	ldrb	r3, [r3, #0]
 80008b2:	0019      	movs	r1, r3
 80008b4:	2364      	movs	r3, #100	; 0x64
 80008b6:	434b      	muls	r3, r1
 80008b8:	18d2      	adds	r2, r2, r3
 80008ba:	4b85      	ldr	r3, [pc, #532]	; (8000ad0 <checkButtons+0x398>)
 80008bc:	781b      	ldrb	r3, [r3, #0]
 80008be:	0019      	movs	r1, r3
 80008c0:	000b      	movs	r3, r1
 80008c2:	009b      	lsls	r3, r3, #2
 80008c4:	185b      	adds	r3, r3, r1
 80008c6:	005b      	lsls	r3, r3, #1
 80008c8:	18d3      	adds	r3, r2, r3
 80008ca:	001a      	movs	r2, r3
 80008cc:	4b83      	ldr	r3, [pc, #524]	; (8000adc <checkButtons+0x3a4>)
 80008ce:	601a      	str	r2, [r3, #0]

		lcdClear();
 80008d0:	f7ff fedb 	bl	800068a <lcdClear>
		lcdPrint(1,1,"KREDi YUKLE");
 80008d4:	4b82      	ldr	r3, [pc, #520]	; (8000ae0 <checkButtons+0x3a8>)
 80008d6:	001a      	movs	r2, r3
 80008d8:	2101      	movs	r1, #1
 80008da:	2001      	movs	r0, #1
 80008dc:	f7ff febb 	bl	8000656 <lcdPrint>
		sprintf(screen2,"KREDi : %d ",credit);
 80008e0:	4b7e      	ldr	r3, [pc, #504]	; (8000adc <checkButtons+0x3a4>)
 80008e2:	681a      	ldr	r2, [r3, #0]
 80008e4:	497f      	ldr	r1, [pc, #508]	; (8000ae4 <checkButtons+0x3ac>)
 80008e6:	4b80      	ldr	r3, [pc, #512]	; (8000ae8 <checkButtons+0x3b0>)
 80008e8:	0018      	movs	r0, r3
 80008ea:	f002 ff21 	bl	8003730 <siprintf>
		lcdPrint(2,1,screen2);
 80008ee:	4b7e      	ldr	r3, [pc, #504]	; (8000ae8 <checkButtons+0x3b0>)
 80008f0:	001a      	movs	r2, r3
 80008f2:	2101      	movs	r1, #1
 80008f4:	2002      	movs	r0, #2
 80008f6:	f7ff feae 	bl	8000656 <lcdPrint>

		HAL_Delay(100);
 80008fa:	2064      	movs	r0, #100	; 0x64
 80008fc:	f001 f904 	bl	8001b08 <HAL_Delay>
	}

	if(!HAL_GPIO_ReadPin(GPIOA, BTN_4_Pin))
 8000900:	2380      	movs	r3, #128	; 0x80
 8000902:	015a      	lsls	r2, r3, #5
 8000904:	2390      	movs	r3, #144	; 0x90
 8000906:	05db      	lsls	r3, r3, #23
 8000908:	0011      	movs	r1, r2
 800090a:	0018      	movs	r0, r3
 800090c:	f001 fb44 	bl	8001f98 <HAL_GPIO_ReadPin>
 8000910:	1e03      	subs	r3, r0, #0
 8000912:	d000      	beq.n	8000916 <checkButtons+0x1de>
 8000914:	e0d7      	b.n	8000ac6 <checkButtons+0x38e>
	{
		status = MFRC522_Request(PICC_REQIDL, cardStr);
 8000916:	4b75      	ldr	r3, [pc, #468]	; (8000aec <checkButtons+0x3b4>)
 8000918:	0019      	movs	r1, r3
 800091a:	2026      	movs	r0, #38	; 0x26
 800091c:	f000 fc2c 	bl	8001178 <MFRC522_Request>
 8000920:	0003      	movs	r3, r0
 8000922:	001a      	movs	r2, r3
 8000924:	4b72      	ldr	r3, [pc, #456]	; (8000af0 <checkButtons+0x3b8>)
 8000926:	701a      	strb	r2, [r3, #0]
		status = MFRC522_Anticoll(cardStr);
 8000928:	4b70      	ldr	r3, [pc, #448]	; (8000aec <checkButtons+0x3b4>)
 800092a:	0018      	movs	r0, r3
 800092c:	f000 fd5c 	bl	80013e8 <MFRC522_Anticoll>
 8000930:	0003      	movs	r3, r0
 8000932:	001a      	movs	r2, r3
 8000934:	4b6e      	ldr	r3, [pc, #440]	; (8000af0 <checkButtons+0x3b8>)
 8000936:	701a      	strb	r2, [r3, #0]
		memcpy(serNum,cardStr,5);
 8000938:	4b6e      	ldr	r3, [pc, #440]	; (8000af4 <checkButtons+0x3bc>)
 800093a:	4a6c      	ldr	r2, [pc, #432]	; (8000aec <checkButtons+0x3b4>)
 800093c:	6811      	ldr	r1, [r2, #0]
 800093e:	6019      	str	r1, [r3, #0]
 8000940:	7912      	ldrb	r2, [r2, #4]
 8000942:	711a      	strb	r2, [r3, #4]


		if(status == MI_OK)
 8000944:	4b6a      	ldr	r3, [pc, #424]	; (8000af0 <checkButtons+0x3b8>)
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	2b00      	cmp	r3, #0
 800094a:	d000      	beq.n	800094e <checkButtons+0x216>
 800094c:	e094      	b.n	8000a78 <checkButtons+0x340>
		{
			MFRC522_SelectTag(cardStr);
 800094e:	4b67      	ldr	r3, [pc, #412]	; (8000aec <checkButtons+0x3b4>)
 8000950:	0018      	movs	r0, r3
 8000952:	f000 ff10 	bl	8001776 <MFRC522_SelectTag>
			uint8_t result = MFRC522_Auth(PICC_AUTHENT1A,2,key,serNum);
 8000956:	1dfc      	adds	r4, r7, #7
 8000958:	4b66      	ldr	r3, [pc, #408]	; (8000af4 <checkButtons+0x3bc>)
 800095a:	4a67      	ldr	r2, [pc, #412]	; (8000af8 <checkButtons+0x3c0>)
 800095c:	2102      	movs	r1, #2
 800095e:	2060      	movs	r0, #96	; 0x60
 8000960:	f000 fe98 	bl	8001694 <MFRC522_Auth>
 8000964:	0003      	movs	r3, r0
 8000966:	7023      	strb	r3, [r4, #0]

			status = MFRC522_Read(2,cardBlock);
 8000968:	4b64      	ldr	r3, [pc, #400]	; (8000afc <checkButtons+0x3c4>)
 800096a:	0019      	movs	r1, r3
 800096c:	2002      	movs	r0, #2
 800096e:	f000 fd90 	bl	8001492 <MFRC522_Read>
 8000972:	0003      	movs	r3, r0
 8000974:	001a      	movs	r2, r3
 8000976:	4b5e      	ldr	r3, [pc, #376]	; (8000af0 <checkButtons+0x3b8>)
 8000978:	701a      	strb	r2, [r3, #0]

			if(status == MI_OK)
 800097a:	4b5d      	ldr	r3, [pc, #372]	; (8000af0 <checkButtons+0x3b8>)
 800097c:	781b      	ldrb	r3, [r3, #0]
 800097e:	2b00      	cmp	r3, #0
 8000980:	d000      	beq.n	8000984 <checkButtons+0x24c>
 8000982:	e0a0      	b.n	8000ac6 <checkButtons+0x38e>
			{
				cardBlock[0] = (credit & 0xFF);
 8000984:	4b55      	ldr	r3, [pc, #340]	; (8000adc <checkButtons+0x3a4>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	b2da      	uxtb	r2, r3
 800098a:	4b5c      	ldr	r3, [pc, #368]	; (8000afc <checkButtons+0x3c4>)
 800098c:	701a      	strb	r2, [r3, #0]
				cardBlock[1] = ((credit >> 8) & 0xFF);
 800098e:	4b53      	ldr	r3, [pc, #332]	; (8000adc <checkButtons+0x3a4>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	0a1b      	lsrs	r3, r3, #8
 8000994:	b2da      	uxtb	r2, r3
 8000996:	4b59      	ldr	r3, [pc, #356]	; (8000afc <checkButtons+0x3c4>)
 8000998:	705a      	strb	r2, [r3, #1]
				cardBlock[2] = ((credit >> 16) & 0xFF);
 800099a:	4b50      	ldr	r3, [pc, #320]	; (8000adc <checkButtons+0x3a4>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	0c1b      	lsrs	r3, r3, #16
 80009a0:	b2da      	uxtb	r2, r3
 80009a2:	4b56      	ldr	r3, [pc, #344]	; (8000afc <checkButtons+0x3c4>)
 80009a4:	709a      	strb	r2, [r3, #2]
				cardBlock[3] = ((credit >> 24) & 0xFF);
 80009a6:	4b4d      	ldr	r3, [pc, #308]	; (8000adc <checkButtons+0x3a4>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	0e1b      	lsrs	r3, r3, #24
 80009ac:	b2da      	uxtb	r2, r3
 80009ae:	4b53      	ldr	r3, [pc, #332]	; (8000afc <checkButtons+0x3c4>)
 80009b0:	70da      	strb	r2, [r3, #3]

				status = MFRC522_Write(2, cardBlock);
 80009b2:	4b52      	ldr	r3, [pc, #328]	; (8000afc <checkButtons+0x3c4>)
 80009b4:	0019      	movs	r1, r3
 80009b6:	2002      	movs	r0, #2
 80009b8:	f000 fda1 	bl	80014fe <MFRC522_Write>
 80009bc:	0003      	movs	r3, r0
 80009be:	001a      	movs	r2, r3
 80009c0:	4b4b      	ldr	r3, [pc, #300]	; (8000af0 <checkButtons+0x3b8>)
 80009c2:	701a      	strb	r2, [r3, #0]

				if(status == MI_OK)
 80009c4:	4b4a      	ldr	r3, [pc, #296]	; (8000af0 <checkButtons+0x3b8>)
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d12d      	bne.n	8000a28 <checkButtons+0x2f0>
				{
					multiBip(2);
 80009cc:	2002      	movs	r0, #2
 80009ce:	f7ff fe7f 	bl	80006d0 <multiBip>

					lcdClear();
 80009d2:	f7ff fe5a 	bl	800068a <lcdClear>
					lcdPrint(1,1,"YUKLEME");
 80009d6:	4b4a      	ldr	r3, [pc, #296]	; (8000b00 <checkButtons+0x3c8>)
 80009d8:	001a      	movs	r2, r3
 80009da:	2101      	movs	r1, #1
 80009dc:	2001      	movs	r0, #1
 80009de:	f7ff fe3a 	bl	8000656 <lcdPrint>
					lcdPrint(2,1,"TAMAMLANDI");
 80009e2:	4b48      	ldr	r3, [pc, #288]	; (8000b04 <checkButtons+0x3cc>)
 80009e4:	001a      	movs	r2, r3
 80009e6:	2101      	movs	r1, #1
 80009e8:	2002      	movs	r0, #2
 80009ea:	f7ff fe34 	bl	8000656 <lcdPrint>

					HAL_Delay(2000);
 80009ee:	23fa      	movs	r3, #250	; 0xfa
 80009f0:	00db      	lsls	r3, r3, #3
 80009f2:	0018      	movs	r0, r3
 80009f4:	f001 f888 	bl	8001b08 <HAL_Delay>

					lcdClear();
 80009f8:	f7ff fe47 	bl	800068a <lcdClear>
					lcdPrint(1,1,"LUTFEN");
 80009fc:	4b42      	ldr	r3, [pc, #264]	; (8000b08 <checkButtons+0x3d0>)
 80009fe:	001a      	movs	r2, r3
 8000a00:	2101      	movs	r1, #1
 8000a02:	2001      	movs	r0, #1
 8000a04:	f7ff fe27 	bl	8000656 <lcdPrint>
					lcdPrint(2,1,"KART OKUTUN");
 8000a08:	4b40      	ldr	r3, [pc, #256]	; (8000b0c <checkButtons+0x3d4>)
 8000a0a:	001a      	movs	r2, r3
 8000a0c:	2101      	movs	r1, #1
 8000a0e:	2002      	movs	r0, #2
 8000a10:	f7ff fe21 	bl	8000656 <lcdPrint>

					cardState = false;
 8000a14:	4b3e      	ldr	r3, [pc, #248]	; (8000b10 <checkButtons+0x3d8>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	701a      	strb	r2, [r3, #0]

					MFRC522_Halt();
 8000a1a:	f000 ff00 	bl	800181e <MFRC522_Halt>
					MFRC522_Reset();
 8000a1e:	f000 fb81 	bl	8001124 <MFRC522_Reset>
					MFRC522_Init();
 8000a22:	f000 fb88 	bl	8001136 <MFRC522_Init>
			MFRC522_Halt();
			MFRC522_Reset();
			MFRC522_Init();
		}
	}
}
 8000a26:	e04e      	b.n	8000ac6 <checkButtons+0x38e>
					multiBip(3);
 8000a28:	2003      	movs	r0, #3
 8000a2a:	f7ff fe51 	bl	80006d0 <multiBip>
					lcdClear();
 8000a2e:	f7ff fe2c 	bl	800068a <lcdClear>
					lcdPrint(1,1,"HATA OLUSTU");
 8000a32:	4b38      	ldr	r3, [pc, #224]	; (8000b14 <checkButtons+0x3dc>)
 8000a34:	001a      	movs	r2, r3
 8000a36:	2101      	movs	r1, #1
 8000a38:	2001      	movs	r0, #1
 8000a3a:	f7ff fe0c 	bl	8000656 <lcdPrint>
					HAL_Delay(2000);
 8000a3e:	23fa      	movs	r3, #250	; 0xfa
 8000a40:	00db      	lsls	r3, r3, #3
 8000a42:	0018      	movs	r0, r3
 8000a44:	f001 f860 	bl	8001b08 <HAL_Delay>
					lcdClear();
 8000a48:	f7ff fe1f 	bl	800068a <lcdClear>
					lcdPrint(1,1,"LUTFEN");
 8000a4c:	4b2e      	ldr	r3, [pc, #184]	; (8000b08 <checkButtons+0x3d0>)
 8000a4e:	001a      	movs	r2, r3
 8000a50:	2101      	movs	r1, #1
 8000a52:	2001      	movs	r0, #1
 8000a54:	f7ff fdff 	bl	8000656 <lcdPrint>
					lcdPrint(2,1,"KART OKUTUN");
 8000a58:	4b2c      	ldr	r3, [pc, #176]	; (8000b0c <checkButtons+0x3d4>)
 8000a5a:	001a      	movs	r2, r3
 8000a5c:	2101      	movs	r1, #1
 8000a5e:	2002      	movs	r0, #2
 8000a60:	f7ff fdf9 	bl	8000656 <lcdPrint>
					cardState = false;
 8000a64:	4b2a      	ldr	r3, [pc, #168]	; (8000b10 <checkButtons+0x3d8>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	701a      	strb	r2, [r3, #0]
					MFRC522_Halt();
 8000a6a:	f000 fed8 	bl	800181e <MFRC522_Halt>
					MFRC522_Reset();
 8000a6e:	f000 fb59 	bl	8001124 <MFRC522_Reset>
					MFRC522_Init();
 8000a72:	f000 fb60 	bl	8001136 <MFRC522_Init>
}
 8000a76:	e026      	b.n	8000ac6 <checkButtons+0x38e>
			multiBip(3);
 8000a78:	2003      	movs	r0, #3
 8000a7a:	f7ff fe29 	bl	80006d0 <multiBip>
			lcdClear();
 8000a7e:	f7ff fe04 	bl	800068a <lcdClear>
			lcdPrint(1,1,"HATA OLUSTU");
 8000a82:	4b24      	ldr	r3, [pc, #144]	; (8000b14 <checkButtons+0x3dc>)
 8000a84:	001a      	movs	r2, r3
 8000a86:	2101      	movs	r1, #1
 8000a88:	2001      	movs	r0, #1
 8000a8a:	f7ff fde4 	bl	8000656 <lcdPrint>
			HAL_Delay(2000);
 8000a8e:	23fa      	movs	r3, #250	; 0xfa
 8000a90:	00db      	lsls	r3, r3, #3
 8000a92:	0018      	movs	r0, r3
 8000a94:	f001 f838 	bl	8001b08 <HAL_Delay>
			lcdClear();
 8000a98:	f7ff fdf7 	bl	800068a <lcdClear>
			lcdPrint(1,1,"LUTFEN");
 8000a9c:	4b1a      	ldr	r3, [pc, #104]	; (8000b08 <checkButtons+0x3d0>)
 8000a9e:	001a      	movs	r2, r3
 8000aa0:	2101      	movs	r1, #1
 8000aa2:	2001      	movs	r0, #1
 8000aa4:	f7ff fdd7 	bl	8000656 <lcdPrint>
			lcdPrint(2,1,"KART OKUTUN");
 8000aa8:	4b18      	ldr	r3, [pc, #96]	; (8000b0c <checkButtons+0x3d4>)
 8000aaa:	001a      	movs	r2, r3
 8000aac:	2101      	movs	r1, #1
 8000aae:	2002      	movs	r0, #2
 8000ab0:	f7ff fdd1 	bl	8000656 <lcdPrint>
			cardState = false;
 8000ab4:	4b16      	ldr	r3, [pc, #88]	; (8000b10 <checkButtons+0x3d8>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	701a      	strb	r2, [r3, #0]
			MFRC522_Halt();
 8000aba:	f000 feb0 	bl	800181e <MFRC522_Halt>
			MFRC522_Reset();
 8000abe:	f000 fb31 	bl	8001124 <MFRC522_Reset>
			MFRC522_Init();
 8000ac2:	f000 fb38 	bl	8001136 <MFRC522_Init>
}
 8000ac6:	46c0      	nop			; (mov r8, r8)
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	b003      	add	sp, #12
 8000acc:	bd90      	pop	{r4, r7, pc}
 8000ace:	46c0      	nop			; (mov r8, r8)
 8000ad0:	20000134 	.word	0x20000134
 8000ad4:	20000136 	.word	0x20000136
 8000ad8:	20000135 	.word	0x20000135
 8000adc:	20000138 	.word	0x20000138
 8000ae0:	0800401c 	.word	0x0800401c
 8000ae4:	08004028 	.word	0x08004028
 8000ae8:	200000f8 	.word	0x200000f8
 8000aec:	2000010c 	.word	0x2000010c
 8000af0:	20000108 	.word	0x20000108
 8000af4:	2000011c 	.word	0x2000011c
 8000af8:	20000000 	.word	0x20000000
 8000afc:	20000124 	.word	0x20000124
 8000b00:	08004034 	.word	0x08004034
 8000b04:	0800403c 	.word	0x0800403c
 8000b08:	08004048 	.word	0x08004048
 8000b0c:	08004050 	.word	0x08004050
 8000b10:	2000013c 	.word	0x2000013c
 8000b14:	0800405c 	.word	0x0800405c

08000b18 <checkCard>:

void checkCard()
{
 8000b18:	b590      	push	{r4, r7, lr}
 8000b1a:	b087      	sub	sp, #28
 8000b1c:	af00      	add	r7, sp, #0
	if(!cardState)
 8000b1e:	4b6e      	ldr	r3, [pc, #440]	; (8000cd8 <checkCard+0x1c0>)
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	2201      	movs	r2, #1
 8000b24:	4053      	eors	r3, r2
 8000b26:	b2db      	uxtb	r3, r3
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d100      	bne.n	8000b2e <checkCard+0x16>
 8000b2c:	e0cf      	b.n	8000cce <checkCard+0x1b6>
	{
		status = MFRC522_Request(PICC_REQIDL, cardStr);
 8000b2e:	4b6b      	ldr	r3, [pc, #428]	; (8000cdc <checkCard+0x1c4>)
 8000b30:	0019      	movs	r1, r3
 8000b32:	2026      	movs	r0, #38	; 0x26
 8000b34:	f000 fb20 	bl	8001178 <MFRC522_Request>
 8000b38:	0003      	movs	r3, r0
 8000b3a:	001a      	movs	r2, r3
 8000b3c:	4b68      	ldr	r3, [pc, #416]	; (8000ce0 <checkCard+0x1c8>)
 8000b3e:	701a      	strb	r2, [r3, #0]
		status = MFRC522_Anticoll(cardStr);
 8000b40:	4b66      	ldr	r3, [pc, #408]	; (8000cdc <checkCard+0x1c4>)
 8000b42:	0018      	movs	r0, r3
 8000b44:	f000 fc50 	bl	80013e8 <MFRC522_Anticoll>
 8000b48:	0003      	movs	r3, r0
 8000b4a:	001a      	movs	r2, r3
 8000b4c:	4b64      	ldr	r3, [pc, #400]	; (8000ce0 <checkCard+0x1c8>)
 8000b4e:	701a      	strb	r2, [r3, #0]
		memcpy(serNum,cardStr,5);
 8000b50:	4b64      	ldr	r3, [pc, #400]	; (8000ce4 <checkCard+0x1cc>)
 8000b52:	4a62      	ldr	r2, [pc, #392]	; (8000cdc <checkCard+0x1c4>)
 8000b54:	6811      	ldr	r1, [r2, #0]
 8000b56:	6019      	str	r1, [r3, #0]
 8000b58:	7912      	ldrb	r2, [r2, #4]
 8000b5a:	711a      	strb	r2, [r3, #4]


		if(status == MI_OK)
 8000b5c:	4b60      	ldr	r3, [pc, #384]	; (8000ce0 <checkCard+0x1c8>)
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d000      	beq.n	8000b66 <checkCard+0x4e>
 8000b64:	e0b3      	b.n	8000cce <checkCard+0x1b6>
		{
			MFRC522_SelectTag(cardStr);
 8000b66:	4b5d      	ldr	r3, [pc, #372]	; (8000cdc <checkCard+0x1c4>)
 8000b68:	0018      	movs	r0, r3
 8000b6a:	f000 fe04 	bl	8001776 <MFRC522_SelectTag>
			uint8_t result = MFRC522_Auth(PICC_AUTHENT1A,2,key,serNum);
 8000b6e:	2317      	movs	r3, #23
 8000b70:	18fc      	adds	r4, r7, r3
 8000b72:	4b5c      	ldr	r3, [pc, #368]	; (8000ce4 <checkCard+0x1cc>)
 8000b74:	4a5c      	ldr	r2, [pc, #368]	; (8000ce8 <checkCard+0x1d0>)
 8000b76:	2102      	movs	r1, #2
 8000b78:	2060      	movs	r0, #96	; 0x60
 8000b7a:	f000 fd8b 	bl	8001694 <MFRC522_Auth>
 8000b7e:	0003      	movs	r3, r0
 8000b80:	7023      	strb	r3, [r4, #0]

			status = MFRC522_Read(2,cardBlock);
 8000b82:	4b5a      	ldr	r3, [pc, #360]	; (8000cec <checkCard+0x1d4>)
 8000b84:	0019      	movs	r1, r3
 8000b86:	2002      	movs	r0, #2
 8000b88:	f000 fc83 	bl	8001492 <MFRC522_Read>
 8000b8c:	0003      	movs	r3, r0
 8000b8e:	001a      	movs	r2, r3
 8000b90:	4b53      	ldr	r3, [pc, #332]	; (8000ce0 <checkCard+0x1c8>)
 8000b92:	701a      	strb	r2, [r3, #0]

			if(status == MI_OK)
 8000b94:	4b52      	ldr	r3, [pc, #328]	; (8000ce0 <checkCard+0x1c8>)
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d171      	bne.n	8000c80 <checkCard+0x168>
			{
				singleBip();
 8000b9c:	f7ff fd80 	bl	80006a0 <singleBip>

				int credit1 = cardBlock[3];
 8000ba0:	4b52      	ldr	r3, [pc, #328]	; (8000cec <checkCard+0x1d4>)
 8000ba2:	78db      	ldrb	r3, [r3, #3]
 8000ba4:	613b      	str	r3, [r7, #16]
				int credit2 = cardBlock[2];
 8000ba6:	4b51      	ldr	r3, [pc, #324]	; (8000cec <checkCard+0x1d4>)
 8000ba8:	789b      	ldrb	r3, [r3, #2]
 8000baa:	60fb      	str	r3, [r7, #12]
				int credit3 = cardBlock[1];
 8000bac:	4b4f      	ldr	r3, [pc, #316]	; (8000cec <checkCard+0x1d4>)
 8000bae:	785b      	ldrb	r3, [r3, #1]
 8000bb0:	60bb      	str	r3, [r7, #8]
				int credit4 = cardBlock[0];
 8000bb2:	4b4e      	ldr	r3, [pc, #312]	; (8000cec <checkCard+0x1d4>)
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	607b      	str	r3, [r7, #4]

				credit = ((credit4 << 0) & 0xFF) + ((credit3 << 8) & 0xFFFF) + ((credit2 << 16) & 0xFFFFFF) + ((credit1 << 24) & 0xFFFFFFFF);
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	22ff      	movs	r2, #255	; 0xff
 8000bbc:	401a      	ands	r2, r3
 8000bbe:	68bb      	ldr	r3, [r7, #8]
 8000bc0:	021b      	lsls	r3, r3, #8
 8000bc2:	041b      	lsls	r3, r3, #16
 8000bc4:	0c1b      	lsrs	r3, r3, #16
 8000bc6:	18d2      	adds	r2, r2, r3
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	041b      	lsls	r3, r3, #16
 8000bcc:	021b      	lsls	r3, r3, #8
 8000bce:	0a1b      	lsrs	r3, r3, #8
 8000bd0:	18d3      	adds	r3, r2, r3
 8000bd2:	001a      	movs	r2, r3
 8000bd4:	693b      	ldr	r3, [r7, #16]
 8000bd6:	061b      	lsls	r3, r3, #24
 8000bd8:	18d2      	adds	r2, r2, r3
 8000bda:	4b45      	ldr	r3, [pc, #276]	; (8000cf0 <checkCard+0x1d8>)
 8000bdc:	601a      	str	r2, [r3, #0]

				if(credit > 9999)
 8000bde:	4b44      	ldr	r3, [pc, #272]	; (8000cf0 <checkCard+0x1d8>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	4a44      	ldr	r2, [pc, #272]	; (8000cf4 <checkCard+0x1dc>)
 8000be4:	4293      	cmp	r3, r2
 8000be6:	d902      	bls.n	8000bee <checkCard+0xd6>
				{
					credit = 9999;
 8000be8:	4b41      	ldr	r3, [pc, #260]	; (8000cf0 <checkCard+0x1d8>)
 8000bea:	4a42      	ldr	r2, [pc, #264]	; (8000cf4 <checkCard+0x1dc>)
 8000bec:	601a      	str	r2, [r3, #0]
				}

				digit3 = credit / 1000;
 8000bee:	4b40      	ldr	r3, [pc, #256]	; (8000cf0 <checkCard+0x1d8>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	22fa      	movs	r2, #250	; 0xfa
 8000bf4:	0091      	lsls	r1, r2, #2
 8000bf6:	0018      	movs	r0, r3
 8000bf8:	f7ff fa90 	bl	800011c <__udivsi3>
 8000bfc:	0003      	movs	r3, r0
 8000bfe:	b2da      	uxtb	r2, r3
 8000c00:	4b3d      	ldr	r3, [pc, #244]	; (8000cf8 <checkCard+0x1e0>)
 8000c02:	701a      	strb	r2, [r3, #0]
				digit2 = (credit % 1000) / 100;
 8000c04:	4b3a      	ldr	r3, [pc, #232]	; (8000cf0 <checkCard+0x1d8>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	22fa      	movs	r2, #250	; 0xfa
 8000c0a:	0091      	lsls	r1, r2, #2
 8000c0c:	0018      	movs	r0, r3
 8000c0e:	f7ff fb0b 	bl	8000228 <__aeabi_uidivmod>
 8000c12:	000b      	movs	r3, r1
 8000c14:	2164      	movs	r1, #100	; 0x64
 8000c16:	0018      	movs	r0, r3
 8000c18:	f7ff fa80 	bl	800011c <__udivsi3>
 8000c1c:	0003      	movs	r3, r0
 8000c1e:	b2da      	uxtb	r2, r3
 8000c20:	4b36      	ldr	r3, [pc, #216]	; (8000cfc <checkCard+0x1e4>)
 8000c22:	701a      	strb	r2, [r3, #0]
				digit1 = (credit % 100) / 10;
 8000c24:	4b32      	ldr	r3, [pc, #200]	; (8000cf0 <checkCard+0x1d8>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	2164      	movs	r1, #100	; 0x64
 8000c2a:	0018      	movs	r0, r3
 8000c2c:	f7ff fafc 	bl	8000228 <__aeabi_uidivmod>
 8000c30:	000b      	movs	r3, r1
 8000c32:	210a      	movs	r1, #10
 8000c34:	0018      	movs	r0, r3
 8000c36:	f7ff fa71 	bl	800011c <__udivsi3>
 8000c3a:	0003      	movs	r3, r0
 8000c3c:	b2da      	uxtb	r2, r3
 8000c3e:	4b30      	ldr	r3, [pc, #192]	; (8000d00 <checkCard+0x1e8>)
 8000c40:	701a      	strb	r2, [r3, #0]

				lcdClear();
 8000c42:	f7ff fd22 	bl	800068a <lcdClear>
				lcdPrint(1,1,"KREDi YUKLE");
 8000c46:	4b2f      	ldr	r3, [pc, #188]	; (8000d04 <checkCard+0x1ec>)
 8000c48:	001a      	movs	r2, r3
 8000c4a:	2101      	movs	r1, #1
 8000c4c:	2001      	movs	r0, #1
 8000c4e:	f7ff fd02 	bl	8000656 <lcdPrint>
				sprintf(screen2,"KREDi : %d",credit);
 8000c52:	4b27      	ldr	r3, [pc, #156]	; (8000cf0 <checkCard+0x1d8>)
 8000c54:	681a      	ldr	r2, [r3, #0]
 8000c56:	492c      	ldr	r1, [pc, #176]	; (8000d08 <checkCard+0x1f0>)
 8000c58:	4b2c      	ldr	r3, [pc, #176]	; (8000d0c <checkCard+0x1f4>)
 8000c5a:	0018      	movs	r0, r3
 8000c5c:	f002 fd68 	bl	8003730 <siprintf>
				lcdPrint(2,1,screen2);
 8000c60:	4b2a      	ldr	r3, [pc, #168]	; (8000d0c <checkCard+0x1f4>)
 8000c62:	001a      	movs	r2, r3
 8000c64:	2101      	movs	r1, #1
 8000c66:	2002      	movs	r0, #2
 8000c68:	f7ff fcf5 	bl	8000656 <lcdPrint>

				cardState = true;
 8000c6c:	4b1a      	ldr	r3, [pc, #104]	; (8000cd8 <checkCard+0x1c0>)
 8000c6e:	2201      	movs	r2, #1
 8000c70:	701a      	strb	r2, [r3, #0]

				MFRC522_Halt();
 8000c72:	f000 fdd4 	bl	800181e <MFRC522_Halt>
				MFRC522_Reset();
 8000c76:	f000 fa55 	bl	8001124 <MFRC522_Reset>
				MFRC522_Init();
 8000c7a:	f000 fa5c 	bl	8001136 <MFRC522_Init>
				MFRC522_Reset();
				MFRC522_Init();
			}
		}
	}
}
 8000c7e:	e026      	b.n	8000cce <checkCard+0x1b6>
				multiBip(3);
 8000c80:	2003      	movs	r0, #3
 8000c82:	f7ff fd25 	bl	80006d0 <multiBip>
				lcdClear();
 8000c86:	f7ff fd00 	bl	800068a <lcdClear>
				lcdPrint(1,1,"HATA OLUSTU");
 8000c8a:	4b21      	ldr	r3, [pc, #132]	; (8000d10 <checkCard+0x1f8>)
 8000c8c:	001a      	movs	r2, r3
 8000c8e:	2101      	movs	r1, #1
 8000c90:	2001      	movs	r0, #1
 8000c92:	f7ff fce0 	bl	8000656 <lcdPrint>
				HAL_Delay(2000);
 8000c96:	23fa      	movs	r3, #250	; 0xfa
 8000c98:	00db      	lsls	r3, r3, #3
 8000c9a:	0018      	movs	r0, r3
 8000c9c:	f000 ff34 	bl	8001b08 <HAL_Delay>
				lcdClear();
 8000ca0:	f7ff fcf3 	bl	800068a <lcdClear>
				lcdPrint(1,1,"LUTFEN");
 8000ca4:	4b1b      	ldr	r3, [pc, #108]	; (8000d14 <checkCard+0x1fc>)
 8000ca6:	001a      	movs	r2, r3
 8000ca8:	2101      	movs	r1, #1
 8000caa:	2001      	movs	r0, #1
 8000cac:	f7ff fcd3 	bl	8000656 <lcdPrint>
				lcdPrint(2,1,"KART OKUTUN");
 8000cb0:	4b19      	ldr	r3, [pc, #100]	; (8000d18 <checkCard+0x200>)
 8000cb2:	001a      	movs	r2, r3
 8000cb4:	2101      	movs	r1, #1
 8000cb6:	2002      	movs	r0, #2
 8000cb8:	f7ff fccd 	bl	8000656 <lcdPrint>
				cardState = false;
 8000cbc:	4b06      	ldr	r3, [pc, #24]	; (8000cd8 <checkCard+0x1c0>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	701a      	strb	r2, [r3, #0]
				MFRC522_Halt();
 8000cc2:	f000 fdac 	bl	800181e <MFRC522_Halt>
				MFRC522_Reset();
 8000cc6:	f000 fa2d 	bl	8001124 <MFRC522_Reset>
				MFRC522_Init();
 8000cca:	f000 fa34 	bl	8001136 <MFRC522_Init>
}
 8000cce:	46c0      	nop			; (mov r8, r8)
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	b007      	add	sp, #28
 8000cd4:	bd90      	pop	{r4, r7, pc}
 8000cd6:	46c0      	nop			; (mov r8, r8)
 8000cd8:	2000013c 	.word	0x2000013c
 8000cdc:	2000010c 	.word	0x2000010c
 8000ce0:	20000108 	.word	0x20000108
 8000ce4:	2000011c 	.word	0x2000011c
 8000ce8:	20000000 	.word	0x20000000
 8000cec:	20000124 	.word	0x20000124
 8000cf0:	20000138 	.word	0x20000138
 8000cf4:	0000270f 	.word	0x0000270f
 8000cf8:	20000136 	.word	0x20000136
 8000cfc:	20000135 	.word	0x20000135
 8000d00:	20000134 	.word	0x20000134
 8000d04:	0800401c 	.word	0x0800401c
 8000d08:	08004068 	.word	0x08004068
 8000d0c:	200000f8 	.word	0x200000f8
 8000d10:	0800405c 	.word	0x0800405c
 8000d14:	08004048 	.word	0x08004048
 8000d18:	08004050 	.word	0x08004050

08000d1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d20:	f000 fe8e 	bl	8001a40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d24:	f000 f838 	bl	8000d98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d28:	f000 f8b0 	bl	8000e8c <MX_GPIO_Init>
  MX_SPI1_Init();
 8000d2c:	f000 f870 	bl	8000e10 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  lcdInit(_LCD_4BIT,_LCD_FONT_5x8,_LCD_2LINE);
 8000d30:	2208      	movs	r2, #8
 8000d32:	2100      	movs	r1, #0
 8000d34:	2000      	movs	r0, #0
 8000d36:	f7ff fc23 	bl	8000580 <lcdInit>

  HAL_GPIO_WritePin(RC522_RST_GPIO_Port, RC522_RST_Pin, GPIO_PIN_SET);
 8000d3a:	2380      	movs	r3, #128	; 0x80
 8000d3c:	0059      	lsls	r1, r3, #1
 8000d3e:	2390      	movs	r3, #144	; 0x90
 8000d40:	05db      	lsls	r3, r3, #23
 8000d42:	2201      	movs	r2, #1
 8000d44:	0018      	movs	r0, r3
 8000d46:	f001 f944 	bl	8001fd2 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8000d4a:	2064      	movs	r0, #100	; 0x64
 8000d4c:	f000 fedc 	bl	8001b08 <HAL_Delay>
  MFRC522_Init();
 8000d50:	f000 f9f1 	bl	8001136 <MFRC522_Init>

  status = Read_MFRC522(VersionReg);
 8000d54:	2037      	movs	r0, #55	; 0x37
 8000d56:	f000 f959 	bl	800100c <Read_MFRC522>
 8000d5a:	0003      	movs	r3, r0
 8000d5c:	001a      	movs	r2, r3
 8000d5e:	4b0b      	ldr	r3, [pc, #44]	; (8000d8c <main+0x70>)
 8000d60:	701a      	strb	r2, [r3, #0]

  singleBip();
 8000d62:	f7ff fc9d 	bl	80006a0 <singleBip>

  lcdClear();
 8000d66:	f7ff fc90 	bl	800068a <lcdClear>
  lcdPrint(1,1,"LUTFEN");
 8000d6a:	4b09      	ldr	r3, [pc, #36]	; (8000d90 <main+0x74>)
 8000d6c:	001a      	movs	r2, r3
 8000d6e:	2101      	movs	r1, #1
 8000d70:	2001      	movs	r0, #1
 8000d72:	f7ff fc70 	bl	8000656 <lcdPrint>
  lcdPrint(2,1,"KART OKUTUN");
 8000d76:	4b07      	ldr	r3, [pc, #28]	; (8000d94 <main+0x78>)
 8000d78:	001a      	movs	r2, r3
 8000d7a:	2101      	movs	r1, #1
 8000d7c:	2002      	movs	r0, #2
 8000d7e:	f7ff fc6a 	bl	8000656 <lcdPrint>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  checkCard();
 8000d82:	f7ff fec9 	bl	8000b18 <checkCard>
	  checkButtons();
 8000d86:	f7ff fcd7 	bl	8000738 <checkButtons>
	  checkCard();
 8000d8a:	e7fa      	b.n	8000d82 <main+0x66>
 8000d8c:	20000108 	.word	0x20000108
 8000d90:	08004048 	.word	0x08004048
 8000d94:	08004050 	.word	0x08004050

08000d98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d98:	b590      	push	{r4, r7, lr}
 8000d9a:	b091      	sub	sp, #68	; 0x44
 8000d9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d9e:	2410      	movs	r4, #16
 8000da0:	193b      	adds	r3, r7, r4
 8000da2:	0018      	movs	r0, r3
 8000da4:	2330      	movs	r3, #48	; 0x30
 8000da6:	001a      	movs	r2, r3
 8000da8:	2100      	movs	r1, #0
 8000daa:	f002 fcb9 	bl	8003720 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dae:	003b      	movs	r3, r7
 8000db0:	0018      	movs	r0, r3
 8000db2:	2310      	movs	r3, #16
 8000db4:	001a      	movs	r2, r3
 8000db6:	2100      	movs	r1, #0
 8000db8:	f002 fcb2 	bl	8003720 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000dbc:	193b      	adds	r3, r7, r4
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000dc2:	193b      	adds	r3, r7, r4
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000dc8:	193b      	adds	r3, r7, r4
 8000dca:	2200      	movs	r2, #0
 8000dcc:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dce:	193b      	adds	r3, r7, r4
 8000dd0:	0018      	movs	r0, r3
 8000dd2:	f001 f91b 	bl	800200c <HAL_RCC_OscConfig>
 8000dd6:	1e03      	subs	r3, r0, #0
 8000dd8:	d001      	beq.n	8000dde <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000dda:	f000 f8db 	bl	8000f94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dde:	003b      	movs	r3, r7
 8000de0:	2207      	movs	r2, #7
 8000de2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000de4:	003b      	movs	r3, r7
 8000de6:	2201      	movs	r2, #1
 8000de8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dea:	003b      	movs	r3, r7
 8000dec:	2200      	movs	r2, #0
 8000dee:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000df0:	003b      	movs	r3, r7
 8000df2:	2200      	movs	r2, #0
 8000df4:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000df6:	003b      	movs	r3, r7
 8000df8:	2100      	movs	r1, #0
 8000dfa:	0018      	movs	r0, r3
 8000dfc:	f001 fc20 	bl	8002640 <HAL_RCC_ClockConfig>
 8000e00:	1e03      	subs	r3, r0, #0
 8000e02:	d001      	beq.n	8000e08 <SystemClock_Config+0x70>
  {
    Error_Handler();
 8000e04:	f000 f8c6 	bl	8000f94 <Error_Handler>
  }
}
 8000e08:	46c0      	nop			; (mov r8, r8)
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	b011      	add	sp, #68	; 0x44
 8000e0e:	bd90      	pop	{r4, r7, pc}

08000e10 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8000e14:	4b1b      	ldr	r3, [pc, #108]	; (8000e84 <MX_SPI1_Init+0x74>)
 8000e16:	4a1c      	ldr	r2, [pc, #112]	; (8000e88 <MX_SPI1_Init+0x78>)
 8000e18:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e1a:	4b1a      	ldr	r3, [pc, #104]	; (8000e84 <MX_SPI1_Init+0x74>)
 8000e1c:	2282      	movs	r2, #130	; 0x82
 8000e1e:	0052      	lsls	r2, r2, #1
 8000e20:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e22:	4b18      	ldr	r3, [pc, #96]	; (8000e84 <MX_SPI1_Init+0x74>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e28:	4b16      	ldr	r3, [pc, #88]	; (8000e84 <MX_SPI1_Init+0x74>)
 8000e2a:	22e0      	movs	r2, #224	; 0xe0
 8000e2c:	00d2      	lsls	r2, r2, #3
 8000e2e:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e30:	4b14      	ldr	r3, [pc, #80]	; (8000e84 <MX_SPI1_Init+0x74>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e36:	4b13      	ldr	r3, [pc, #76]	; (8000e84 <MX_SPI1_Init+0x74>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e3c:	4b11      	ldr	r3, [pc, #68]	; (8000e84 <MX_SPI1_Init+0x74>)
 8000e3e:	2280      	movs	r2, #128	; 0x80
 8000e40:	0092      	lsls	r2, r2, #2
 8000e42:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000e44:	4b0f      	ldr	r3, [pc, #60]	; (8000e84 <MX_SPI1_Init+0x74>)
 8000e46:	2210      	movs	r2, #16
 8000e48:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e4a:	4b0e      	ldr	r3, [pc, #56]	; (8000e84 <MX_SPI1_Init+0x74>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e50:	4b0c      	ldr	r3, [pc, #48]	; (8000e84 <MX_SPI1_Init+0x74>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e56:	4b0b      	ldr	r3, [pc, #44]	; (8000e84 <MX_SPI1_Init+0x74>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 8000e5c:	4b09      	ldr	r3, [pc, #36]	; (8000e84 <MX_SPI1_Init+0x74>)
 8000e5e:	2207      	movs	r2, #7
 8000e60:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000e62:	4b08      	ldr	r3, [pc, #32]	; (8000e84 <MX_SPI1_Init+0x74>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	631a      	str	r2, [r3, #48]	; 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000e68:	4b06      	ldr	r3, [pc, #24]	; (8000e84 <MX_SPI1_Init+0x74>)
 8000e6a:	2208      	movs	r2, #8
 8000e6c:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000e6e:	4b05      	ldr	r3, [pc, #20]	; (8000e84 <MX_SPI1_Init+0x74>)
 8000e70:	0018      	movs	r0, r3
 8000e72:	f001 fd0b 	bl	800288c <HAL_SPI_Init>
 8000e76:	1e03      	subs	r3, r0, #0
 8000e78:	d001      	beq.n	8000e7e <MX_SPI1_Init+0x6e>
	{
	Error_Handler();
 8000e7a:	f000 f88b 	bl	8000f94 <Error_Handler>
	}
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000e7e:	46c0      	nop			; (mov r8, r8)
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	20000094 	.word	0x20000094
 8000e88:	40013000 	.word	0x40013000

08000e8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e8c:	b590      	push	{r4, r7, lr}
 8000e8e:	b089      	sub	sp, #36	; 0x24
 8000e90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e92:	240c      	movs	r4, #12
 8000e94:	193b      	adds	r3, r7, r4
 8000e96:	0018      	movs	r0, r3
 8000e98:	2314      	movs	r3, #20
 8000e9a:	001a      	movs	r2, r3
 8000e9c:	2100      	movs	r1, #0
 8000e9e:	f002 fc3f 	bl	8003720 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ea2:	4b3a      	ldr	r3, [pc, #232]	; (8000f8c <MX_GPIO_Init+0x100>)
 8000ea4:	695a      	ldr	r2, [r3, #20]
 8000ea6:	4b39      	ldr	r3, [pc, #228]	; (8000f8c <MX_GPIO_Init+0x100>)
 8000ea8:	2180      	movs	r1, #128	; 0x80
 8000eaa:	03c9      	lsls	r1, r1, #15
 8000eac:	430a      	orrs	r2, r1
 8000eae:	615a      	str	r2, [r3, #20]
 8000eb0:	4b36      	ldr	r3, [pc, #216]	; (8000f8c <MX_GPIO_Init+0x100>)
 8000eb2:	695a      	ldr	r2, [r3, #20]
 8000eb4:	2380      	movs	r3, #128	; 0x80
 8000eb6:	03db      	lsls	r3, r3, #15
 8000eb8:	4013      	ands	r3, r2
 8000eba:	60bb      	str	r3, [r7, #8]
 8000ebc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ebe:	4b33      	ldr	r3, [pc, #204]	; (8000f8c <MX_GPIO_Init+0x100>)
 8000ec0:	695a      	ldr	r2, [r3, #20]
 8000ec2:	4b32      	ldr	r3, [pc, #200]	; (8000f8c <MX_GPIO_Init+0x100>)
 8000ec4:	2180      	movs	r1, #128	; 0x80
 8000ec6:	0289      	lsls	r1, r1, #10
 8000ec8:	430a      	orrs	r2, r1
 8000eca:	615a      	str	r2, [r3, #20]
 8000ecc:	4b2f      	ldr	r3, [pc, #188]	; (8000f8c <MX_GPIO_Init+0x100>)
 8000ece:	695a      	ldr	r2, [r3, #20]
 8000ed0:	2380      	movs	r3, #128	; 0x80
 8000ed2:	029b      	lsls	r3, r3, #10
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	607b      	str	r3, [r7, #4]
 8000ed8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eda:	4b2c      	ldr	r3, [pc, #176]	; (8000f8c <MX_GPIO_Init+0x100>)
 8000edc:	695a      	ldr	r2, [r3, #20]
 8000ede:	4b2b      	ldr	r3, [pc, #172]	; (8000f8c <MX_GPIO_Init+0x100>)
 8000ee0:	2180      	movs	r1, #128	; 0x80
 8000ee2:	02c9      	lsls	r1, r1, #11
 8000ee4:	430a      	orrs	r2, r1
 8000ee6:	615a      	str	r2, [r3, #20]
 8000ee8:	4b28      	ldr	r3, [pc, #160]	; (8000f8c <MX_GPIO_Init+0x100>)
 8000eea:	695a      	ldr	r2, [r3, #20]
 8000eec:	2380      	movs	r3, #128	; 0x80
 8000eee:	02db      	lsls	r3, r3, #11
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	603b      	str	r3, [r7, #0]
 8000ef4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RC522_CS_Pin|RC522_RST_Pin|BUZZER_Pin, GPIO_PIN_RESET);
 8000ef6:	2391      	movs	r3, #145	; 0x91
 8000ef8:	0119      	lsls	r1, r3, #4
 8000efa:	2390      	movs	r3, #144	; 0x90
 8000efc:	05db      	lsls	r3, r3, #23
 8000efe:	2200      	movs	r2, #0
 8000f00:	0018      	movs	r0, r3
 8000f02:	f001 f866 	bl	8001fd2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_RS_Pin|LCD_EN_Pin|LCD_D4_Pin|LCD_D5_Pin
 8000f06:	4b22      	ldr	r3, [pc, #136]	; (8000f90 <MX_GPIO_Init+0x104>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	21fa      	movs	r1, #250	; 0xfa
 8000f0c:	0018      	movs	r0, r3
 8000f0e:	f001 f860 	bl	8001fd2 <HAL_GPIO_WritePin>
                          |LCD_D6_Pin|LCD_D7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : RC522_CS_Pin RC522_RST_Pin BUZZER_Pin */
  GPIO_InitStruct.Pin = RC522_CS_Pin|RC522_RST_Pin|BUZZER_Pin;
 8000f12:	193b      	adds	r3, r7, r4
 8000f14:	2291      	movs	r2, #145	; 0x91
 8000f16:	0112      	lsls	r2, r2, #4
 8000f18:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f1a:	193b      	adds	r3, r7, r4
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f20:	193b      	adds	r3, r7, r4
 8000f22:	2200      	movs	r2, #0
 8000f24:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f26:	193b      	adds	r3, r7, r4
 8000f28:	2200      	movs	r2, #0
 8000f2a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f2c:	193a      	adds	r2, r7, r4
 8000f2e:	2390      	movs	r3, #144	; 0x90
 8000f30:	05db      	lsls	r3, r3, #23
 8000f32:	0011      	movs	r1, r2
 8000f34:	0018      	movs	r0, r3
 8000f36:	f000 febf 	bl	8001cb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RS_Pin LCD_EN_Pin LCD_D4_Pin LCD_D5_Pin
                           LCD_D6_Pin LCD_D7_Pin */
  GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_EN_Pin|LCD_D4_Pin|LCD_D5_Pin
 8000f3a:	193b      	adds	r3, r7, r4
 8000f3c:	22fa      	movs	r2, #250	; 0xfa
 8000f3e:	601a      	str	r2, [r3, #0]
                          |LCD_D6_Pin|LCD_D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f40:	193b      	adds	r3, r7, r4
 8000f42:	2201      	movs	r2, #1
 8000f44:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f46:	193b      	adds	r3, r7, r4
 8000f48:	2200      	movs	r2, #0
 8000f4a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f4c:	193b      	adds	r3, r7, r4
 8000f4e:	2200      	movs	r2, #0
 8000f50:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f52:	193b      	adds	r3, r7, r4
 8000f54:	4a0e      	ldr	r2, [pc, #56]	; (8000f90 <MX_GPIO_Init+0x104>)
 8000f56:	0019      	movs	r1, r3
 8000f58:	0010      	movs	r0, r2
 8000f5a:	f000 fead 	bl	8001cb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN_4_Pin BTN_3_Pin BTN_2_Pin BTN_1_Pin */
  GPIO_InitStruct.Pin = BTN_4_Pin|BTN_3_Pin|BTN_2_Pin|BTN_1_Pin;
 8000f5e:	0021      	movs	r1, r4
 8000f60:	187b      	adds	r3, r7, r1
 8000f62:	22f0      	movs	r2, #240	; 0xf0
 8000f64:	0212      	lsls	r2, r2, #8
 8000f66:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f68:	187b      	adds	r3, r7, r1
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f6e:	187b      	adds	r3, r7, r1
 8000f70:	2201      	movs	r2, #1
 8000f72:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f74:	187a      	adds	r2, r7, r1
 8000f76:	2390      	movs	r3, #144	; 0x90
 8000f78:	05db      	lsls	r3, r3, #23
 8000f7a:	0011      	movs	r1, r2
 8000f7c:	0018      	movs	r0, r3
 8000f7e:	f000 fe9b 	bl	8001cb8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f82:	46c0      	nop			; (mov r8, r8)
 8000f84:	46bd      	mov	sp, r7
 8000f86:	b009      	add	sp, #36	; 0x24
 8000f88:	bd90      	pop	{r4, r7, pc}
 8000f8a:	46c0      	nop			; (mov r8, r8)
 8000f8c:	40021000 	.word	0x40021000
 8000f90:	48000400 	.word	0x48000400

08000f94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f98:	b672      	cpsid	i
}
 8000f9a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f9c:	e7fe      	b.n	8000f9c <Error_Handler+0x8>
	...

08000fa0 <Write_MFRC522>:
 * Function Nameï¼šWrite_MFRC5200
 * Function Description: To a certain MFRC522 register to write a byte of data
 * Input Parametersï¼šaddr - register address; val - the value to be written
 * Return value: None
 */
void Write_MFRC522(u_char addr, u_char val) {
 8000fa0:	b590      	push	{r4, r7, lr}
 8000fa2:	b085      	sub	sp, #20
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	0002      	movs	r2, r0
 8000fa8:	1dfb      	adds	r3, r7, #7
 8000faa:	701a      	strb	r2, [r3, #0]
 8000fac:	1dbb      	adds	r3, r7, #6
 8000fae:	1c0a      	adds	r2, r1, #0
 8000fb0:	701a      	strb	r2, [r3, #0]
  //uint32_t rx_bits;
	  u_char addr_bits = (((addr<<1) & 0x7E));
 8000fb2:	1dfb      	adds	r3, r7, #7
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	005b      	lsls	r3, r3, #1
 8000fb8:	b2db      	uxtb	r3, r3
 8000fba:	227e      	movs	r2, #126	; 0x7e
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	b2da      	uxtb	r2, r3
 8000fc0:	240f      	movs	r4, #15
 8000fc2:	193b      	adds	r3, r7, r4
 8000fc4:	701a      	strb	r2, [r3, #0]
  //u_char rx_bits;
  // set the select line so we can start transferring
//  MSS_SPI_set_slave_select( &g_mss_spi1, MSS_SPI_SLAVE_0 );
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8000fc6:	2390      	movs	r3, #144	; 0x90
 8000fc8:	05db      	lsls	r3, r3, #23
 8000fca:	2200      	movs	r2, #0
 8000fcc:	2110      	movs	r1, #16
 8000fce:	0018      	movs	r0, r3
 8000fd0:	f000 ffff 	bl	8001fd2 <HAL_GPIO_WritePin>
  //   1 bit, clear the LSb, and clear the MSb to indicate a write
  // - bottom 8 bits are the data bits being sent for that address, we send
  //   them as is
//  rx_bits = MSS_SPI_transfer_frame( &g_mss_spi1, (((addr << 1) & 0x7E) << 8) |  val );
  //HAL_SPI_TransmitReceive(&hspi1, (((addr << 1) & 0x7E) << 8) |  val , rx_bits, 1, 500);
  HAL_SPI_Transmit(&hspi1, &addr_bits, 1, 500);
 8000fd4:	23fa      	movs	r3, #250	; 0xfa
 8000fd6:	005b      	lsls	r3, r3, #1
 8000fd8:	1939      	adds	r1, r7, r4
 8000fda:	480b      	ldr	r0, [pc, #44]	; (8001008 <Write_MFRC522+0x68>)
 8000fdc:	2201      	movs	r2, #1
 8000fde:	f001 fd0d 	bl	80029fc <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi1, &val, 1, 500);
 8000fe2:	23fa      	movs	r3, #250	; 0xfa
 8000fe4:	005b      	lsls	r3, r3, #1
 8000fe6:	1db9      	adds	r1, r7, #6
 8000fe8:	4807      	ldr	r0, [pc, #28]	; (8001008 <Write_MFRC522+0x68>)
 8000fea:	2201      	movs	r2, #1
 8000fec:	f001 fd06 	bl	80029fc <HAL_SPI_Transmit>
  // clear the select line-- we are done here
//  MSS_SPI_clear_slave_select( &g_mss_spi1, MSS_SPI_SLAVE_0 );
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 8000ff0:	2390      	movs	r3, #144	; 0x90
 8000ff2:	05db      	lsls	r3, r3, #23
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	2110      	movs	r1, #16
 8000ff8:	0018      	movs	r0, r3
 8000ffa:	f000 ffea 	bl	8001fd2 <HAL_GPIO_WritePin>

  // burn some time
  // volatile uint32_t ticks;
  // for(ticks=0; ticks < 5000; ++ticks);
}
 8000ffe:	46c0      	nop			; (mov r8, r8)
 8001000:	46bd      	mov	sp, r7
 8001002:	b005      	add	sp, #20
 8001004:	bd90      	pop	{r4, r7, pc}
 8001006:	46c0      	nop			; (mov r8, r8)
 8001008:	20000094 	.word	0x20000094

0800100c <Read_MFRC522>:
 * Function Name: Read_MFRC522
 * Description: From a certain MFRC522 read a byte of data register
 * Input Parameters: addr - register address
 * Returns: a byte of data read from the
 */
u_char Read_MFRC522(u_char addr) {
 800100c:	b590      	push	{r4, r7, lr}
 800100e:	b085      	sub	sp, #20
 8001010:	af00      	add	r7, sp, #0
 8001012:	0002      	movs	r2, r0
 8001014:	1dfb      	adds	r3, r7, #7
 8001016:	701a      	strb	r2, [r3, #0]
  //uint32_t rx_bits;
  u_char rx_bits;
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 8001018:	1dfb      	adds	r3, r7, #7
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	005b      	lsls	r3, r3, #1
 800101e:	b25b      	sxtb	r3, r3
 8001020:	227e      	movs	r2, #126	; 0x7e
 8001022:	4013      	ands	r3, r2
 8001024:	b25b      	sxtb	r3, r3
 8001026:	2280      	movs	r2, #128	; 0x80
 8001028:	4252      	negs	r2, r2
 800102a:	4313      	orrs	r3, r2
 800102c:	b25b      	sxtb	r3, r3
 800102e:	b2da      	uxtb	r2, r3
 8001030:	240e      	movs	r4, #14
 8001032:	193b      	adds	r3, r7, r4
 8001034:	701a      	strb	r2, [r3, #0]

  // set the select line so we can start transferring
//  MSS_SPI_set_slave_select( &g_mss_spi1, MSS_SPI_SLAVE_0 );
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8001036:	2390      	movs	r3, #144	; 0x90
 8001038:	05db      	lsls	r3, r3, #23
 800103a:	2200      	movs	r2, #0
 800103c:	2110      	movs	r1, #16
 800103e:	0018      	movs	r0, r3
 8001040:	f000 ffc7 	bl	8001fd2 <HAL_GPIO_WritePin>
  //   1 bit, clear the LSb, and set the MSb to indicate a read
  // - bottom 8 bits are all 0s on a read per 8.1.2.1 Table 6
//  rx_bits = MSS_SPI_transfer_frame( &g_mss_spi1, ((((addr << 1) & 0x7E) | 0x80) << 8) | 0x00 );
  //HAL_SPI_TransmitReceive(&hspi1, ((((addr << 1) & 0x7E) | 0x80) << 8) | 0x00 , rx_bits, 1, 500);
//HAL_SPI_Transmit(&hspi1, (unsigned char*) ((((addr<<1) & 0x7E) | 0x80)), 1, 500);
HAL_SPI_Transmit(&hspi1, &addr_bits, 1, 500);
 8001044:	23fa      	movs	r3, #250	; 0xfa
 8001046:	005b      	lsls	r3, r3, #1
 8001048:	1939      	adds	r1, r7, r4
 800104a:	480c      	ldr	r0, [pc, #48]	; (800107c <Read_MFRC522+0x70>)
 800104c:	2201      	movs	r2, #1
 800104e:	f001 fcd5 	bl	80029fc <HAL_SPI_Transmit>

  HAL_SPI_Receive(&hspi1, &rx_bits, 1, 500);
 8001052:	23fa      	movs	r3, #250	; 0xfa
 8001054:	005b      	lsls	r3, r3, #1
 8001056:	240f      	movs	r4, #15
 8001058:	1939      	adds	r1, r7, r4
 800105a:	4808      	ldr	r0, [pc, #32]	; (800107c <Read_MFRC522+0x70>)
 800105c:	2201      	movs	r2, #1
 800105e:	f001 fe2d 	bl	8002cbc <HAL_SPI_Receive>
//  MSS_SPI_clear_slave_select( &g_mss_spi1, MSS_SPI_SLAVE_0 );

  // burn some time
  // volatile uint32_t ticks;
  // for(ticks=0; ticks < 5000; ++ticks);
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 8001062:	2390      	movs	r3, #144	; 0x90
 8001064:	05db      	lsls	r3, r3, #23
 8001066:	2201      	movs	r2, #1
 8001068:	2110      	movs	r1, #16
 800106a:	0018      	movs	r0, r3
 800106c:	f000 ffb1 	bl	8001fd2 <HAL_GPIO_WritePin>

	return (u_char) rx_bits; // return the rx bits, casting to an 8 bit int and chopping off the upper 24 bits
 8001070:	193b      	adds	r3, r7, r4
 8001072:	781b      	ldrb	r3, [r3, #0]
}
 8001074:	0018      	movs	r0, r3
 8001076:	46bd      	mov	sp, r7
 8001078:	b005      	add	sp, #20
 800107a:	bd90      	pop	{r4, r7, pc}
 800107c:	20000094 	.word	0x20000094

08001080 <SetBitMask>:
 * Description: Set RC522 register bit
 * Input parameters: reg - register address; mask - set value
 * Return value: None
 */
void SetBitMask(u_char reg, u_char mask)
{
 8001080:	b5b0      	push	{r4, r5, r7, lr}
 8001082:	b084      	sub	sp, #16
 8001084:	af00      	add	r7, sp, #0
 8001086:	0002      	movs	r2, r0
 8001088:	1dfb      	adds	r3, r7, #7
 800108a:	701a      	strb	r2, [r3, #0]
 800108c:	1dbb      	adds	r3, r7, #6
 800108e:	1c0a      	adds	r2, r1, #0
 8001090:	701a      	strb	r2, [r3, #0]
    u_char tmp;
    tmp = Read_MFRC522(reg);
 8001092:	250f      	movs	r5, #15
 8001094:	197c      	adds	r4, r7, r5
 8001096:	1dfb      	adds	r3, r7, #7
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	0018      	movs	r0, r3
 800109c:	f7ff ffb6 	bl	800100c <Read_MFRC522>
 80010a0:	0003      	movs	r3, r0
 80010a2:	7023      	strb	r3, [r4, #0]
    Write_MFRC522(reg, tmp | mask);  // set bit mask
 80010a4:	197a      	adds	r2, r7, r5
 80010a6:	1dbb      	adds	r3, r7, #6
 80010a8:	7812      	ldrb	r2, [r2, #0]
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	4313      	orrs	r3, r2
 80010ae:	b2da      	uxtb	r2, r3
 80010b0:	1dfb      	adds	r3, r7, #7
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	0011      	movs	r1, r2
 80010b6:	0018      	movs	r0, r3
 80010b8:	f7ff ff72 	bl	8000fa0 <Write_MFRC522>
}
 80010bc:	46c0      	nop			; (mov r8, r8)
 80010be:	46bd      	mov	sp, r7
 80010c0:	b004      	add	sp, #16
 80010c2:	bdb0      	pop	{r4, r5, r7, pc}

080010c4 <ClearBitMask>:
 * Description: clear RC522 register bit
 * Input parameters: reg - register address; mask - clear bit value
 * Return value: None
*/
void ClearBitMask(u_char reg, u_char mask)
{
 80010c4:	b5b0      	push	{r4, r5, r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	0002      	movs	r2, r0
 80010cc:	1dfb      	adds	r3, r7, #7
 80010ce:	701a      	strb	r2, [r3, #0]
 80010d0:	1dbb      	adds	r3, r7, #6
 80010d2:	1c0a      	adds	r2, r1, #0
 80010d4:	701a      	strb	r2, [r3, #0]
    u_char tmp;
    tmp = Read_MFRC522(reg);
 80010d6:	250f      	movs	r5, #15
 80010d8:	197c      	adds	r4, r7, r5
 80010da:	1dfb      	adds	r3, r7, #7
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	0018      	movs	r0, r3
 80010e0:	f7ff ff94 	bl	800100c <Read_MFRC522>
 80010e4:	0003      	movs	r3, r0
 80010e6:	7023      	strb	r3, [r4, #0]
    Write_MFRC522(reg, tmp & (~mask));  // clear bit mask
 80010e8:	1dbb      	adds	r3, r7, #6
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	b25b      	sxtb	r3, r3
 80010ee:	43db      	mvns	r3, r3
 80010f0:	b25b      	sxtb	r3, r3
 80010f2:	197a      	adds	r2, r7, r5
 80010f4:	7812      	ldrb	r2, [r2, #0]
 80010f6:	b252      	sxtb	r2, r2
 80010f8:	4013      	ands	r3, r2
 80010fa:	b25b      	sxtb	r3, r3
 80010fc:	b2da      	uxtb	r2, r3
 80010fe:	1dfb      	adds	r3, r7, #7
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	0011      	movs	r1, r2
 8001104:	0018      	movs	r0, r3
 8001106:	f7ff ff4b 	bl	8000fa0 <Write_MFRC522>
}
 800110a:	46c0      	nop			; (mov r8, r8)
 800110c:	46bd      	mov	sp, r7
 800110e:	b004      	add	sp, #16
 8001110:	bdb0      	pop	{r4, r5, r7, pc}

08001112 <AntennaOn>:
 * Description: Open antennas, each time you start or shut down the natural barrier between the transmitter should be at least 1ms interval
 * Input: None
 * Return value: None
 */
void AntennaOn(void)
{
 8001112:	b580      	push	{r7, lr}
 8001114:	af00      	add	r7, sp, #0
  SetBitMask(TxControlReg, 0x03);
 8001116:	2103      	movs	r1, #3
 8001118:	2014      	movs	r0, #20
 800111a:	f7ff ffb1 	bl	8001080 <SetBitMask>
}
 800111e:	46c0      	nop			; (mov r8, r8)
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}

08001124 <MFRC522_Reset>:
 * Description: Reset RC522
 * Input: None
 * Return value: None
 */
void MFRC522_Reset(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
  Write_MFRC522(CommandReg, PCD_RESETPHASE);
 8001128:	210f      	movs	r1, #15
 800112a:	2001      	movs	r0, #1
 800112c:	f7ff ff38 	bl	8000fa0 <Write_MFRC522>
}
 8001130:	46c0      	nop			; (mov r8, r8)
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}

08001136 <MFRC522_Init>:
 * Description: Initialize RC522
 * Input: None
 * Return value: None
*/
void MFRC522_Init(void)
{
 8001136:	b580      	push	{r7, lr}
 8001138:	af00      	add	r7, sp, #0
//  MSS_GPIO_set_output( MSS_GPIO_1, 1 );
  MFRC522_Reset();
 800113a:	f7ff fff3 	bl	8001124 <MFRC522_Reset>

  // Timer: TPrescaler*TreloadVal/6.78MHz = 24ms
  Write_MFRC522(TModeReg, 0x80); // 0x8D);      // Tauto=1; f(Timer) = 6.78MHz/TPreScaler
 800113e:	2180      	movs	r1, #128	; 0x80
 8001140:	202a      	movs	r0, #42	; 0x2a
 8001142:	f7ff ff2d 	bl	8000fa0 <Write_MFRC522>
  Write_MFRC522(TPrescalerReg, 0xA9); //0x34); // TModeReg[3..0] + TPrescalerReg
 8001146:	21a9      	movs	r1, #169	; 0xa9
 8001148:	202b      	movs	r0, #43	; 0x2b
 800114a:	f7ff ff29 	bl	8000fa0 <Write_MFRC522>
  Write_MFRC522(TReloadRegL, 0x03); //30);
 800114e:	2103      	movs	r1, #3
 8001150:	202d      	movs	r0, #45	; 0x2d
 8001152:	f7ff ff25 	bl	8000fa0 <Write_MFRC522>
  Write_MFRC522(TReloadRegH, 0xE8); //0);
 8001156:	21e8      	movs	r1, #232	; 0xe8
 8001158:	202c      	movs	r0, #44	; 0x2c
 800115a:	f7ff ff21 	bl	8000fa0 <Write_MFRC522>
  Write_MFRC522(TxAutoReg, 0x40);     // force 100% ASK modulation
 800115e:	2140      	movs	r1, #64	; 0x40
 8001160:	2015      	movs	r0, #21
 8001162:	f7ff ff1d 	bl	8000fa0 <Write_MFRC522>
  Write_MFRC522(ModeReg, 0x3D);       // CRC Initial value 0x6363
 8001166:	213d      	movs	r1, #61	; 0x3d
 8001168:	2011      	movs	r0, #17
 800116a:	f7ff ff19 	bl	8000fa0 <Write_MFRC522>
  // interrupts, still playing with these
  // Write_MFRC522(CommIEnReg, 0xFF);
  // Write_MFRC522(DivlEnReg, 0xFF);

  // turn antenna on
  AntennaOn();
 800116e:	f7ff ffd0 	bl	8001112 <AntennaOn>
}
 8001172:	46c0      	nop			; (mov r8, r8)
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}

08001178 <MFRC522_Request>:
 *    0x0800 = Mifare_Pro(X)
 *    0x4403 = Mifare_DESFire
 * Return value: the successful return MI_OK
 */
u_char MFRC522_Request(u_char reqMode, u_char *TagType)
{
 8001178:	b5b0      	push	{r4, r5, r7, lr}
 800117a:	b086      	sub	sp, #24
 800117c:	af02      	add	r7, sp, #8
 800117e:	0002      	movs	r2, r0
 8001180:	6039      	str	r1, [r7, #0]
 8001182:	1dfb      	adds	r3, r7, #7
 8001184:	701a      	strb	r2, [r3, #0]
  u_char status;
  uint backBits; // The received data bits

  Write_MFRC522(BitFramingReg, 0x07);   // TxLastBists = BitFramingReg[2..0]
 8001186:	2107      	movs	r1, #7
 8001188:	200d      	movs	r0, #13
 800118a:	f7ff ff09 	bl	8000fa0 <Write_MFRC522>

  TagType[0] = reqMode;
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	1dfa      	adds	r2, r7, #7
 8001192:	7812      	ldrb	r2, [r2, #0]
 8001194:	701a      	strb	r2, [r3, #0]

  status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 8001196:	250f      	movs	r5, #15
 8001198:	197c      	adds	r4, r7, r5
 800119a:	683a      	ldr	r2, [r7, #0]
 800119c:	6839      	ldr	r1, [r7, #0]
 800119e:	2308      	movs	r3, #8
 80011a0:	18fb      	adds	r3, r7, r3
 80011a2:	9300      	str	r3, [sp, #0]
 80011a4:	0013      	movs	r3, r2
 80011a6:	2201      	movs	r2, #1
 80011a8:	200c      	movs	r0, #12
 80011aa:	f000 f814 	bl	80011d6 <MFRC522_ToCard>
 80011ae:	0003      	movs	r3, r0
 80011b0:	7023      	strb	r3, [r4, #0]
  if ((status != MI_OK) || (backBits != 0x10)) {
 80011b2:	197b      	adds	r3, r7, r5
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d102      	bne.n	80011c0 <MFRC522_Request+0x48>
 80011ba:	68bb      	ldr	r3, [r7, #8]
 80011bc:	2b10      	cmp	r3, #16
 80011be:	d003      	beq.n	80011c8 <MFRC522_Request+0x50>
    status = MI_ERR;
 80011c0:	230f      	movs	r3, #15
 80011c2:	18fb      	adds	r3, r7, r3
 80011c4:	2202      	movs	r2, #2
 80011c6:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80011c8:	230f      	movs	r3, #15
 80011ca:	18fb      	adds	r3, r7, r3
 80011cc:	781b      	ldrb	r3, [r3, #0]
}
 80011ce:	0018      	movs	r0, r3
 80011d0:	46bd      	mov	sp, r7
 80011d2:	b004      	add	sp, #16
 80011d4:	bdb0      	pop	{r4, r5, r7, pc}

080011d6 <MFRC522_ToCard>:
 *			 backData--Received the card returns data,
 *			 backLen--Return data bit length
 * Return value: the successful return MI_OK
 */
u_char MFRC522_ToCard(u_char command, u_char *sendData, u_char sendLen, u_char *backData, uint *backLen)
{
 80011d6:	b5b0      	push	{r4, r5, r7, lr}
 80011d8:	b088      	sub	sp, #32
 80011da:	af00      	add	r7, sp, #0
 80011dc:	60b9      	str	r1, [r7, #8]
 80011de:	0011      	movs	r1, r2
 80011e0:	607b      	str	r3, [r7, #4]
 80011e2:	240f      	movs	r4, #15
 80011e4:	193b      	adds	r3, r7, r4
 80011e6:	1c02      	adds	r2, r0, #0
 80011e8:	701a      	strb	r2, [r3, #0]
 80011ea:	230e      	movs	r3, #14
 80011ec:	18fb      	adds	r3, r7, r3
 80011ee:	1c0a      	adds	r2, r1, #0
 80011f0:	701a      	strb	r2, [r3, #0]
  u_char status = MI_ERR;
 80011f2:	231f      	movs	r3, #31
 80011f4:	18fb      	adds	r3, r7, r3
 80011f6:	2202      	movs	r2, #2
 80011f8:	701a      	strb	r2, [r3, #0]
  u_char irqEn = 0x00;
 80011fa:	211e      	movs	r1, #30
 80011fc:	187b      	adds	r3, r7, r1
 80011fe:	2200      	movs	r2, #0
 8001200:	701a      	strb	r2, [r3, #0]
  u_char waitIRq = 0x00;
 8001202:	201d      	movs	r0, #29
 8001204:	183b      	adds	r3, r7, r0
 8001206:	2200      	movs	r2, #0
 8001208:	701a      	strb	r2, [r3, #0]
  u_char lastBits;
  u_char n;
  uint i;

  switch (command)
 800120a:	193b      	adds	r3, r7, r4
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	2b0c      	cmp	r3, #12
 8001210:	d008      	beq.n	8001224 <MFRC522_ToCard+0x4e>
 8001212:	2b0e      	cmp	r3, #14
 8001214:	d10f      	bne.n	8001236 <MFRC522_ToCard+0x60>
  {
    case PCD_AUTHENT:     // Certification cards close
      {
        irqEn = 0x12;
 8001216:	187b      	adds	r3, r7, r1
 8001218:	2212      	movs	r2, #18
 800121a:	701a      	strb	r2, [r3, #0]
        waitIRq = 0x10;
 800121c:	183b      	adds	r3, r7, r0
 800121e:	2210      	movs	r2, #16
 8001220:	701a      	strb	r2, [r3, #0]
        break;
 8001222:	e009      	b.n	8001238 <MFRC522_ToCard+0x62>
      }
    case PCD_TRANSCEIVE:  // Transmit FIFO data
      {
        irqEn = 0x77;
 8001224:	231e      	movs	r3, #30
 8001226:	18fb      	adds	r3, r7, r3
 8001228:	2277      	movs	r2, #119	; 0x77
 800122a:	701a      	strb	r2, [r3, #0]
        waitIRq = 0x30;
 800122c:	231d      	movs	r3, #29
 800122e:	18fb      	adds	r3, r7, r3
 8001230:	2230      	movs	r2, #48	; 0x30
 8001232:	701a      	strb	r2, [r3, #0]
        break;
 8001234:	e000      	b.n	8001238 <MFRC522_ToCard+0x62>
      }
    default:
      break;
 8001236:	46c0      	nop			; (mov r8, r8)
  }

  Write_MFRC522(CommIEnReg, irqEn|0x80);  // Interrupt request
 8001238:	231e      	movs	r3, #30
 800123a:	18fb      	adds	r3, r7, r3
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	2280      	movs	r2, #128	; 0x80
 8001240:	4252      	negs	r2, r2
 8001242:	4313      	orrs	r3, r2
 8001244:	b2db      	uxtb	r3, r3
 8001246:	0019      	movs	r1, r3
 8001248:	2002      	movs	r0, #2
 800124a:	f7ff fea9 	bl	8000fa0 <Write_MFRC522>
  ClearBitMask(CommIrqReg, 0x80);         // Clear all interrupt request bit
 800124e:	2180      	movs	r1, #128	; 0x80
 8001250:	2004      	movs	r0, #4
 8001252:	f7ff ff37 	bl	80010c4 <ClearBitMask>
  SetBitMask(FIFOLevelReg, 0x80);         // FlushBuffer=1, FIFO Initialization
 8001256:	2180      	movs	r1, #128	; 0x80
 8001258:	200a      	movs	r0, #10
 800125a:	f7ff ff11 	bl	8001080 <SetBitMask>

  Write_MFRC522(CommandReg, PCD_IDLE);    // NO action; Cancel the current command
 800125e:	2100      	movs	r1, #0
 8001260:	2001      	movs	r0, #1
 8001262:	f7ff fe9d 	bl	8000fa0 <Write_MFRC522>

  // Writing data to the FIFO
  for (i=0; i<sendLen; i++)
 8001266:	2300      	movs	r3, #0
 8001268:	61bb      	str	r3, [r7, #24]
 800126a:	e00a      	b.n	8001282 <MFRC522_ToCard+0xac>
  {
    Write_MFRC522(FIFODataReg, sendData[i]);
 800126c:	68ba      	ldr	r2, [r7, #8]
 800126e:	69bb      	ldr	r3, [r7, #24]
 8001270:	18d3      	adds	r3, r2, r3
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	0019      	movs	r1, r3
 8001276:	2009      	movs	r0, #9
 8001278:	f7ff fe92 	bl	8000fa0 <Write_MFRC522>
  for (i=0; i<sendLen; i++)
 800127c:	69bb      	ldr	r3, [r7, #24]
 800127e:	3301      	adds	r3, #1
 8001280:	61bb      	str	r3, [r7, #24]
 8001282:	230e      	movs	r3, #14
 8001284:	18fb      	adds	r3, r7, r3
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	69ba      	ldr	r2, [r7, #24]
 800128a:	429a      	cmp	r2, r3
 800128c:	d3ee      	bcc.n	800126c <MFRC522_ToCard+0x96>
  }

  // Execute the command
  Write_MFRC522(CommandReg, command);
 800128e:	240f      	movs	r4, #15
 8001290:	193b      	adds	r3, r7, r4
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	0019      	movs	r1, r3
 8001296:	2001      	movs	r0, #1
 8001298:	f7ff fe82 	bl	8000fa0 <Write_MFRC522>
  if (command == PCD_TRANSCEIVE)
 800129c:	193b      	adds	r3, r7, r4
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	2b0c      	cmp	r3, #12
 80012a2:	d103      	bne.n	80012ac <MFRC522_ToCard+0xd6>
  {
    SetBitMask(BitFramingReg, 0x80);      // StartSend=1,transmission of data starts
 80012a4:	2180      	movs	r1, #128	; 0x80
 80012a6:	200d      	movs	r0, #13
 80012a8:	f7ff feea 	bl	8001080 <SetBitMask>
  }

  // Waiting to receive data to complete
  i = 2000;	// i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms
 80012ac:	23fa      	movs	r3, #250	; 0xfa
 80012ae:	00db      	lsls	r3, r3, #3
 80012b0:	61bb      	str	r3, [r7, #24]
  do
  {
    // CommIrqReg[7..0]
    // Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
    n = Read_MFRC522(CommIrqReg);
 80012b2:	251c      	movs	r5, #28
 80012b4:	197c      	adds	r4, r7, r5
 80012b6:	2004      	movs	r0, #4
 80012b8:	f7ff fea8 	bl	800100c <Read_MFRC522>
 80012bc:	0003      	movs	r3, r0
 80012be:	7023      	strb	r3, [r4, #0]
    i--;
 80012c0:	69bb      	ldr	r3, [r7, #24]
 80012c2:	3b01      	subs	r3, #1
 80012c4:	61bb      	str	r3, [r7, #24]
  }
  while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 80012c6:	69bb      	ldr	r3, [r7, #24]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d00d      	beq.n	80012e8 <MFRC522_ToCard+0x112>
 80012cc:	197b      	adds	r3, r7, r5
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	2201      	movs	r2, #1
 80012d2:	4013      	ands	r3, r2
 80012d4:	d108      	bne.n	80012e8 <MFRC522_ToCard+0x112>
 80012d6:	197b      	adds	r3, r7, r5
 80012d8:	221d      	movs	r2, #29
 80012da:	18ba      	adds	r2, r7, r2
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	7812      	ldrb	r2, [r2, #0]
 80012e0:	4013      	ands	r3, r2
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d0e4      	beq.n	80012b2 <MFRC522_ToCard+0xdc>

  ClearBitMask(BitFramingReg, 0x80);      // StartSend=0
 80012e8:	2180      	movs	r1, #128	; 0x80
 80012ea:	200d      	movs	r0, #13
 80012ec:	f7ff feea 	bl	80010c4 <ClearBitMask>

  if (i != 0)
 80012f0:	69bb      	ldr	r3, [r7, #24]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d100      	bne.n	80012f8 <MFRC522_ToCard+0x122>
 80012f6:	e070      	b.n	80013da <MFRC522_ToCard+0x204>
  {
    if(!(Read_MFRC522(ErrorReg) & 0x1B))  // BufferOvfl Collerr CRCErr ProtecolErr
 80012f8:	2006      	movs	r0, #6
 80012fa:	f7ff fe87 	bl	800100c <Read_MFRC522>
 80012fe:	0003      	movs	r3, r0
 8001300:	001a      	movs	r2, r3
 8001302:	231b      	movs	r3, #27
 8001304:	4013      	ands	r3, r2
 8001306:	d164      	bne.n	80013d2 <MFRC522_ToCard+0x1fc>
    {
      status = MI_OK;
 8001308:	211f      	movs	r1, #31
 800130a:	187b      	adds	r3, r7, r1
 800130c:	2200      	movs	r2, #0
 800130e:	701a      	strb	r2, [r3, #0]
      if (n & irqEn & 0x01)
 8001310:	231c      	movs	r3, #28
 8001312:	18fb      	adds	r3, r7, r3
 8001314:	221e      	movs	r2, #30
 8001316:	18ba      	adds	r2, r7, r2
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	7812      	ldrb	r2, [r2, #0]
 800131c:	4013      	ands	r3, r2
 800131e:	b2db      	uxtb	r3, r3
 8001320:	001a      	movs	r2, r3
 8001322:	2301      	movs	r3, #1
 8001324:	4013      	ands	r3, r2
 8001326:	d002      	beq.n	800132e <MFRC522_ToCard+0x158>
      {
        status = MI_NOTAGERR;             // ??
 8001328:	187b      	adds	r3, r7, r1
 800132a:	2201      	movs	r2, #1
 800132c:	701a      	strb	r2, [r3, #0]
      }

      if (command == PCD_TRANSCEIVE)
 800132e:	230f      	movs	r3, #15
 8001330:	18fb      	adds	r3, r7, r3
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	2b0c      	cmp	r3, #12
 8001336:	d150      	bne.n	80013da <MFRC522_ToCard+0x204>
      {
        n = Read_MFRC522(FIFOLevelReg);
 8001338:	251c      	movs	r5, #28
 800133a:	197c      	adds	r4, r7, r5
 800133c:	200a      	movs	r0, #10
 800133e:	f7ff fe65 	bl	800100c <Read_MFRC522>
 8001342:	0003      	movs	r3, r0
 8001344:	7023      	strb	r3, [r4, #0]
        lastBits = Read_MFRC522(ControlReg) & 0x07;
 8001346:	200c      	movs	r0, #12
 8001348:	f7ff fe60 	bl	800100c <Read_MFRC522>
 800134c:	0003      	movs	r3, r0
 800134e:	0019      	movs	r1, r3
 8001350:	2017      	movs	r0, #23
 8001352:	183b      	adds	r3, r7, r0
 8001354:	2207      	movs	r2, #7
 8001356:	400a      	ands	r2, r1
 8001358:	701a      	strb	r2, [r3, #0]
        if (lastBits)
 800135a:	0001      	movs	r1, r0
 800135c:	187b      	adds	r3, r7, r1
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d00a      	beq.n	800137a <MFRC522_ToCard+0x1a4>
        {
          *backLen = (n-1)*8 + lastBits;
 8001364:	197b      	adds	r3, r7, r5
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	3b01      	subs	r3, #1
 800136a:	00da      	lsls	r2, r3, #3
 800136c:	187b      	adds	r3, r7, r1
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	18d3      	adds	r3, r2, r3
 8001372:	001a      	movs	r2, r3
 8001374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001376:	601a      	str	r2, [r3, #0]
 8001378:	e006      	b.n	8001388 <MFRC522_ToCard+0x1b2>
        }
        else
        {
          *backLen = n*8;
 800137a:	231c      	movs	r3, #28
 800137c:	18fb      	adds	r3, r7, r3
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	00db      	lsls	r3, r3, #3
 8001382:	001a      	movs	r2, r3
 8001384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001386:	601a      	str	r2, [r3, #0]
        }

        if (n == 0)
 8001388:	221c      	movs	r2, #28
 800138a:	18bb      	adds	r3, r7, r2
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d102      	bne.n	8001398 <MFRC522_ToCard+0x1c2>
        {
          n = 1;
 8001392:	18bb      	adds	r3, r7, r2
 8001394:	2201      	movs	r2, #1
 8001396:	701a      	strb	r2, [r3, #0]
        }
        if (n > MAX_LEN)
 8001398:	221c      	movs	r2, #28
 800139a:	18bb      	adds	r3, r7, r2
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	2b10      	cmp	r3, #16
 80013a0:	d902      	bls.n	80013a8 <MFRC522_ToCard+0x1d2>
        {
          n = MAX_LEN;
 80013a2:	18bb      	adds	r3, r7, r2
 80013a4:	2210      	movs	r2, #16
 80013a6:	701a      	strb	r2, [r3, #0]
        }

        // Reading the received data in FIFO
        for (i=0; i<n; i++)
 80013a8:	2300      	movs	r3, #0
 80013aa:	61bb      	str	r3, [r7, #24]
 80013ac:	e00a      	b.n	80013c4 <MFRC522_ToCard+0x1ee>
        {
          backData[i] = Read_MFRC522(FIFODataReg);
 80013ae:	687a      	ldr	r2, [r7, #4]
 80013b0:	69bb      	ldr	r3, [r7, #24]
 80013b2:	18d4      	adds	r4, r2, r3
 80013b4:	2009      	movs	r0, #9
 80013b6:	f7ff fe29 	bl	800100c <Read_MFRC522>
 80013ba:	0003      	movs	r3, r0
 80013bc:	7023      	strb	r3, [r4, #0]
        for (i=0; i<n; i++)
 80013be:	69bb      	ldr	r3, [r7, #24]
 80013c0:	3301      	adds	r3, #1
 80013c2:	61bb      	str	r3, [r7, #24]
 80013c4:	231c      	movs	r3, #28
 80013c6:	18fb      	adds	r3, r7, r3
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	69ba      	ldr	r2, [r7, #24]
 80013cc:	429a      	cmp	r2, r3
 80013ce:	d3ee      	bcc.n	80013ae <MFRC522_ToCard+0x1d8>
 80013d0:	e003      	b.n	80013da <MFRC522_ToCard+0x204>
        }
      }
    }
    else {
      //printf("~~~ buffer overflow, collerr, crcerr, or protecolerr\r\n");
      status = MI_ERR;
 80013d2:	231f      	movs	r3, #31
 80013d4:	18fb      	adds	r3, r7, r3
 80013d6:	2202      	movs	r2, #2
 80013d8:	701a      	strb	r2, [r3, #0]
  }
  else {
    //printf("~~~ request timed out\r\n");
  }

  return status;
 80013da:	231f      	movs	r3, #31
 80013dc:	18fb      	adds	r3, r7, r3
 80013de:	781b      	ldrb	r3, [r3, #0]
}
 80013e0:	0018      	movs	r0, r3
 80013e2:	46bd      	mov	sp, r7
 80013e4:	b008      	add	sp, #32
 80013e6:	bdb0      	pop	{r4, r5, r7, pc}

080013e8 <MFRC522_Anticoll>:
 * Description: Anti-collision detection, reading selected card serial number card
 * Input parameters: serNum - returns 4 bytes card serial number, the first 5 bytes for the checksum byte
 * Return value: the successful return MI_OK
 */
u_char MFRC522_Anticoll(u_char *serNum)
{
 80013e8:	b5b0      	push	{r4, r5, r7, lr}
 80013ea:	b086      	sub	sp, #24
 80013ec:	af02      	add	r7, sp, #8
 80013ee:	6078      	str	r0, [r7, #4]
  u_char status;
  u_char i;
  u_char serNumCheck=0;
 80013f0:	230d      	movs	r3, #13
 80013f2:	18fb      	adds	r3, r7, r3
 80013f4:	2200      	movs	r2, #0
 80013f6:	701a      	strb	r2, [r3, #0]
  uint unLen;


  //ClearBitMask(Status2Reg, 0x08);		//TempSensclear
  //ClearBitMask(CollReg,0x80);			//ValuesAfterColl
  Write_MFRC522(BitFramingReg, 0x00);		//TxLastBists = BitFramingReg[2..0]
 80013f8:	2100      	movs	r1, #0
 80013fa:	200d      	movs	r0, #13
 80013fc:	f7ff fdd0 	bl	8000fa0 <Write_MFRC522>

  serNum[0] = PICC_ANTICOLL;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2293      	movs	r2, #147	; 0x93
 8001404:	701a      	strb	r2, [r3, #0]
  serNum[1] = 0x20;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	3301      	adds	r3, #1
 800140a:	2220      	movs	r2, #32
 800140c:	701a      	strb	r2, [r3, #0]
  status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 800140e:	250f      	movs	r5, #15
 8001410:	197c      	adds	r4, r7, r5
 8001412:	687a      	ldr	r2, [r7, #4]
 8001414:	6879      	ldr	r1, [r7, #4]
 8001416:	2308      	movs	r3, #8
 8001418:	18fb      	adds	r3, r7, r3
 800141a:	9300      	str	r3, [sp, #0]
 800141c:	0013      	movs	r3, r2
 800141e:	2202      	movs	r2, #2
 8001420:	200c      	movs	r0, #12
 8001422:	f7ff fed8 	bl	80011d6 <MFRC522_ToCard>
 8001426:	0003      	movs	r3, r0
 8001428:	7023      	strb	r3, [r4, #0]

  if (status == MI_OK)
 800142a:	197b      	adds	r3, r7, r5
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d128      	bne.n	8001484 <MFRC522_Anticoll+0x9c>
  {
    //Check card serial number
    for (i=0; i<4; i++)
 8001432:	230e      	movs	r3, #14
 8001434:	18fb      	adds	r3, r7, r3
 8001436:	2200      	movs	r2, #0
 8001438:	701a      	strb	r2, [r3, #0]
 800143a:	e010      	b.n	800145e <MFRC522_Anticoll+0x76>
    {
      serNumCheck ^= serNum[i];
 800143c:	200e      	movs	r0, #14
 800143e:	183b      	adds	r3, r7, r0
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	687a      	ldr	r2, [r7, #4]
 8001444:	18d3      	adds	r3, r2, r3
 8001446:	7819      	ldrb	r1, [r3, #0]
 8001448:	220d      	movs	r2, #13
 800144a:	18bb      	adds	r3, r7, r2
 800144c:	18ba      	adds	r2, r7, r2
 800144e:	7812      	ldrb	r2, [r2, #0]
 8001450:	404a      	eors	r2, r1
 8001452:	701a      	strb	r2, [r3, #0]
    for (i=0; i<4; i++)
 8001454:	183b      	adds	r3, r7, r0
 8001456:	781a      	ldrb	r2, [r3, #0]
 8001458:	183b      	adds	r3, r7, r0
 800145a:	3201      	adds	r2, #1
 800145c:	701a      	strb	r2, [r3, #0]
 800145e:	220e      	movs	r2, #14
 8001460:	18bb      	adds	r3, r7, r2
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	2b03      	cmp	r3, #3
 8001466:	d9e9      	bls.n	800143c <MFRC522_Anticoll+0x54>
    }
    if (serNumCheck != serNum[i])
 8001468:	18bb      	adds	r3, r7, r2
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	687a      	ldr	r2, [r7, #4]
 800146e:	18d3      	adds	r3, r2, r3
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	220d      	movs	r2, #13
 8001474:	18ba      	adds	r2, r7, r2
 8001476:	7812      	ldrb	r2, [r2, #0]
 8001478:	429a      	cmp	r2, r3
 800147a:	d003      	beq.n	8001484 <MFRC522_Anticoll+0x9c>
    {
      status = MI_ERR;
 800147c:	230f      	movs	r3, #15
 800147e:	18fb      	adds	r3, r7, r3
 8001480:	2202      	movs	r2, #2
 8001482:	701a      	strb	r2, [r3, #0]
    }
  }

  //SetBitMask(CollReg, 0x80);		//ValuesAfterColl=1

  return status;
 8001484:	230f      	movs	r3, #15
 8001486:	18fb      	adds	r3, r7, r3
 8001488:	781b      	ldrb	r3, [r3, #0]
}
 800148a:	0018      	movs	r0, r3
 800148c:	46bd      	mov	sp, r7
 800148e:	b004      	add	sp, #16
 8001490:	bdb0      	pop	{r4, r5, r7, pc}

08001492 <MFRC522_Read>:
 * Description: Read block data
 * Input parameters: blockAddr - block address; recvData - read block data
 * Return value: the successful return MI_OK
 */
u_char MFRC522_Read(u_char blockAddr, u_char *recvData)
{
 8001492:	b5b0      	push	{r4, r5, r7, lr}
 8001494:	b086      	sub	sp, #24
 8001496:	af02      	add	r7, sp, #8
 8001498:	0002      	movs	r2, r0
 800149a:	6039      	str	r1, [r7, #0]
 800149c:	1dfb      	adds	r3, r7, #7
 800149e:	701a      	strb	r2, [r3, #0]
  u_char status;
  uint unLen;

  recvData[0] = PICC_READ;
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	2230      	movs	r2, #48	; 0x30
 80014a4:	701a      	strb	r2, [r3, #0]
  recvData[1] = blockAddr;
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	3301      	adds	r3, #1
 80014aa:	1dfa      	adds	r2, r7, #7
 80014ac:	7812      	ldrb	r2, [r2, #0]
 80014ae:	701a      	strb	r2, [r3, #0]
  CalulateCRC(recvData,2, &recvData[2]);
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	1c9a      	adds	r2, r3, #2
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	2102      	movs	r1, #2
 80014b8:	0018      	movs	r0, r3
 80014ba:	f000 f88f 	bl	80015dc <CalulateCRC>
  status = MFRC522_ToCard(PCD_TRANSCEIVE, recvData, 4, recvData, &unLen);
 80014be:	250f      	movs	r5, #15
 80014c0:	197c      	adds	r4, r7, r5
 80014c2:	683a      	ldr	r2, [r7, #0]
 80014c4:	6839      	ldr	r1, [r7, #0]
 80014c6:	2308      	movs	r3, #8
 80014c8:	18fb      	adds	r3, r7, r3
 80014ca:	9300      	str	r3, [sp, #0]
 80014cc:	0013      	movs	r3, r2
 80014ce:	2204      	movs	r2, #4
 80014d0:	200c      	movs	r0, #12
 80014d2:	f7ff fe80 	bl	80011d6 <MFRC522_ToCard>
 80014d6:	0003      	movs	r3, r0
 80014d8:	7023      	strb	r3, [r4, #0]

  if ((status != MI_OK) || (unLen != 0x90))
 80014da:	197b      	adds	r3, r7, r5
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d102      	bne.n	80014e8 <MFRC522_Read+0x56>
 80014e2:	68bb      	ldr	r3, [r7, #8]
 80014e4:	2b90      	cmp	r3, #144	; 0x90
 80014e6:	d003      	beq.n	80014f0 <MFRC522_Read+0x5e>
  {
    status = MI_ERR;
 80014e8:	230f      	movs	r3, #15
 80014ea:	18fb      	adds	r3, r7, r3
 80014ec:	2202      	movs	r2, #2
 80014ee:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80014f0:	230f      	movs	r3, #15
 80014f2:	18fb      	adds	r3, r7, r3
 80014f4:	781b      	ldrb	r3, [r3, #0]
}
 80014f6:	0018      	movs	r0, r3
 80014f8:	46bd      	mov	sp, r7
 80014fa:	b004      	add	sp, #16
 80014fc:	bdb0      	pop	{r4, r5, r7, pc}

080014fe <MFRC522_Write>:
 * Description: Write block data
 * Input parameters: blockAddr - block address; writeData - to 16-byte data block write
 * Return value: the successful return MI_OK
 */
u_char MFRC522_Write(u_char blockAddr, u_char *writeData)
{
 80014fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001500:	b08d      	sub	sp, #52	; 0x34
 8001502:	af02      	add	r7, sp, #8
 8001504:	0002      	movs	r2, r0
 8001506:	6039      	str	r1, [r7, #0]
 8001508:	1dfb      	adds	r3, r7, #7
 800150a:	701a      	strb	r2, [r3, #0]
  u_char status;
  uint recvBits;
  u_char i;
  u_char buff[18];

  buff[0] = PICC_WRITE;
 800150c:	250c      	movs	r5, #12
 800150e:	197b      	adds	r3, r7, r5
 8001510:	22a0      	movs	r2, #160	; 0xa0
 8001512:	701a      	strb	r2, [r3, #0]
  buff[1] = blockAddr;
 8001514:	197b      	adds	r3, r7, r5
 8001516:	1dfa      	adds	r2, r7, #7
 8001518:	7812      	ldrb	r2, [r2, #0]
 800151a:	705a      	strb	r2, [r3, #1]
  CalulateCRC(buff, 2, &buff[2]);
 800151c:	197b      	adds	r3, r7, r5
 800151e:	1c9a      	adds	r2, r3, #2
 8001520:	197b      	adds	r3, r7, r5
 8001522:	2102      	movs	r1, #2
 8001524:	0018      	movs	r0, r3
 8001526:	f000 f859 	bl	80015dc <CalulateCRC>
  status = MFRC522_ToCard(PCD_TRANSCEIVE, buff, 4, buff, &recvBits);
 800152a:	2627      	movs	r6, #39	; 0x27
 800152c:	19bc      	adds	r4, r7, r6
 800152e:	197a      	adds	r2, r7, r5
 8001530:	1979      	adds	r1, r7, r5
 8001532:	2320      	movs	r3, #32
 8001534:	18fb      	adds	r3, r7, r3
 8001536:	9300      	str	r3, [sp, #0]
 8001538:	0013      	movs	r3, r2
 800153a:	2204      	movs	r2, #4
 800153c:	200c      	movs	r0, #12
 800153e:	f7ff fe4a 	bl	80011d6 <MFRC522_ToCard>
 8001542:	0003      	movs	r3, r0
 8001544:	7023      	strb	r3, [r4, #0]

  if ((status != MI_OK))// || (recvBits != 4) || ((buff[0] & 0x0F) != 0x0A))
 8001546:	19bb      	adds	r3, r7, r6
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d002      	beq.n	8001554 <MFRC522_Write+0x56>
  {
    status = MI_ERR;
 800154e:	19bb      	adds	r3, r7, r6
 8001550:	2202      	movs	r2, #2
 8001552:	701a      	strb	r2, [r3, #0]
  }

  if (status == MI_OK)
 8001554:	2327      	movs	r3, #39	; 0x27
 8001556:	18fb      	adds	r3, r7, r3
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d137      	bne.n	80015ce <MFRC522_Write+0xd0>
  {
    for (i=0; i<16; i++)		//Data to the FIFO write 16Byte
 800155e:	2326      	movs	r3, #38	; 0x26
 8001560:	18fb      	adds	r3, r7, r3
 8001562:	2200      	movs	r2, #0
 8001564:	701a      	strb	r2, [r3, #0]
 8001566:	e00f      	b.n	8001588 <MFRC522_Write+0x8a>
    {
      buff[i] = *(writeData+i);
 8001568:	2026      	movs	r0, #38	; 0x26
 800156a:	183b      	adds	r3, r7, r0
 800156c:	781b      	ldrb	r3, [r3, #0]
 800156e:	683a      	ldr	r2, [r7, #0]
 8001570:	18d2      	adds	r2, r2, r3
 8001572:	183b      	adds	r3, r7, r0
 8001574:	781b      	ldrb	r3, [r3, #0]
 8001576:	7811      	ldrb	r1, [r2, #0]
 8001578:	220c      	movs	r2, #12
 800157a:	18ba      	adds	r2, r7, r2
 800157c:	54d1      	strb	r1, [r2, r3]
    for (i=0; i<16; i++)		//Data to the FIFO write 16Byte
 800157e:	183b      	adds	r3, r7, r0
 8001580:	781a      	ldrb	r2, [r3, #0]
 8001582:	183b      	adds	r3, r7, r0
 8001584:	3201      	adds	r2, #1
 8001586:	701a      	strb	r2, [r3, #0]
 8001588:	2326      	movs	r3, #38	; 0x26
 800158a:	18fb      	adds	r3, r7, r3
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	2b0f      	cmp	r3, #15
 8001590:	d9ea      	bls.n	8001568 <MFRC522_Write+0x6a>
    }
    CalulateCRC(buff, 16, &buff[16]);
 8001592:	250c      	movs	r5, #12
 8001594:	197b      	adds	r3, r7, r5
 8001596:	3310      	adds	r3, #16
 8001598:	001a      	movs	r2, r3
 800159a:	197b      	adds	r3, r7, r5
 800159c:	2110      	movs	r1, #16
 800159e:	0018      	movs	r0, r3
 80015a0:	f000 f81c 	bl	80015dc <CalulateCRC>
    status = MFRC522_ToCard(PCD_TRANSCEIVE, buff, 18, buff, &recvBits);
 80015a4:	2627      	movs	r6, #39	; 0x27
 80015a6:	19bc      	adds	r4, r7, r6
 80015a8:	197a      	adds	r2, r7, r5
 80015aa:	1979      	adds	r1, r7, r5
 80015ac:	2320      	movs	r3, #32
 80015ae:	18fb      	adds	r3, r7, r3
 80015b0:	9300      	str	r3, [sp, #0]
 80015b2:	0013      	movs	r3, r2
 80015b4:	2212      	movs	r2, #18
 80015b6:	200c      	movs	r0, #12
 80015b8:	f7ff fe0d 	bl	80011d6 <MFRC522_ToCard>
 80015bc:	0003      	movs	r3, r0
 80015be:	7023      	strb	r3, [r4, #0]

    if ((status != MI_OK))// || (recvBits != 4) || ((buff[0] & 0x0F) != 0x0A))
 80015c0:	19bb      	adds	r3, r7, r6
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d002      	beq.n	80015ce <MFRC522_Write+0xd0>
    {
      status = MI_ERR;
 80015c8:	19bb      	adds	r3, r7, r6
 80015ca:	2202      	movs	r2, #2
 80015cc:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 80015ce:	2327      	movs	r3, #39	; 0x27
 80015d0:	18fb      	adds	r3, r7, r3
 80015d2:	781b      	ldrb	r3, [r3, #0]
}
 80015d4:	0018      	movs	r0, r3
 80015d6:	46bd      	mov	sp, r7
 80015d8:	b00b      	add	sp, #44	; 0x2c
 80015da:	bdf0      	pop	{r4, r5, r6, r7, pc}

080015dc <CalulateCRC>:
 * Description: CRC calculation with MF522
 * Input parameters: pIndata - To read the CRC data, len - the data length, pOutData - CRC calculation results
 * Return value: None
 */
void CalulateCRC(u_char *pIndata, u_char len, u_char *pOutData)
{
 80015dc:	b5b0      	push	{r4, r5, r7, lr}
 80015de:	b086      	sub	sp, #24
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	60f8      	str	r0, [r7, #12]
 80015e4:	607a      	str	r2, [r7, #4]
 80015e6:	230b      	movs	r3, #11
 80015e8:	18fb      	adds	r3, r7, r3
 80015ea:	1c0a      	adds	r2, r1, #0
 80015ec:	701a      	strb	r2, [r3, #0]
  u_char i, n;

  ClearBitMask(DivIrqReg, 0x04);			//CRCIrq = 0
 80015ee:	2104      	movs	r1, #4
 80015f0:	2005      	movs	r0, #5
 80015f2:	f7ff fd67 	bl	80010c4 <ClearBitMask>
  SetBitMask(FIFOLevelReg, 0x80);			//Clear the FIFO pointer
 80015f6:	2180      	movs	r1, #128	; 0x80
 80015f8:	200a      	movs	r0, #10
 80015fa:	f7ff fd41 	bl	8001080 <SetBitMask>
  //Write_MFRC522(CommandReg, PCD_IDLE);

  //Writing data to the FIFO
  for (i=0; i<len; i++)
 80015fe:	2317      	movs	r3, #23
 8001600:	18fb      	adds	r3, r7, r3
 8001602:	2200      	movs	r2, #0
 8001604:	701a      	strb	r2, [r3, #0]
 8001606:	e00e      	b.n	8001626 <CalulateCRC+0x4a>
  {
    Write_MFRC522(FIFODataReg, *(pIndata+i));
 8001608:	2417      	movs	r4, #23
 800160a:	193b      	adds	r3, r7, r4
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	68fa      	ldr	r2, [r7, #12]
 8001610:	18d3      	adds	r3, r2, r3
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	0019      	movs	r1, r3
 8001616:	2009      	movs	r0, #9
 8001618:	f7ff fcc2 	bl	8000fa0 <Write_MFRC522>
  for (i=0; i<len; i++)
 800161c:	193b      	adds	r3, r7, r4
 800161e:	781a      	ldrb	r2, [r3, #0]
 8001620:	193b      	adds	r3, r7, r4
 8001622:	3201      	adds	r2, #1
 8001624:	701a      	strb	r2, [r3, #0]
 8001626:	2417      	movs	r4, #23
 8001628:	193a      	adds	r2, r7, r4
 800162a:	230b      	movs	r3, #11
 800162c:	18fb      	adds	r3, r7, r3
 800162e:	7812      	ldrb	r2, [r2, #0]
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	429a      	cmp	r2, r3
 8001634:	d3e8      	bcc.n	8001608 <CalulateCRC+0x2c>
  }
  Write_MFRC522(CommandReg, PCD_CALCCRC);
 8001636:	2103      	movs	r1, #3
 8001638:	2001      	movs	r0, #1
 800163a:	f7ff fcb1 	bl	8000fa0 <Write_MFRC522>

  //Wait CRC calculation is complete
  i = 0xFF;
 800163e:	193b      	adds	r3, r7, r4
 8001640:	22ff      	movs	r2, #255	; 0xff
 8001642:	701a      	strb	r2, [r3, #0]
  do
  {
    n = Read_MFRC522(DivIrqReg);
 8001644:	2516      	movs	r5, #22
 8001646:	197c      	adds	r4, r7, r5
 8001648:	2005      	movs	r0, #5
 800164a:	f7ff fcdf 	bl	800100c <Read_MFRC522>
 800164e:	0003      	movs	r3, r0
 8001650:	7023      	strb	r3, [r4, #0]
    i--;
 8001652:	2117      	movs	r1, #23
 8001654:	187b      	adds	r3, r7, r1
 8001656:	781a      	ldrb	r2, [r3, #0]
 8001658:	187b      	adds	r3, r7, r1
 800165a:	3a01      	subs	r2, #1
 800165c:	701a      	strb	r2, [r3, #0]
  }
  while ((i!=0) && !(n&0x04));			//CRCIrq = 1
 800165e:	187b      	adds	r3, r7, r1
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d004      	beq.n	8001670 <CalulateCRC+0x94>
 8001666:	197b      	adds	r3, r7, r5
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	2204      	movs	r2, #4
 800166c:	4013      	ands	r3, r2
 800166e:	d0e9      	beq.n	8001644 <CalulateCRC+0x68>

  //Read CRC calculation result
  pOutData[0] = Read_MFRC522(CRCResultRegL);
 8001670:	2022      	movs	r0, #34	; 0x22
 8001672:	f7ff fccb 	bl	800100c <Read_MFRC522>
 8001676:	0003      	movs	r3, r0
 8001678:	001a      	movs	r2, r3
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	701a      	strb	r2, [r3, #0]
  pOutData[1] = Read_MFRC522(CRCResultRegM);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	1c5c      	adds	r4, r3, #1
 8001682:	2021      	movs	r0, #33	; 0x21
 8001684:	f7ff fcc2 	bl	800100c <Read_MFRC522>
 8001688:	0003      	movs	r3, r0
 800168a:	7023      	strb	r3, [r4, #0]
}
 800168c:	46c0      	nop			; (mov r8, r8)
 800168e:	46bd      	mov	sp, r7
 8001690:	b006      	add	sp, #24
 8001692:	bdb0      	pop	{r4, r5, r7, pc}

08001694 <MFRC522_Auth>:
             Sectorkey--Sector password
             serNum--Card serial number, 4-byte
 * Return value: the successful return MI_OK
 */
u_char MFRC522_Auth(u_char authMode, u_char BlockAddr, u_char *Sectorkey, u_char *serNum)
{
 8001694:	b5b0      	push	{r4, r5, r7, lr}
 8001696:	b08c      	sub	sp, #48	; 0x30
 8001698:	af02      	add	r7, sp, #8
 800169a:	60ba      	str	r2, [r7, #8]
 800169c:	607b      	str	r3, [r7, #4]
 800169e:	240f      	movs	r4, #15
 80016a0:	193b      	adds	r3, r7, r4
 80016a2:	1c02      	adds	r2, r0, #0
 80016a4:	701a      	strb	r2, [r3, #0]
 80016a6:	200e      	movs	r0, #14
 80016a8:	183b      	adds	r3, r7, r0
 80016aa:	1c0a      	adds	r2, r1, #0
 80016ac:	701a      	strb	r2, [r3, #0]
  uint recvBits;
  u_char i;
  u_char buff[12];

  //Verify the command block address + sector + password + card serial number
  buff[0] = authMode;
 80016ae:	2114      	movs	r1, #20
 80016b0:	187b      	adds	r3, r7, r1
 80016b2:	193a      	adds	r2, r7, r4
 80016b4:	7812      	ldrb	r2, [r2, #0]
 80016b6:	701a      	strb	r2, [r3, #0]
  buff[1] = BlockAddr;
 80016b8:	187b      	adds	r3, r7, r1
 80016ba:	183a      	adds	r2, r7, r0
 80016bc:	7812      	ldrb	r2, [r2, #0]
 80016be:	705a      	strb	r2, [r3, #1]
  for (i=0; i<6; i++)
 80016c0:	2326      	movs	r3, #38	; 0x26
 80016c2:	18fb      	adds	r3, r7, r3
 80016c4:	2200      	movs	r2, #0
 80016c6:	701a      	strb	r2, [r3, #0]
 80016c8:	e010      	b.n	80016ec <MFRC522_Auth+0x58>
  {
    buff[i+2] = *(Sectorkey+i);
 80016ca:	2026      	movs	r0, #38	; 0x26
 80016cc:	183b      	adds	r3, r7, r0
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	68ba      	ldr	r2, [r7, #8]
 80016d2:	18d2      	adds	r2, r2, r3
 80016d4:	183b      	adds	r3, r7, r0
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	3302      	adds	r3, #2
 80016da:	7811      	ldrb	r1, [r2, #0]
 80016dc:	2214      	movs	r2, #20
 80016de:	18ba      	adds	r2, r7, r2
 80016e0:	54d1      	strb	r1, [r2, r3]
  for (i=0; i<6; i++)
 80016e2:	183b      	adds	r3, r7, r0
 80016e4:	781a      	ldrb	r2, [r3, #0]
 80016e6:	183b      	adds	r3, r7, r0
 80016e8:	3201      	adds	r2, #1
 80016ea:	701a      	strb	r2, [r3, #0]
 80016ec:	2226      	movs	r2, #38	; 0x26
 80016ee:	18bb      	adds	r3, r7, r2
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	2b05      	cmp	r3, #5
 80016f4:	d9e9      	bls.n	80016ca <MFRC522_Auth+0x36>
  }
  for (i=0; i<4; i++)
 80016f6:	18bb      	adds	r3, r7, r2
 80016f8:	2200      	movs	r2, #0
 80016fa:	701a      	strb	r2, [r3, #0]
 80016fc:	e010      	b.n	8001720 <MFRC522_Auth+0x8c>
  {
    buff[i+8] = *(serNum+i);
 80016fe:	2026      	movs	r0, #38	; 0x26
 8001700:	183b      	adds	r3, r7, r0
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	687a      	ldr	r2, [r7, #4]
 8001706:	18d2      	adds	r2, r2, r3
 8001708:	183b      	adds	r3, r7, r0
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	3308      	adds	r3, #8
 800170e:	7811      	ldrb	r1, [r2, #0]
 8001710:	2214      	movs	r2, #20
 8001712:	18ba      	adds	r2, r7, r2
 8001714:	54d1      	strb	r1, [r2, r3]
  for (i=0; i<4; i++)
 8001716:	183b      	adds	r3, r7, r0
 8001718:	781a      	ldrb	r2, [r3, #0]
 800171a:	183b      	adds	r3, r7, r0
 800171c:	3201      	adds	r2, #1
 800171e:	701a      	strb	r2, [r3, #0]
 8001720:	2326      	movs	r3, #38	; 0x26
 8001722:	18fb      	adds	r3, r7, r3
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	2b03      	cmp	r3, #3
 8001728:	d9e9      	bls.n	80016fe <MFRC522_Auth+0x6a>
  }
  status = MFRC522_ToCard(PCD_AUTHENT, buff, 12, buff, &recvBits);
 800172a:	2527      	movs	r5, #39	; 0x27
 800172c:	197c      	adds	r4, r7, r5
 800172e:	2314      	movs	r3, #20
 8001730:	18fa      	adds	r2, r7, r3
 8001732:	18f9      	adds	r1, r7, r3
 8001734:	2320      	movs	r3, #32
 8001736:	18fb      	adds	r3, r7, r3
 8001738:	9300      	str	r3, [sp, #0]
 800173a:	0013      	movs	r3, r2
 800173c:	220c      	movs	r2, #12
 800173e:	200e      	movs	r0, #14
 8001740:	f7ff fd49 	bl	80011d6 <MFRC522_ToCard>
 8001744:	0003      	movs	r3, r0
 8001746:	7023      	strb	r3, [r4, #0]

  if ((status != MI_OK) || (!(Read_MFRC522(Status2Reg) & 0x08)))
 8001748:	197b      	adds	r3, r7, r5
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d107      	bne.n	8001760 <MFRC522_Auth+0xcc>
 8001750:	2008      	movs	r0, #8
 8001752:	f7ff fc5b 	bl	800100c <Read_MFRC522>
 8001756:	0003      	movs	r3, r0
 8001758:	001a      	movs	r2, r3
 800175a:	2308      	movs	r3, #8
 800175c:	4013      	ands	r3, r2
 800175e:	d103      	bne.n	8001768 <MFRC522_Auth+0xd4>
  {
    status = MI_ERR;
 8001760:	2327      	movs	r3, #39	; 0x27
 8001762:	18fb      	adds	r3, r7, r3
 8001764:	2202      	movs	r2, #2
 8001766:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8001768:	2327      	movs	r3, #39	; 0x27
 800176a:	18fb      	adds	r3, r7, r3
 800176c:	781b      	ldrb	r3, [r3, #0]
}
 800176e:	0018      	movs	r0, r3
 8001770:	46bd      	mov	sp, r7
 8001772:	b00a      	add	sp, #40	; 0x28
 8001774:	bdb0      	pop	{r4, r5, r7, pc}

08001776 <MFRC522_SelectTag>:
 * Description: election card, read the card memory capacity
 * Input parameters: serNum - Incoming card serial number
 * Return value: the successful return of card capacity
 */
u_char MFRC522_SelectTag(u_char *serNum)
{
 8001776:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001778:	b08b      	sub	sp, #44	; 0x2c
 800177a:	af02      	add	r7, sp, #8
 800177c:	6078      	str	r0, [r7, #4]
  uint recvBits;
  u_char buffer[9];

  //ClearBitMask(Status2Reg, 0x08);			//MFCrypto1On=0

  buffer[0] = PICC_SElECTTAG;
 800177e:	210c      	movs	r1, #12
 8001780:	187b      	adds	r3, r7, r1
 8001782:	2293      	movs	r2, #147	; 0x93
 8001784:	701a      	strb	r2, [r3, #0]
  buffer[1] = 0x70;
 8001786:	187b      	adds	r3, r7, r1
 8001788:	2270      	movs	r2, #112	; 0x70
 800178a:	705a      	strb	r2, [r3, #1]
  for (i=0; i<5; i++)
 800178c:	231f      	movs	r3, #31
 800178e:	18fb      	adds	r3, r7, r3
 8001790:	2200      	movs	r2, #0
 8001792:	701a      	strb	r2, [r3, #0]
 8001794:	e010      	b.n	80017b8 <MFRC522_SelectTag+0x42>
  {
    buffer[i+2] = *(serNum+i);
 8001796:	201f      	movs	r0, #31
 8001798:	183b      	adds	r3, r7, r0
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	687a      	ldr	r2, [r7, #4]
 800179e:	18d2      	adds	r2, r2, r3
 80017a0:	183b      	adds	r3, r7, r0
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	3302      	adds	r3, #2
 80017a6:	7811      	ldrb	r1, [r2, #0]
 80017a8:	220c      	movs	r2, #12
 80017aa:	18ba      	adds	r2, r7, r2
 80017ac:	54d1      	strb	r1, [r2, r3]
  for (i=0; i<5; i++)
 80017ae:	183b      	adds	r3, r7, r0
 80017b0:	781a      	ldrb	r2, [r3, #0]
 80017b2:	183b      	adds	r3, r7, r0
 80017b4:	3201      	adds	r2, #1
 80017b6:	701a      	strb	r2, [r3, #0]
 80017b8:	231f      	movs	r3, #31
 80017ba:	18fb      	adds	r3, r7, r3
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	2b04      	cmp	r3, #4
 80017c0:	d9e9      	bls.n	8001796 <MFRC522_SelectTag+0x20>
  }
  CalulateCRC(buffer, 7, &buffer[7]);		//??
 80017c2:	250c      	movs	r5, #12
 80017c4:	197b      	adds	r3, r7, r5
 80017c6:	1dda      	adds	r2, r3, #7
 80017c8:	197b      	adds	r3, r7, r5
 80017ca:	2107      	movs	r1, #7
 80017cc:	0018      	movs	r0, r3
 80017ce:	f7ff ff05 	bl	80015dc <CalulateCRC>
  status = MFRC522_ToCard(PCD_TRANSCEIVE, buffer, 9, buffer, &recvBits);
 80017d2:	261d      	movs	r6, #29
 80017d4:	19bc      	adds	r4, r7, r6
 80017d6:	197a      	adds	r2, r7, r5
 80017d8:	1979      	adds	r1, r7, r5
 80017da:	2318      	movs	r3, #24
 80017dc:	18fb      	adds	r3, r7, r3
 80017de:	9300      	str	r3, [sp, #0]
 80017e0:	0013      	movs	r3, r2
 80017e2:	2209      	movs	r2, #9
 80017e4:	200c      	movs	r0, #12
 80017e6:	f7ff fcf6 	bl	80011d6 <MFRC522_ToCard>
 80017ea:	0003      	movs	r3, r0
 80017ec:	7023      	strb	r3, [r4, #0]

  if ((status == MI_OK) && (recvBits == 0x18))
 80017ee:	19bb      	adds	r3, r7, r6
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d108      	bne.n	8001808 <MFRC522_SelectTag+0x92>
 80017f6:	69bb      	ldr	r3, [r7, #24]
 80017f8:	2b18      	cmp	r3, #24
 80017fa:	d105      	bne.n	8001808 <MFRC522_SelectTag+0x92>
  {
    size = buffer[0];
 80017fc:	231e      	movs	r3, #30
 80017fe:	18fb      	adds	r3, r7, r3
 8001800:	197a      	adds	r2, r7, r5
 8001802:	7812      	ldrb	r2, [r2, #0]
 8001804:	701a      	strb	r2, [r3, #0]
 8001806:	e003      	b.n	8001810 <MFRC522_SelectTag+0x9a>
  }
  else
  {
    size = 0;
 8001808:	231e      	movs	r3, #30
 800180a:	18fb      	adds	r3, r7, r3
 800180c:	2200      	movs	r2, #0
 800180e:	701a      	strb	r2, [r3, #0]
  }

  return size;
 8001810:	231e      	movs	r3, #30
 8001812:	18fb      	adds	r3, r7, r3
 8001814:	781b      	ldrb	r3, [r3, #0]
}
 8001816:	0018      	movs	r0, r3
 8001818:	46bd      	mov	sp, r7
 800181a:	b009      	add	sp, #36	; 0x24
 800181c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800181e <MFRC522_Halt>:
 * Description: Command card into hibernation
 * Input: None
 * Return value: None
 */
void MFRC522_Halt(void)
{
 800181e:	b590      	push	{r4, r7, lr}
 8001820:	b087      	sub	sp, #28
 8001822:	af02      	add	r7, sp, #8
  u_char status;
  uint unLen;
  u_char buff[4];

  buff[0] = PICC_HALT;
 8001824:	1d3b      	adds	r3, r7, #4
 8001826:	2250      	movs	r2, #80	; 0x50
 8001828:	701a      	strb	r2, [r3, #0]
  buff[1] = 0;
 800182a:	1d3b      	adds	r3, r7, #4
 800182c:	2200      	movs	r2, #0
 800182e:	705a      	strb	r2, [r3, #1]
  CalulateCRC(buff, 2, &buff[2]);
 8001830:	1d3b      	adds	r3, r7, #4
 8001832:	1c9a      	adds	r2, r3, #2
 8001834:	1d3b      	adds	r3, r7, #4
 8001836:	2102      	movs	r1, #2
 8001838:	0018      	movs	r0, r3
 800183a:	f7ff fecf 	bl	80015dc <CalulateCRC>

  status = MFRC522_ToCard(PCD_TRANSCEIVE, buff, 4, buff,&unLen);
 800183e:	230f      	movs	r3, #15
 8001840:	18fc      	adds	r4, r7, r3
 8001842:	1d3a      	adds	r2, r7, #4
 8001844:	1d39      	adds	r1, r7, #4
 8001846:	2308      	movs	r3, #8
 8001848:	18fb      	adds	r3, r7, r3
 800184a:	9300      	str	r3, [sp, #0]
 800184c:	0013      	movs	r3, r2
 800184e:	2204      	movs	r2, #4
 8001850:	200c      	movs	r0, #12
 8001852:	f7ff fcc0 	bl	80011d6 <MFRC522_ToCard>
 8001856:	0003      	movs	r3, r0
 8001858:	7023      	strb	r3, [r4, #0]
  //return status;
}
 800185a:	46c0      	nop			; (mov r8, r8)
 800185c:	46bd      	mov	sp, r7
 800185e:	b005      	add	sp, #20
 8001860:	bd90      	pop	{r4, r7, pc}
	...

08001864 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800186a:	4b0f      	ldr	r3, [pc, #60]	; (80018a8 <HAL_MspInit+0x44>)
 800186c:	699a      	ldr	r2, [r3, #24]
 800186e:	4b0e      	ldr	r3, [pc, #56]	; (80018a8 <HAL_MspInit+0x44>)
 8001870:	2101      	movs	r1, #1
 8001872:	430a      	orrs	r2, r1
 8001874:	619a      	str	r2, [r3, #24]
 8001876:	4b0c      	ldr	r3, [pc, #48]	; (80018a8 <HAL_MspInit+0x44>)
 8001878:	699b      	ldr	r3, [r3, #24]
 800187a:	2201      	movs	r2, #1
 800187c:	4013      	ands	r3, r2
 800187e:	607b      	str	r3, [r7, #4]
 8001880:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001882:	4b09      	ldr	r3, [pc, #36]	; (80018a8 <HAL_MspInit+0x44>)
 8001884:	69da      	ldr	r2, [r3, #28]
 8001886:	4b08      	ldr	r3, [pc, #32]	; (80018a8 <HAL_MspInit+0x44>)
 8001888:	2180      	movs	r1, #128	; 0x80
 800188a:	0549      	lsls	r1, r1, #21
 800188c:	430a      	orrs	r2, r1
 800188e:	61da      	str	r2, [r3, #28]
 8001890:	4b05      	ldr	r3, [pc, #20]	; (80018a8 <HAL_MspInit+0x44>)
 8001892:	69da      	ldr	r2, [r3, #28]
 8001894:	2380      	movs	r3, #128	; 0x80
 8001896:	055b      	lsls	r3, r3, #21
 8001898:	4013      	ands	r3, r2
 800189a:	603b      	str	r3, [r7, #0]
 800189c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800189e:	46c0      	nop			; (mov r8, r8)
 80018a0:	46bd      	mov	sp, r7
 80018a2:	b002      	add	sp, #8
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	46c0      	nop			; (mov r8, r8)
 80018a8:	40021000 	.word	0x40021000

080018ac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80018ac:	b590      	push	{r4, r7, lr}
 80018ae:	b08b      	sub	sp, #44	; 0x2c
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b4:	2414      	movs	r4, #20
 80018b6:	193b      	adds	r3, r7, r4
 80018b8:	0018      	movs	r0, r3
 80018ba:	2314      	movs	r3, #20
 80018bc:	001a      	movs	r2, r3
 80018be:	2100      	movs	r1, #0
 80018c0:	f001 ff2e 	bl	8003720 <memset>
  if(hspi->Instance==SPI1)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a1c      	ldr	r2, [pc, #112]	; (800193c <HAL_SPI_MspInit+0x90>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d132      	bne.n	8001934 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80018ce:	4b1c      	ldr	r3, [pc, #112]	; (8001940 <HAL_SPI_MspInit+0x94>)
 80018d0:	699a      	ldr	r2, [r3, #24]
 80018d2:	4b1b      	ldr	r3, [pc, #108]	; (8001940 <HAL_SPI_MspInit+0x94>)
 80018d4:	2180      	movs	r1, #128	; 0x80
 80018d6:	0149      	lsls	r1, r1, #5
 80018d8:	430a      	orrs	r2, r1
 80018da:	619a      	str	r2, [r3, #24]
 80018dc:	4b18      	ldr	r3, [pc, #96]	; (8001940 <HAL_SPI_MspInit+0x94>)
 80018de:	699a      	ldr	r2, [r3, #24]
 80018e0:	2380      	movs	r3, #128	; 0x80
 80018e2:	015b      	lsls	r3, r3, #5
 80018e4:	4013      	ands	r3, r2
 80018e6:	613b      	str	r3, [r7, #16]
 80018e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ea:	4b15      	ldr	r3, [pc, #84]	; (8001940 <HAL_SPI_MspInit+0x94>)
 80018ec:	695a      	ldr	r2, [r3, #20]
 80018ee:	4b14      	ldr	r3, [pc, #80]	; (8001940 <HAL_SPI_MspInit+0x94>)
 80018f0:	2180      	movs	r1, #128	; 0x80
 80018f2:	0289      	lsls	r1, r1, #10
 80018f4:	430a      	orrs	r2, r1
 80018f6:	615a      	str	r2, [r3, #20]
 80018f8:	4b11      	ldr	r3, [pc, #68]	; (8001940 <HAL_SPI_MspInit+0x94>)
 80018fa:	695a      	ldr	r2, [r3, #20]
 80018fc:	2380      	movs	r3, #128	; 0x80
 80018fe:	029b      	lsls	r3, r3, #10
 8001900:	4013      	ands	r3, r2
 8001902:	60fb      	str	r3, [r7, #12]
 8001904:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001906:	0021      	movs	r1, r4
 8001908:	187b      	adds	r3, r7, r1
 800190a:	22e0      	movs	r2, #224	; 0xe0
 800190c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800190e:	187b      	adds	r3, r7, r1
 8001910:	2202      	movs	r2, #2
 8001912:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001914:	187b      	adds	r3, r7, r1
 8001916:	2200      	movs	r2, #0
 8001918:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800191a:	187b      	adds	r3, r7, r1
 800191c:	2203      	movs	r2, #3
 800191e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001920:	187b      	adds	r3, r7, r1
 8001922:	2200      	movs	r2, #0
 8001924:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001926:	187a      	adds	r2, r7, r1
 8001928:	2390      	movs	r3, #144	; 0x90
 800192a:	05db      	lsls	r3, r3, #23
 800192c:	0011      	movs	r1, r2
 800192e:	0018      	movs	r0, r3
 8001930:	f000 f9c2 	bl	8001cb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001934:	46c0      	nop			; (mov r8, r8)
 8001936:	46bd      	mov	sp, r7
 8001938:	b00b      	add	sp, #44	; 0x2c
 800193a:	bd90      	pop	{r4, r7, pc}
 800193c:	40013000 	.word	0x40013000
 8001940:	40021000 	.word	0x40021000

08001944 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001948:	e7fe      	b.n	8001948 <NMI_Handler+0x4>

0800194a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800194a:	b580      	push	{r7, lr}
 800194c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800194e:	e7fe      	b.n	800194e <HardFault_Handler+0x4>

08001950 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001954:	46c0      	nop			; (mov r8, r8)
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}

0800195a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800195a:	b580      	push	{r7, lr}
 800195c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800195e:	46c0      	nop			; (mov r8, r8)
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}

08001964 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001968:	f000 f8b2 	bl	8001ad0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800196c:	46c0      	nop			; (mov r8, r8)
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
	...

08001974 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b086      	sub	sp, #24
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800197c:	4a14      	ldr	r2, [pc, #80]	; (80019d0 <_sbrk+0x5c>)
 800197e:	4b15      	ldr	r3, [pc, #84]	; (80019d4 <_sbrk+0x60>)
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001988:	4b13      	ldr	r3, [pc, #76]	; (80019d8 <_sbrk+0x64>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d102      	bne.n	8001996 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001990:	4b11      	ldr	r3, [pc, #68]	; (80019d8 <_sbrk+0x64>)
 8001992:	4a12      	ldr	r2, [pc, #72]	; (80019dc <_sbrk+0x68>)
 8001994:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001996:	4b10      	ldr	r3, [pc, #64]	; (80019d8 <_sbrk+0x64>)
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	18d3      	adds	r3, r2, r3
 800199e:	693a      	ldr	r2, [r7, #16]
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d207      	bcs.n	80019b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019a4:	f001 fe92 	bl	80036cc <__errno>
 80019a8:	0003      	movs	r3, r0
 80019aa:	220c      	movs	r2, #12
 80019ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019ae:	2301      	movs	r3, #1
 80019b0:	425b      	negs	r3, r3
 80019b2:	e009      	b.n	80019c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019b4:	4b08      	ldr	r3, [pc, #32]	; (80019d8 <_sbrk+0x64>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019ba:	4b07      	ldr	r3, [pc, #28]	; (80019d8 <_sbrk+0x64>)
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	18d2      	adds	r2, r2, r3
 80019c2:	4b05      	ldr	r3, [pc, #20]	; (80019d8 <_sbrk+0x64>)
 80019c4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80019c6:	68fb      	ldr	r3, [r7, #12]
}
 80019c8:	0018      	movs	r0, r3
 80019ca:	46bd      	mov	sp, r7
 80019cc:	b006      	add	sp, #24
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	20001000 	.word	0x20001000
 80019d4:	00000400 	.word	0x00000400
 80019d8:	20000140 	.word	0x20000140
 80019dc:	20000158 	.word	0x20000158

080019e0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80019e4:	46c0      	nop			; (mov r8, r8)
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
	...

080019ec <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80019ec:	480d      	ldr	r0, [pc, #52]	; (8001a24 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80019ee:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80019f0:	f7ff fff6 	bl	80019e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019f4:	480c      	ldr	r0, [pc, #48]	; (8001a28 <LoopForever+0x6>)
  ldr r1, =_edata
 80019f6:	490d      	ldr	r1, [pc, #52]	; (8001a2c <LoopForever+0xa>)
  ldr r2, =_sidata
 80019f8:	4a0d      	ldr	r2, [pc, #52]	; (8001a30 <LoopForever+0xe>)
  movs r3, #0
 80019fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019fc:	e002      	b.n	8001a04 <LoopCopyDataInit>

080019fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a02:	3304      	adds	r3, #4

08001a04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a08:	d3f9      	bcc.n	80019fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a0a:	4a0a      	ldr	r2, [pc, #40]	; (8001a34 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a0c:	4c0a      	ldr	r4, [pc, #40]	; (8001a38 <LoopForever+0x16>)
  movs r3, #0
 8001a0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a10:	e001      	b.n	8001a16 <LoopFillZerobss>

08001a12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a14:	3204      	adds	r2, #4

08001a16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a18:	d3fb      	bcc.n	8001a12 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001a1a:	f001 fe5d 	bl	80036d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a1e:	f7ff f97d 	bl	8000d1c <main>

08001a22 <LoopForever>:

LoopForever:
    b LoopForever
 8001a22:	e7fe      	b.n	8001a22 <LoopForever>
  ldr   r0, =_estack
 8001a24:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8001a28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a2c:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001a30:	080040e0 	.word	0x080040e0
  ldr r2, =_sbss
 8001a34:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001a38:	20000158 	.word	0x20000158

08001a3c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a3c:	e7fe      	b.n	8001a3c <ADC1_IRQHandler>
	...

08001a40 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a44:	4b07      	ldr	r3, [pc, #28]	; (8001a64 <HAL_Init+0x24>)
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	4b06      	ldr	r3, [pc, #24]	; (8001a64 <HAL_Init+0x24>)
 8001a4a:	2110      	movs	r1, #16
 8001a4c:	430a      	orrs	r2, r1
 8001a4e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001a50:	2003      	movs	r0, #3
 8001a52:	f000 f809 	bl	8001a68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a56:	f7ff ff05 	bl	8001864 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a5a:	2300      	movs	r3, #0
}
 8001a5c:	0018      	movs	r0, r3
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	46c0      	nop			; (mov r8, r8)
 8001a64:	40022000 	.word	0x40022000

08001a68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a68:	b590      	push	{r4, r7, lr}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a70:	4b14      	ldr	r3, [pc, #80]	; (8001ac4 <HAL_InitTick+0x5c>)
 8001a72:	681c      	ldr	r4, [r3, #0]
 8001a74:	4b14      	ldr	r3, [pc, #80]	; (8001ac8 <HAL_InitTick+0x60>)
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	0019      	movs	r1, r3
 8001a7a:	23fa      	movs	r3, #250	; 0xfa
 8001a7c:	0098      	lsls	r0, r3, #2
 8001a7e:	f7fe fb4d 	bl	800011c <__udivsi3>
 8001a82:	0003      	movs	r3, r0
 8001a84:	0019      	movs	r1, r3
 8001a86:	0020      	movs	r0, r4
 8001a88:	f7fe fb48 	bl	800011c <__udivsi3>
 8001a8c:	0003      	movs	r3, r0
 8001a8e:	0018      	movs	r0, r3
 8001a90:	f000 f905 	bl	8001c9e <HAL_SYSTICK_Config>
 8001a94:	1e03      	subs	r3, r0, #0
 8001a96:	d001      	beq.n	8001a9c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	e00f      	b.n	8001abc <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2b03      	cmp	r3, #3
 8001aa0:	d80b      	bhi.n	8001aba <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001aa2:	6879      	ldr	r1, [r7, #4]
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	425b      	negs	r3, r3
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	0018      	movs	r0, r3
 8001aac:	f000 f8e2 	bl	8001c74 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ab0:	4b06      	ldr	r3, [pc, #24]	; (8001acc <HAL_InitTick+0x64>)
 8001ab2:	687a      	ldr	r2, [r7, #4]
 8001ab4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	e000      	b.n	8001abc <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
}
 8001abc:	0018      	movs	r0, r3
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	b003      	add	sp, #12
 8001ac2:	bd90      	pop	{r4, r7, pc}
 8001ac4:	20000008 	.word	0x20000008
 8001ac8:	20000010 	.word	0x20000010
 8001acc:	2000000c 	.word	0x2000000c

08001ad0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ad4:	4b05      	ldr	r3, [pc, #20]	; (8001aec <HAL_IncTick+0x1c>)
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	001a      	movs	r2, r3
 8001ada:	4b05      	ldr	r3, [pc, #20]	; (8001af0 <HAL_IncTick+0x20>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	18d2      	adds	r2, r2, r3
 8001ae0:	4b03      	ldr	r3, [pc, #12]	; (8001af0 <HAL_IncTick+0x20>)
 8001ae2:	601a      	str	r2, [r3, #0]
}
 8001ae4:	46c0      	nop			; (mov r8, r8)
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	46c0      	nop			; (mov r8, r8)
 8001aec:	20000010 	.word	0x20000010
 8001af0:	20000144 	.word	0x20000144

08001af4 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
  return uwTick;
 8001af8:	4b02      	ldr	r3, [pc, #8]	; (8001b04 <HAL_GetTick+0x10>)
 8001afa:	681b      	ldr	r3, [r3, #0]
}
 8001afc:	0018      	movs	r0, r3
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	46c0      	nop			; (mov r8, r8)
 8001b04:	20000144 	.word	0x20000144

08001b08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b084      	sub	sp, #16
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b10:	f7ff fff0 	bl	8001af4 <HAL_GetTick>
 8001b14:	0003      	movs	r3, r0
 8001b16:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	3301      	adds	r3, #1
 8001b20:	d005      	beq.n	8001b2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b22:	4b0a      	ldr	r3, [pc, #40]	; (8001b4c <HAL_Delay+0x44>)
 8001b24:	781b      	ldrb	r3, [r3, #0]
 8001b26:	001a      	movs	r2, r3
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	189b      	adds	r3, r3, r2
 8001b2c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001b2e:	46c0      	nop			; (mov r8, r8)
 8001b30:	f7ff ffe0 	bl	8001af4 <HAL_GetTick>
 8001b34:	0002      	movs	r2, r0
 8001b36:	68bb      	ldr	r3, [r7, #8]
 8001b38:	1ad3      	subs	r3, r2, r3
 8001b3a:	68fa      	ldr	r2, [r7, #12]
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d8f7      	bhi.n	8001b30 <HAL_Delay+0x28>
  {
  }
}
 8001b40:	46c0      	nop			; (mov r8, r8)
 8001b42:	46c0      	nop			; (mov r8, r8)
 8001b44:	46bd      	mov	sp, r7
 8001b46:	b004      	add	sp, #16
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	46c0      	nop			; (mov r8, r8)
 8001b4c:	20000010 	.word	0x20000010

08001b50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b50:	b590      	push	{r4, r7, lr}
 8001b52:	b083      	sub	sp, #12
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	0002      	movs	r2, r0
 8001b58:	6039      	str	r1, [r7, #0]
 8001b5a:	1dfb      	adds	r3, r7, #7
 8001b5c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001b5e:	1dfb      	adds	r3, r7, #7
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	2b7f      	cmp	r3, #127	; 0x7f
 8001b64:	d828      	bhi.n	8001bb8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b66:	4a2f      	ldr	r2, [pc, #188]	; (8001c24 <__NVIC_SetPriority+0xd4>)
 8001b68:	1dfb      	adds	r3, r7, #7
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	b25b      	sxtb	r3, r3
 8001b6e:	089b      	lsrs	r3, r3, #2
 8001b70:	33c0      	adds	r3, #192	; 0xc0
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	589b      	ldr	r3, [r3, r2]
 8001b76:	1dfa      	adds	r2, r7, #7
 8001b78:	7812      	ldrb	r2, [r2, #0]
 8001b7a:	0011      	movs	r1, r2
 8001b7c:	2203      	movs	r2, #3
 8001b7e:	400a      	ands	r2, r1
 8001b80:	00d2      	lsls	r2, r2, #3
 8001b82:	21ff      	movs	r1, #255	; 0xff
 8001b84:	4091      	lsls	r1, r2
 8001b86:	000a      	movs	r2, r1
 8001b88:	43d2      	mvns	r2, r2
 8001b8a:	401a      	ands	r2, r3
 8001b8c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	019b      	lsls	r3, r3, #6
 8001b92:	22ff      	movs	r2, #255	; 0xff
 8001b94:	401a      	ands	r2, r3
 8001b96:	1dfb      	adds	r3, r7, #7
 8001b98:	781b      	ldrb	r3, [r3, #0]
 8001b9a:	0018      	movs	r0, r3
 8001b9c:	2303      	movs	r3, #3
 8001b9e:	4003      	ands	r3, r0
 8001ba0:	00db      	lsls	r3, r3, #3
 8001ba2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001ba4:	481f      	ldr	r0, [pc, #124]	; (8001c24 <__NVIC_SetPriority+0xd4>)
 8001ba6:	1dfb      	adds	r3, r7, #7
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	b25b      	sxtb	r3, r3
 8001bac:	089b      	lsrs	r3, r3, #2
 8001bae:	430a      	orrs	r2, r1
 8001bb0:	33c0      	adds	r3, #192	; 0xc0
 8001bb2:	009b      	lsls	r3, r3, #2
 8001bb4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001bb6:	e031      	b.n	8001c1c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001bb8:	4a1b      	ldr	r2, [pc, #108]	; (8001c28 <__NVIC_SetPriority+0xd8>)
 8001bba:	1dfb      	adds	r3, r7, #7
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	0019      	movs	r1, r3
 8001bc0:	230f      	movs	r3, #15
 8001bc2:	400b      	ands	r3, r1
 8001bc4:	3b08      	subs	r3, #8
 8001bc6:	089b      	lsrs	r3, r3, #2
 8001bc8:	3306      	adds	r3, #6
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	18d3      	adds	r3, r2, r3
 8001bce:	3304      	adds	r3, #4
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	1dfa      	adds	r2, r7, #7
 8001bd4:	7812      	ldrb	r2, [r2, #0]
 8001bd6:	0011      	movs	r1, r2
 8001bd8:	2203      	movs	r2, #3
 8001bda:	400a      	ands	r2, r1
 8001bdc:	00d2      	lsls	r2, r2, #3
 8001bde:	21ff      	movs	r1, #255	; 0xff
 8001be0:	4091      	lsls	r1, r2
 8001be2:	000a      	movs	r2, r1
 8001be4:	43d2      	mvns	r2, r2
 8001be6:	401a      	ands	r2, r3
 8001be8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	019b      	lsls	r3, r3, #6
 8001bee:	22ff      	movs	r2, #255	; 0xff
 8001bf0:	401a      	ands	r2, r3
 8001bf2:	1dfb      	adds	r3, r7, #7
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	0018      	movs	r0, r3
 8001bf8:	2303      	movs	r3, #3
 8001bfa:	4003      	ands	r3, r0
 8001bfc:	00db      	lsls	r3, r3, #3
 8001bfe:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c00:	4809      	ldr	r0, [pc, #36]	; (8001c28 <__NVIC_SetPriority+0xd8>)
 8001c02:	1dfb      	adds	r3, r7, #7
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	001c      	movs	r4, r3
 8001c08:	230f      	movs	r3, #15
 8001c0a:	4023      	ands	r3, r4
 8001c0c:	3b08      	subs	r3, #8
 8001c0e:	089b      	lsrs	r3, r3, #2
 8001c10:	430a      	orrs	r2, r1
 8001c12:	3306      	adds	r3, #6
 8001c14:	009b      	lsls	r3, r3, #2
 8001c16:	18c3      	adds	r3, r0, r3
 8001c18:	3304      	adds	r3, #4
 8001c1a:	601a      	str	r2, [r3, #0]
}
 8001c1c:	46c0      	nop			; (mov r8, r8)
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	b003      	add	sp, #12
 8001c22:	bd90      	pop	{r4, r7, pc}
 8001c24:	e000e100 	.word	0xe000e100
 8001c28:	e000ed00 	.word	0xe000ed00

08001c2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	1e5a      	subs	r2, r3, #1
 8001c38:	2380      	movs	r3, #128	; 0x80
 8001c3a:	045b      	lsls	r3, r3, #17
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d301      	bcc.n	8001c44 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c40:	2301      	movs	r3, #1
 8001c42:	e010      	b.n	8001c66 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c44:	4b0a      	ldr	r3, [pc, #40]	; (8001c70 <SysTick_Config+0x44>)
 8001c46:	687a      	ldr	r2, [r7, #4]
 8001c48:	3a01      	subs	r2, #1
 8001c4a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	425b      	negs	r3, r3
 8001c50:	2103      	movs	r1, #3
 8001c52:	0018      	movs	r0, r3
 8001c54:	f7ff ff7c 	bl	8001b50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c58:	4b05      	ldr	r3, [pc, #20]	; (8001c70 <SysTick_Config+0x44>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c5e:	4b04      	ldr	r3, [pc, #16]	; (8001c70 <SysTick_Config+0x44>)
 8001c60:	2207      	movs	r2, #7
 8001c62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c64:	2300      	movs	r3, #0
}
 8001c66:	0018      	movs	r0, r3
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	b002      	add	sp, #8
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	46c0      	nop			; (mov r8, r8)
 8001c70:	e000e010 	.word	0xe000e010

08001c74 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b084      	sub	sp, #16
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	60b9      	str	r1, [r7, #8]
 8001c7c:	607a      	str	r2, [r7, #4]
 8001c7e:	210f      	movs	r1, #15
 8001c80:	187b      	adds	r3, r7, r1
 8001c82:	1c02      	adds	r2, r0, #0
 8001c84:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001c86:	68ba      	ldr	r2, [r7, #8]
 8001c88:	187b      	adds	r3, r7, r1
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	b25b      	sxtb	r3, r3
 8001c8e:	0011      	movs	r1, r2
 8001c90:	0018      	movs	r0, r3
 8001c92:	f7ff ff5d 	bl	8001b50 <__NVIC_SetPriority>
}
 8001c96:	46c0      	nop			; (mov r8, r8)
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	b004      	add	sp, #16
 8001c9c:	bd80      	pop	{r7, pc}

08001c9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c9e:	b580      	push	{r7, lr}
 8001ca0:	b082      	sub	sp, #8
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	0018      	movs	r0, r3
 8001caa:	f7ff ffbf 	bl	8001c2c <SysTick_Config>
 8001cae:	0003      	movs	r3, r0
}
 8001cb0:	0018      	movs	r0, r3
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	b002      	add	sp, #8
 8001cb6:	bd80      	pop	{r7, pc}

08001cb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b086      	sub	sp, #24
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
 8001cc0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cc6:	e14f      	b.n	8001f68 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	2101      	movs	r1, #1
 8001cce:	697a      	ldr	r2, [r7, #20]
 8001cd0:	4091      	lsls	r1, r2
 8001cd2:	000a      	movs	r2, r1
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d100      	bne.n	8001ce0 <HAL_GPIO_Init+0x28>
 8001cde:	e140      	b.n	8001f62 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	2203      	movs	r2, #3
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	2b01      	cmp	r3, #1
 8001cea:	d005      	beq.n	8001cf8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	2203      	movs	r2, #3
 8001cf2:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001cf4:	2b02      	cmp	r3, #2
 8001cf6:	d130      	bne.n	8001d5a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	005b      	lsls	r3, r3, #1
 8001d02:	2203      	movs	r2, #3
 8001d04:	409a      	lsls	r2, r3
 8001d06:	0013      	movs	r3, r2
 8001d08:	43da      	mvns	r2, r3
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	68da      	ldr	r2, [r3, #12]
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	005b      	lsls	r3, r3, #1
 8001d18:	409a      	lsls	r2, r3
 8001d1a:	0013      	movs	r3, r2
 8001d1c:	693a      	ldr	r2, [r7, #16]
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	693a      	ldr	r2, [r7, #16]
 8001d26:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d2e:	2201      	movs	r2, #1
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	409a      	lsls	r2, r3
 8001d34:	0013      	movs	r3, r2
 8001d36:	43da      	mvns	r2, r3
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	091b      	lsrs	r3, r3, #4
 8001d44:	2201      	movs	r2, #1
 8001d46:	401a      	ands	r2, r3
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	409a      	lsls	r2, r3
 8001d4c:	0013      	movs	r3, r2
 8001d4e:	693a      	ldr	r2, [r7, #16]
 8001d50:	4313      	orrs	r3, r2
 8001d52:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	693a      	ldr	r2, [r7, #16]
 8001d58:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	2203      	movs	r2, #3
 8001d60:	4013      	ands	r3, r2
 8001d62:	2b03      	cmp	r3, #3
 8001d64:	d017      	beq.n	8001d96 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	68db      	ldr	r3, [r3, #12]
 8001d6a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	005b      	lsls	r3, r3, #1
 8001d70:	2203      	movs	r2, #3
 8001d72:	409a      	lsls	r2, r3
 8001d74:	0013      	movs	r3, r2
 8001d76:	43da      	mvns	r2, r3
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	689a      	ldr	r2, [r3, #8]
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	005b      	lsls	r3, r3, #1
 8001d86:	409a      	lsls	r2, r3
 8001d88:	0013      	movs	r3, r2
 8001d8a:	693a      	ldr	r2, [r7, #16]
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	693a      	ldr	r2, [r7, #16]
 8001d94:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	2203      	movs	r2, #3
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	2b02      	cmp	r3, #2
 8001da0:	d123      	bne.n	8001dea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	08da      	lsrs	r2, r3, #3
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	3208      	adds	r2, #8
 8001daa:	0092      	lsls	r2, r2, #2
 8001dac:	58d3      	ldr	r3, [r2, r3]
 8001dae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	2207      	movs	r2, #7
 8001db4:	4013      	ands	r3, r2
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	220f      	movs	r2, #15
 8001dba:	409a      	lsls	r2, r3
 8001dbc:	0013      	movs	r3, r2
 8001dbe:	43da      	mvns	r2, r3
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	691a      	ldr	r2, [r3, #16]
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	2107      	movs	r1, #7
 8001dce:	400b      	ands	r3, r1
 8001dd0:	009b      	lsls	r3, r3, #2
 8001dd2:	409a      	lsls	r2, r3
 8001dd4:	0013      	movs	r3, r2
 8001dd6:	693a      	ldr	r2, [r7, #16]
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	08da      	lsrs	r2, r3, #3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	3208      	adds	r2, #8
 8001de4:	0092      	lsls	r2, r2, #2
 8001de6:	6939      	ldr	r1, [r7, #16]
 8001de8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	005b      	lsls	r3, r3, #1
 8001df4:	2203      	movs	r2, #3
 8001df6:	409a      	lsls	r2, r3
 8001df8:	0013      	movs	r3, r2
 8001dfa:	43da      	mvns	r2, r3
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	4013      	ands	r3, r2
 8001e00:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	2203      	movs	r2, #3
 8001e08:	401a      	ands	r2, r3
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	005b      	lsls	r3, r3, #1
 8001e0e:	409a      	lsls	r2, r3
 8001e10:	0013      	movs	r3, r2
 8001e12:	693a      	ldr	r2, [r7, #16]
 8001e14:	4313      	orrs	r3, r2
 8001e16:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	693a      	ldr	r2, [r7, #16]
 8001e1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	685a      	ldr	r2, [r3, #4]
 8001e22:	23c0      	movs	r3, #192	; 0xc0
 8001e24:	029b      	lsls	r3, r3, #10
 8001e26:	4013      	ands	r3, r2
 8001e28:	d100      	bne.n	8001e2c <HAL_GPIO_Init+0x174>
 8001e2a:	e09a      	b.n	8001f62 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e2c:	4b54      	ldr	r3, [pc, #336]	; (8001f80 <HAL_GPIO_Init+0x2c8>)
 8001e2e:	699a      	ldr	r2, [r3, #24]
 8001e30:	4b53      	ldr	r3, [pc, #332]	; (8001f80 <HAL_GPIO_Init+0x2c8>)
 8001e32:	2101      	movs	r1, #1
 8001e34:	430a      	orrs	r2, r1
 8001e36:	619a      	str	r2, [r3, #24]
 8001e38:	4b51      	ldr	r3, [pc, #324]	; (8001f80 <HAL_GPIO_Init+0x2c8>)
 8001e3a:	699b      	ldr	r3, [r3, #24]
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	4013      	ands	r3, r2
 8001e40:	60bb      	str	r3, [r7, #8]
 8001e42:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001e44:	4a4f      	ldr	r2, [pc, #316]	; (8001f84 <HAL_GPIO_Init+0x2cc>)
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	089b      	lsrs	r3, r3, #2
 8001e4a:	3302      	adds	r3, #2
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	589b      	ldr	r3, [r3, r2]
 8001e50:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	2203      	movs	r2, #3
 8001e56:	4013      	ands	r3, r2
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	220f      	movs	r2, #15
 8001e5c:	409a      	lsls	r2, r3
 8001e5e:	0013      	movs	r3, r2
 8001e60:	43da      	mvns	r2, r3
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	4013      	ands	r3, r2
 8001e66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001e68:	687a      	ldr	r2, [r7, #4]
 8001e6a:	2390      	movs	r3, #144	; 0x90
 8001e6c:	05db      	lsls	r3, r3, #23
 8001e6e:	429a      	cmp	r2, r3
 8001e70:	d013      	beq.n	8001e9a <HAL_GPIO_Init+0x1e2>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4a44      	ldr	r2, [pc, #272]	; (8001f88 <HAL_GPIO_Init+0x2d0>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d00d      	beq.n	8001e96 <HAL_GPIO_Init+0x1de>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4a43      	ldr	r2, [pc, #268]	; (8001f8c <HAL_GPIO_Init+0x2d4>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d007      	beq.n	8001e92 <HAL_GPIO_Init+0x1da>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4a42      	ldr	r2, [pc, #264]	; (8001f90 <HAL_GPIO_Init+0x2d8>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d101      	bne.n	8001e8e <HAL_GPIO_Init+0x1d6>
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	e006      	b.n	8001e9c <HAL_GPIO_Init+0x1e4>
 8001e8e:	2305      	movs	r3, #5
 8001e90:	e004      	b.n	8001e9c <HAL_GPIO_Init+0x1e4>
 8001e92:	2302      	movs	r3, #2
 8001e94:	e002      	b.n	8001e9c <HAL_GPIO_Init+0x1e4>
 8001e96:	2301      	movs	r3, #1
 8001e98:	e000      	b.n	8001e9c <HAL_GPIO_Init+0x1e4>
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	697a      	ldr	r2, [r7, #20]
 8001e9e:	2103      	movs	r1, #3
 8001ea0:	400a      	ands	r2, r1
 8001ea2:	0092      	lsls	r2, r2, #2
 8001ea4:	4093      	lsls	r3, r2
 8001ea6:	693a      	ldr	r2, [r7, #16]
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001eac:	4935      	ldr	r1, [pc, #212]	; (8001f84 <HAL_GPIO_Init+0x2cc>)
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	089b      	lsrs	r3, r3, #2
 8001eb2:	3302      	adds	r3, #2
 8001eb4:	009b      	lsls	r3, r3, #2
 8001eb6:	693a      	ldr	r2, [r7, #16]
 8001eb8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001eba:	4b36      	ldr	r3, [pc, #216]	; (8001f94 <HAL_GPIO_Init+0x2dc>)
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	43da      	mvns	r2, r3
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	685a      	ldr	r2, [r3, #4]
 8001ece:	2380      	movs	r3, #128	; 0x80
 8001ed0:	035b      	lsls	r3, r3, #13
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	d003      	beq.n	8001ede <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8001ed6:	693a      	ldr	r2, [r7, #16]
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	4313      	orrs	r3, r2
 8001edc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001ede:	4b2d      	ldr	r3, [pc, #180]	; (8001f94 <HAL_GPIO_Init+0x2dc>)
 8001ee0:	693a      	ldr	r2, [r7, #16]
 8001ee2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001ee4:	4b2b      	ldr	r3, [pc, #172]	; (8001f94 <HAL_GPIO_Init+0x2dc>)
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	43da      	mvns	r2, r3
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	685a      	ldr	r2, [r3, #4]
 8001ef8:	2380      	movs	r3, #128	; 0x80
 8001efa:	039b      	lsls	r3, r3, #14
 8001efc:	4013      	ands	r3, r2
 8001efe:	d003      	beq.n	8001f08 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001f00:	693a      	ldr	r2, [r7, #16]
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	4313      	orrs	r3, r2
 8001f06:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001f08:	4b22      	ldr	r3, [pc, #136]	; (8001f94 <HAL_GPIO_Init+0x2dc>)
 8001f0a:	693a      	ldr	r2, [r7, #16]
 8001f0c:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8001f0e:	4b21      	ldr	r3, [pc, #132]	; (8001f94 <HAL_GPIO_Init+0x2dc>)
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	43da      	mvns	r2, r3
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	685a      	ldr	r2, [r3, #4]
 8001f22:	2380      	movs	r3, #128	; 0x80
 8001f24:	029b      	lsls	r3, r3, #10
 8001f26:	4013      	ands	r3, r2
 8001f28:	d003      	beq.n	8001f32 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8001f2a:	693a      	ldr	r2, [r7, #16]
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001f32:	4b18      	ldr	r3, [pc, #96]	; (8001f94 <HAL_GPIO_Init+0x2dc>)
 8001f34:	693a      	ldr	r2, [r7, #16]
 8001f36:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001f38:	4b16      	ldr	r3, [pc, #88]	; (8001f94 <HAL_GPIO_Init+0x2dc>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	43da      	mvns	r2, r3
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	4013      	ands	r3, r2
 8001f46:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	685a      	ldr	r2, [r3, #4]
 8001f4c:	2380      	movs	r3, #128	; 0x80
 8001f4e:	025b      	lsls	r3, r3, #9
 8001f50:	4013      	ands	r3, r2
 8001f52:	d003      	beq.n	8001f5c <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001f54:	693a      	ldr	r2, [r7, #16]
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001f5c:	4b0d      	ldr	r3, [pc, #52]	; (8001f94 <HAL_GPIO_Init+0x2dc>)
 8001f5e:	693a      	ldr	r2, [r7, #16]
 8001f60:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	3301      	adds	r3, #1
 8001f66:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	40da      	lsrs	r2, r3
 8001f70:	1e13      	subs	r3, r2, #0
 8001f72:	d000      	beq.n	8001f76 <HAL_GPIO_Init+0x2be>
 8001f74:	e6a8      	b.n	8001cc8 <HAL_GPIO_Init+0x10>
  } 
}
 8001f76:	46c0      	nop			; (mov r8, r8)
 8001f78:	46c0      	nop			; (mov r8, r8)
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	b006      	add	sp, #24
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	40021000 	.word	0x40021000
 8001f84:	40010000 	.word	0x40010000
 8001f88:	48000400 	.word	0x48000400
 8001f8c:	48000800 	.word	0x48000800
 8001f90:	48000c00 	.word	0x48000c00
 8001f94:	40010400 	.word	0x40010400

08001f98 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b084      	sub	sp, #16
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
 8001fa0:	000a      	movs	r2, r1
 8001fa2:	1cbb      	adds	r3, r7, #2
 8001fa4:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	691b      	ldr	r3, [r3, #16]
 8001faa:	1cba      	adds	r2, r7, #2
 8001fac:	8812      	ldrh	r2, [r2, #0]
 8001fae:	4013      	ands	r3, r2
 8001fb0:	d004      	beq.n	8001fbc <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001fb2:	230f      	movs	r3, #15
 8001fb4:	18fb      	adds	r3, r7, r3
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	701a      	strb	r2, [r3, #0]
 8001fba:	e003      	b.n	8001fc4 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001fbc:	230f      	movs	r3, #15
 8001fbe:	18fb      	adds	r3, r7, r3
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001fc4:	230f      	movs	r3, #15
 8001fc6:	18fb      	adds	r3, r7, r3
 8001fc8:	781b      	ldrb	r3, [r3, #0]
  }
 8001fca:	0018      	movs	r0, r3
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	b004      	add	sp, #16
 8001fd0:	bd80      	pop	{r7, pc}

08001fd2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fd2:	b580      	push	{r7, lr}
 8001fd4:	b082      	sub	sp, #8
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	6078      	str	r0, [r7, #4]
 8001fda:	0008      	movs	r0, r1
 8001fdc:	0011      	movs	r1, r2
 8001fde:	1cbb      	adds	r3, r7, #2
 8001fe0:	1c02      	adds	r2, r0, #0
 8001fe2:	801a      	strh	r2, [r3, #0]
 8001fe4:	1c7b      	adds	r3, r7, #1
 8001fe6:	1c0a      	adds	r2, r1, #0
 8001fe8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001fea:	1c7b      	adds	r3, r7, #1
 8001fec:	781b      	ldrb	r3, [r3, #0]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d004      	beq.n	8001ffc <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001ff2:	1cbb      	adds	r3, r7, #2
 8001ff4:	881a      	ldrh	r2, [r3, #0]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ffa:	e003      	b.n	8002004 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001ffc:	1cbb      	adds	r3, r7, #2
 8001ffe:	881a      	ldrh	r2, [r3, #0]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002004:	46c0      	nop			; (mov r8, r8)
 8002006:	46bd      	mov	sp, r7
 8002008:	b002      	add	sp, #8
 800200a:	bd80      	pop	{r7, pc}

0800200c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b088      	sub	sp, #32
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d101      	bne.n	800201e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e301      	b.n	8002622 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	2201      	movs	r2, #1
 8002024:	4013      	ands	r3, r2
 8002026:	d100      	bne.n	800202a <HAL_RCC_OscConfig+0x1e>
 8002028:	e08d      	b.n	8002146 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800202a:	4bc3      	ldr	r3, [pc, #780]	; (8002338 <HAL_RCC_OscConfig+0x32c>)
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	220c      	movs	r2, #12
 8002030:	4013      	ands	r3, r2
 8002032:	2b04      	cmp	r3, #4
 8002034:	d00e      	beq.n	8002054 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002036:	4bc0      	ldr	r3, [pc, #768]	; (8002338 <HAL_RCC_OscConfig+0x32c>)
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	220c      	movs	r2, #12
 800203c:	4013      	ands	r3, r2
 800203e:	2b08      	cmp	r3, #8
 8002040:	d116      	bne.n	8002070 <HAL_RCC_OscConfig+0x64>
 8002042:	4bbd      	ldr	r3, [pc, #756]	; (8002338 <HAL_RCC_OscConfig+0x32c>)
 8002044:	685a      	ldr	r2, [r3, #4]
 8002046:	2380      	movs	r3, #128	; 0x80
 8002048:	025b      	lsls	r3, r3, #9
 800204a:	401a      	ands	r2, r3
 800204c:	2380      	movs	r3, #128	; 0x80
 800204e:	025b      	lsls	r3, r3, #9
 8002050:	429a      	cmp	r2, r3
 8002052:	d10d      	bne.n	8002070 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002054:	4bb8      	ldr	r3, [pc, #736]	; (8002338 <HAL_RCC_OscConfig+0x32c>)
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	2380      	movs	r3, #128	; 0x80
 800205a:	029b      	lsls	r3, r3, #10
 800205c:	4013      	ands	r3, r2
 800205e:	d100      	bne.n	8002062 <HAL_RCC_OscConfig+0x56>
 8002060:	e070      	b.n	8002144 <HAL_RCC_OscConfig+0x138>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d000      	beq.n	800206c <HAL_RCC_OscConfig+0x60>
 800206a:	e06b      	b.n	8002144 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	e2d8      	b.n	8002622 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	2b01      	cmp	r3, #1
 8002076:	d107      	bne.n	8002088 <HAL_RCC_OscConfig+0x7c>
 8002078:	4baf      	ldr	r3, [pc, #700]	; (8002338 <HAL_RCC_OscConfig+0x32c>)
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	4bae      	ldr	r3, [pc, #696]	; (8002338 <HAL_RCC_OscConfig+0x32c>)
 800207e:	2180      	movs	r1, #128	; 0x80
 8002080:	0249      	lsls	r1, r1, #9
 8002082:	430a      	orrs	r2, r1
 8002084:	601a      	str	r2, [r3, #0]
 8002086:	e02f      	b.n	80020e8 <HAL_RCC_OscConfig+0xdc>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d10c      	bne.n	80020aa <HAL_RCC_OscConfig+0x9e>
 8002090:	4ba9      	ldr	r3, [pc, #676]	; (8002338 <HAL_RCC_OscConfig+0x32c>)
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	4ba8      	ldr	r3, [pc, #672]	; (8002338 <HAL_RCC_OscConfig+0x32c>)
 8002096:	49a9      	ldr	r1, [pc, #676]	; (800233c <HAL_RCC_OscConfig+0x330>)
 8002098:	400a      	ands	r2, r1
 800209a:	601a      	str	r2, [r3, #0]
 800209c:	4ba6      	ldr	r3, [pc, #664]	; (8002338 <HAL_RCC_OscConfig+0x32c>)
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	4ba5      	ldr	r3, [pc, #660]	; (8002338 <HAL_RCC_OscConfig+0x32c>)
 80020a2:	49a7      	ldr	r1, [pc, #668]	; (8002340 <HAL_RCC_OscConfig+0x334>)
 80020a4:	400a      	ands	r2, r1
 80020a6:	601a      	str	r2, [r3, #0]
 80020a8:	e01e      	b.n	80020e8 <HAL_RCC_OscConfig+0xdc>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	2b05      	cmp	r3, #5
 80020b0:	d10e      	bne.n	80020d0 <HAL_RCC_OscConfig+0xc4>
 80020b2:	4ba1      	ldr	r3, [pc, #644]	; (8002338 <HAL_RCC_OscConfig+0x32c>)
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	4ba0      	ldr	r3, [pc, #640]	; (8002338 <HAL_RCC_OscConfig+0x32c>)
 80020b8:	2180      	movs	r1, #128	; 0x80
 80020ba:	02c9      	lsls	r1, r1, #11
 80020bc:	430a      	orrs	r2, r1
 80020be:	601a      	str	r2, [r3, #0]
 80020c0:	4b9d      	ldr	r3, [pc, #628]	; (8002338 <HAL_RCC_OscConfig+0x32c>)
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	4b9c      	ldr	r3, [pc, #624]	; (8002338 <HAL_RCC_OscConfig+0x32c>)
 80020c6:	2180      	movs	r1, #128	; 0x80
 80020c8:	0249      	lsls	r1, r1, #9
 80020ca:	430a      	orrs	r2, r1
 80020cc:	601a      	str	r2, [r3, #0]
 80020ce:	e00b      	b.n	80020e8 <HAL_RCC_OscConfig+0xdc>
 80020d0:	4b99      	ldr	r3, [pc, #612]	; (8002338 <HAL_RCC_OscConfig+0x32c>)
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	4b98      	ldr	r3, [pc, #608]	; (8002338 <HAL_RCC_OscConfig+0x32c>)
 80020d6:	4999      	ldr	r1, [pc, #612]	; (800233c <HAL_RCC_OscConfig+0x330>)
 80020d8:	400a      	ands	r2, r1
 80020da:	601a      	str	r2, [r3, #0]
 80020dc:	4b96      	ldr	r3, [pc, #600]	; (8002338 <HAL_RCC_OscConfig+0x32c>)
 80020de:	681a      	ldr	r2, [r3, #0]
 80020e0:	4b95      	ldr	r3, [pc, #596]	; (8002338 <HAL_RCC_OscConfig+0x32c>)
 80020e2:	4997      	ldr	r1, [pc, #604]	; (8002340 <HAL_RCC_OscConfig+0x334>)
 80020e4:	400a      	ands	r2, r1
 80020e6:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d014      	beq.n	800211a <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020f0:	f7ff fd00 	bl	8001af4 <HAL_GetTick>
 80020f4:	0003      	movs	r3, r0
 80020f6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020f8:	e008      	b.n	800210c <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020fa:	f7ff fcfb 	bl	8001af4 <HAL_GetTick>
 80020fe:	0002      	movs	r2, r0
 8002100:	69bb      	ldr	r3, [r7, #24]
 8002102:	1ad3      	subs	r3, r2, r3
 8002104:	2b64      	cmp	r3, #100	; 0x64
 8002106:	d901      	bls.n	800210c <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8002108:	2303      	movs	r3, #3
 800210a:	e28a      	b.n	8002622 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800210c:	4b8a      	ldr	r3, [pc, #552]	; (8002338 <HAL_RCC_OscConfig+0x32c>)
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	2380      	movs	r3, #128	; 0x80
 8002112:	029b      	lsls	r3, r3, #10
 8002114:	4013      	ands	r3, r2
 8002116:	d0f0      	beq.n	80020fa <HAL_RCC_OscConfig+0xee>
 8002118:	e015      	b.n	8002146 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800211a:	f7ff fceb 	bl	8001af4 <HAL_GetTick>
 800211e:	0003      	movs	r3, r0
 8002120:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002122:	e008      	b.n	8002136 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002124:	f7ff fce6 	bl	8001af4 <HAL_GetTick>
 8002128:	0002      	movs	r2, r0
 800212a:	69bb      	ldr	r3, [r7, #24]
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	2b64      	cmp	r3, #100	; 0x64
 8002130:	d901      	bls.n	8002136 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002132:	2303      	movs	r3, #3
 8002134:	e275      	b.n	8002622 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002136:	4b80      	ldr	r3, [pc, #512]	; (8002338 <HAL_RCC_OscConfig+0x32c>)
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	2380      	movs	r3, #128	; 0x80
 800213c:	029b      	lsls	r3, r3, #10
 800213e:	4013      	ands	r3, r2
 8002140:	d1f0      	bne.n	8002124 <HAL_RCC_OscConfig+0x118>
 8002142:	e000      	b.n	8002146 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002144:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	2202      	movs	r2, #2
 800214c:	4013      	ands	r3, r2
 800214e:	d100      	bne.n	8002152 <HAL_RCC_OscConfig+0x146>
 8002150:	e069      	b.n	8002226 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002152:	4b79      	ldr	r3, [pc, #484]	; (8002338 <HAL_RCC_OscConfig+0x32c>)
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	220c      	movs	r2, #12
 8002158:	4013      	ands	r3, r2
 800215a:	d00b      	beq.n	8002174 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800215c:	4b76      	ldr	r3, [pc, #472]	; (8002338 <HAL_RCC_OscConfig+0x32c>)
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	220c      	movs	r2, #12
 8002162:	4013      	ands	r3, r2
 8002164:	2b08      	cmp	r3, #8
 8002166:	d11c      	bne.n	80021a2 <HAL_RCC_OscConfig+0x196>
 8002168:	4b73      	ldr	r3, [pc, #460]	; (8002338 <HAL_RCC_OscConfig+0x32c>)
 800216a:	685a      	ldr	r2, [r3, #4]
 800216c:	2380      	movs	r3, #128	; 0x80
 800216e:	025b      	lsls	r3, r3, #9
 8002170:	4013      	ands	r3, r2
 8002172:	d116      	bne.n	80021a2 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002174:	4b70      	ldr	r3, [pc, #448]	; (8002338 <HAL_RCC_OscConfig+0x32c>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	2202      	movs	r2, #2
 800217a:	4013      	ands	r3, r2
 800217c:	d005      	beq.n	800218a <HAL_RCC_OscConfig+0x17e>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	68db      	ldr	r3, [r3, #12]
 8002182:	2b01      	cmp	r3, #1
 8002184:	d001      	beq.n	800218a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e24b      	b.n	8002622 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800218a:	4b6b      	ldr	r3, [pc, #428]	; (8002338 <HAL_RCC_OscConfig+0x32c>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	22f8      	movs	r2, #248	; 0xf8
 8002190:	4393      	bics	r3, r2
 8002192:	0019      	movs	r1, r3
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	691b      	ldr	r3, [r3, #16]
 8002198:	00da      	lsls	r2, r3, #3
 800219a:	4b67      	ldr	r3, [pc, #412]	; (8002338 <HAL_RCC_OscConfig+0x32c>)
 800219c:	430a      	orrs	r2, r1
 800219e:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021a0:	e041      	b.n	8002226 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	68db      	ldr	r3, [r3, #12]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d024      	beq.n	80021f4 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021aa:	4b63      	ldr	r3, [pc, #396]	; (8002338 <HAL_RCC_OscConfig+0x32c>)
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	4b62      	ldr	r3, [pc, #392]	; (8002338 <HAL_RCC_OscConfig+0x32c>)
 80021b0:	2101      	movs	r1, #1
 80021b2:	430a      	orrs	r2, r1
 80021b4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021b6:	f7ff fc9d 	bl	8001af4 <HAL_GetTick>
 80021ba:	0003      	movs	r3, r0
 80021bc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021be:	e008      	b.n	80021d2 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021c0:	f7ff fc98 	bl	8001af4 <HAL_GetTick>
 80021c4:	0002      	movs	r2, r0
 80021c6:	69bb      	ldr	r3, [r7, #24]
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	2b02      	cmp	r3, #2
 80021cc:	d901      	bls.n	80021d2 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80021ce:	2303      	movs	r3, #3
 80021d0:	e227      	b.n	8002622 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021d2:	4b59      	ldr	r3, [pc, #356]	; (8002338 <HAL_RCC_OscConfig+0x32c>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	2202      	movs	r2, #2
 80021d8:	4013      	ands	r3, r2
 80021da:	d0f1      	beq.n	80021c0 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021dc:	4b56      	ldr	r3, [pc, #344]	; (8002338 <HAL_RCC_OscConfig+0x32c>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	22f8      	movs	r2, #248	; 0xf8
 80021e2:	4393      	bics	r3, r2
 80021e4:	0019      	movs	r1, r3
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	691b      	ldr	r3, [r3, #16]
 80021ea:	00da      	lsls	r2, r3, #3
 80021ec:	4b52      	ldr	r3, [pc, #328]	; (8002338 <HAL_RCC_OscConfig+0x32c>)
 80021ee:	430a      	orrs	r2, r1
 80021f0:	601a      	str	r2, [r3, #0]
 80021f2:	e018      	b.n	8002226 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021f4:	4b50      	ldr	r3, [pc, #320]	; (8002338 <HAL_RCC_OscConfig+0x32c>)
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	4b4f      	ldr	r3, [pc, #316]	; (8002338 <HAL_RCC_OscConfig+0x32c>)
 80021fa:	2101      	movs	r1, #1
 80021fc:	438a      	bics	r2, r1
 80021fe:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002200:	f7ff fc78 	bl	8001af4 <HAL_GetTick>
 8002204:	0003      	movs	r3, r0
 8002206:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002208:	e008      	b.n	800221c <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800220a:	f7ff fc73 	bl	8001af4 <HAL_GetTick>
 800220e:	0002      	movs	r2, r0
 8002210:	69bb      	ldr	r3, [r7, #24]
 8002212:	1ad3      	subs	r3, r2, r3
 8002214:	2b02      	cmp	r3, #2
 8002216:	d901      	bls.n	800221c <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8002218:	2303      	movs	r3, #3
 800221a:	e202      	b.n	8002622 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800221c:	4b46      	ldr	r3, [pc, #280]	; (8002338 <HAL_RCC_OscConfig+0x32c>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	2202      	movs	r2, #2
 8002222:	4013      	ands	r3, r2
 8002224:	d1f1      	bne.n	800220a <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	2208      	movs	r2, #8
 800222c:	4013      	ands	r3, r2
 800222e:	d036      	beq.n	800229e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	69db      	ldr	r3, [r3, #28]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d019      	beq.n	800226c <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002238:	4b3f      	ldr	r3, [pc, #252]	; (8002338 <HAL_RCC_OscConfig+0x32c>)
 800223a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800223c:	4b3e      	ldr	r3, [pc, #248]	; (8002338 <HAL_RCC_OscConfig+0x32c>)
 800223e:	2101      	movs	r1, #1
 8002240:	430a      	orrs	r2, r1
 8002242:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002244:	f7ff fc56 	bl	8001af4 <HAL_GetTick>
 8002248:	0003      	movs	r3, r0
 800224a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800224c:	e008      	b.n	8002260 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800224e:	f7ff fc51 	bl	8001af4 <HAL_GetTick>
 8002252:	0002      	movs	r2, r0
 8002254:	69bb      	ldr	r3, [r7, #24]
 8002256:	1ad3      	subs	r3, r2, r3
 8002258:	2b02      	cmp	r3, #2
 800225a:	d901      	bls.n	8002260 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 800225c:	2303      	movs	r3, #3
 800225e:	e1e0      	b.n	8002622 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002260:	4b35      	ldr	r3, [pc, #212]	; (8002338 <HAL_RCC_OscConfig+0x32c>)
 8002262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002264:	2202      	movs	r2, #2
 8002266:	4013      	ands	r3, r2
 8002268:	d0f1      	beq.n	800224e <HAL_RCC_OscConfig+0x242>
 800226a:	e018      	b.n	800229e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800226c:	4b32      	ldr	r3, [pc, #200]	; (8002338 <HAL_RCC_OscConfig+0x32c>)
 800226e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002270:	4b31      	ldr	r3, [pc, #196]	; (8002338 <HAL_RCC_OscConfig+0x32c>)
 8002272:	2101      	movs	r1, #1
 8002274:	438a      	bics	r2, r1
 8002276:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002278:	f7ff fc3c 	bl	8001af4 <HAL_GetTick>
 800227c:	0003      	movs	r3, r0
 800227e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002280:	e008      	b.n	8002294 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002282:	f7ff fc37 	bl	8001af4 <HAL_GetTick>
 8002286:	0002      	movs	r2, r0
 8002288:	69bb      	ldr	r3, [r7, #24]
 800228a:	1ad3      	subs	r3, r2, r3
 800228c:	2b02      	cmp	r3, #2
 800228e:	d901      	bls.n	8002294 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8002290:	2303      	movs	r3, #3
 8002292:	e1c6      	b.n	8002622 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002294:	4b28      	ldr	r3, [pc, #160]	; (8002338 <HAL_RCC_OscConfig+0x32c>)
 8002296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002298:	2202      	movs	r2, #2
 800229a:	4013      	ands	r3, r2
 800229c:	d1f1      	bne.n	8002282 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	2204      	movs	r2, #4
 80022a4:	4013      	ands	r3, r2
 80022a6:	d100      	bne.n	80022aa <HAL_RCC_OscConfig+0x29e>
 80022a8:	e0b4      	b.n	8002414 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022aa:	201f      	movs	r0, #31
 80022ac:	183b      	adds	r3, r7, r0
 80022ae:	2200      	movs	r2, #0
 80022b0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022b2:	4b21      	ldr	r3, [pc, #132]	; (8002338 <HAL_RCC_OscConfig+0x32c>)
 80022b4:	69da      	ldr	r2, [r3, #28]
 80022b6:	2380      	movs	r3, #128	; 0x80
 80022b8:	055b      	lsls	r3, r3, #21
 80022ba:	4013      	ands	r3, r2
 80022bc:	d110      	bne.n	80022e0 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022be:	4b1e      	ldr	r3, [pc, #120]	; (8002338 <HAL_RCC_OscConfig+0x32c>)
 80022c0:	69da      	ldr	r2, [r3, #28]
 80022c2:	4b1d      	ldr	r3, [pc, #116]	; (8002338 <HAL_RCC_OscConfig+0x32c>)
 80022c4:	2180      	movs	r1, #128	; 0x80
 80022c6:	0549      	lsls	r1, r1, #21
 80022c8:	430a      	orrs	r2, r1
 80022ca:	61da      	str	r2, [r3, #28]
 80022cc:	4b1a      	ldr	r3, [pc, #104]	; (8002338 <HAL_RCC_OscConfig+0x32c>)
 80022ce:	69da      	ldr	r2, [r3, #28]
 80022d0:	2380      	movs	r3, #128	; 0x80
 80022d2:	055b      	lsls	r3, r3, #21
 80022d4:	4013      	ands	r3, r2
 80022d6:	60fb      	str	r3, [r7, #12]
 80022d8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80022da:	183b      	adds	r3, r7, r0
 80022dc:	2201      	movs	r2, #1
 80022de:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022e0:	4b18      	ldr	r3, [pc, #96]	; (8002344 <HAL_RCC_OscConfig+0x338>)
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	2380      	movs	r3, #128	; 0x80
 80022e6:	005b      	lsls	r3, r3, #1
 80022e8:	4013      	ands	r3, r2
 80022ea:	d11a      	bne.n	8002322 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022ec:	4b15      	ldr	r3, [pc, #84]	; (8002344 <HAL_RCC_OscConfig+0x338>)
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	4b14      	ldr	r3, [pc, #80]	; (8002344 <HAL_RCC_OscConfig+0x338>)
 80022f2:	2180      	movs	r1, #128	; 0x80
 80022f4:	0049      	lsls	r1, r1, #1
 80022f6:	430a      	orrs	r2, r1
 80022f8:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022fa:	f7ff fbfb 	bl	8001af4 <HAL_GetTick>
 80022fe:	0003      	movs	r3, r0
 8002300:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002302:	e008      	b.n	8002316 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002304:	f7ff fbf6 	bl	8001af4 <HAL_GetTick>
 8002308:	0002      	movs	r2, r0
 800230a:	69bb      	ldr	r3, [r7, #24]
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	2b64      	cmp	r3, #100	; 0x64
 8002310:	d901      	bls.n	8002316 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8002312:	2303      	movs	r3, #3
 8002314:	e185      	b.n	8002622 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002316:	4b0b      	ldr	r3, [pc, #44]	; (8002344 <HAL_RCC_OscConfig+0x338>)
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	2380      	movs	r3, #128	; 0x80
 800231c:	005b      	lsls	r3, r3, #1
 800231e:	4013      	ands	r3, r2
 8002320:	d0f0      	beq.n	8002304 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	2b01      	cmp	r3, #1
 8002328:	d10e      	bne.n	8002348 <HAL_RCC_OscConfig+0x33c>
 800232a:	4b03      	ldr	r3, [pc, #12]	; (8002338 <HAL_RCC_OscConfig+0x32c>)
 800232c:	6a1a      	ldr	r2, [r3, #32]
 800232e:	4b02      	ldr	r3, [pc, #8]	; (8002338 <HAL_RCC_OscConfig+0x32c>)
 8002330:	2101      	movs	r1, #1
 8002332:	430a      	orrs	r2, r1
 8002334:	621a      	str	r2, [r3, #32]
 8002336:	e035      	b.n	80023a4 <HAL_RCC_OscConfig+0x398>
 8002338:	40021000 	.word	0x40021000
 800233c:	fffeffff 	.word	0xfffeffff
 8002340:	fffbffff 	.word	0xfffbffff
 8002344:	40007000 	.word	0x40007000
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d10c      	bne.n	800236a <HAL_RCC_OscConfig+0x35e>
 8002350:	4bb6      	ldr	r3, [pc, #728]	; (800262c <HAL_RCC_OscConfig+0x620>)
 8002352:	6a1a      	ldr	r2, [r3, #32]
 8002354:	4bb5      	ldr	r3, [pc, #724]	; (800262c <HAL_RCC_OscConfig+0x620>)
 8002356:	2101      	movs	r1, #1
 8002358:	438a      	bics	r2, r1
 800235a:	621a      	str	r2, [r3, #32]
 800235c:	4bb3      	ldr	r3, [pc, #716]	; (800262c <HAL_RCC_OscConfig+0x620>)
 800235e:	6a1a      	ldr	r2, [r3, #32]
 8002360:	4bb2      	ldr	r3, [pc, #712]	; (800262c <HAL_RCC_OscConfig+0x620>)
 8002362:	2104      	movs	r1, #4
 8002364:	438a      	bics	r2, r1
 8002366:	621a      	str	r2, [r3, #32]
 8002368:	e01c      	b.n	80023a4 <HAL_RCC_OscConfig+0x398>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	2b05      	cmp	r3, #5
 8002370:	d10c      	bne.n	800238c <HAL_RCC_OscConfig+0x380>
 8002372:	4bae      	ldr	r3, [pc, #696]	; (800262c <HAL_RCC_OscConfig+0x620>)
 8002374:	6a1a      	ldr	r2, [r3, #32]
 8002376:	4bad      	ldr	r3, [pc, #692]	; (800262c <HAL_RCC_OscConfig+0x620>)
 8002378:	2104      	movs	r1, #4
 800237a:	430a      	orrs	r2, r1
 800237c:	621a      	str	r2, [r3, #32]
 800237e:	4bab      	ldr	r3, [pc, #684]	; (800262c <HAL_RCC_OscConfig+0x620>)
 8002380:	6a1a      	ldr	r2, [r3, #32]
 8002382:	4baa      	ldr	r3, [pc, #680]	; (800262c <HAL_RCC_OscConfig+0x620>)
 8002384:	2101      	movs	r1, #1
 8002386:	430a      	orrs	r2, r1
 8002388:	621a      	str	r2, [r3, #32]
 800238a:	e00b      	b.n	80023a4 <HAL_RCC_OscConfig+0x398>
 800238c:	4ba7      	ldr	r3, [pc, #668]	; (800262c <HAL_RCC_OscConfig+0x620>)
 800238e:	6a1a      	ldr	r2, [r3, #32]
 8002390:	4ba6      	ldr	r3, [pc, #664]	; (800262c <HAL_RCC_OscConfig+0x620>)
 8002392:	2101      	movs	r1, #1
 8002394:	438a      	bics	r2, r1
 8002396:	621a      	str	r2, [r3, #32]
 8002398:	4ba4      	ldr	r3, [pc, #656]	; (800262c <HAL_RCC_OscConfig+0x620>)
 800239a:	6a1a      	ldr	r2, [r3, #32]
 800239c:	4ba3      	ldr	r3, [pc, #652]	; (800262c <HAL_RCC_OscConfig+0x620>)
 800239e:	2104      	movs	r1, #4
 80023a0:	438a      	bics	r2, r1
 80023a2:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d014      	beq.n	80023d6 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023ac:	f7ff fba2 	bl	8001af4 <HAL_GetTick>
 80023b0:	0003      	movs	r3, r0
 80023b2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023b4:	e009      	b.n	80023ca <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023b6:	f7ff fb9d 	bl	8001af4 <HAL_GetTick>
 80023ba:	0002      	movs	r2, r0
 80023bc:	69bb      	ldr	r3, [r7, #24]
 80023be:	1ad3      	subs	r3, r2, r3
 80023c0:	4a9b      	ldr	r2, [pc, #620]	; (8002630 <HAL_RCC_OscConfig+0x624>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d901      	bls.n	80023ca <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 80023c6:	2303      	movs	r3, #3
 80023c8:	e12b      	b.n	8002622 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023ca:	4b98      	ldr	r3, [pc, #608]	; (800262c <HAL_RCC_OscConfig+0x620>)
 80023cc:	6a1b      	ldr	r3, [r3, #32]
 80023ce:	2202      	movs	r2, #2
 80023d0:	4013      	ands	r3, r2
 80023d2:	d0f0      	beq.n	80023b6 <HAL_RCC_OscConfig+0x3aa>
 80023d4:	e013      	b.n	80023fe <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023d6:	f7ff fb8d 	bl	8001af4 <HAL_GetTick>
 80023da:	0003      	movs	r3, r0
 80023dc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023de:	e009      	b.n	80023f4 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023e0:	f7ff fb88 	bl	8001af4 <HAL_GetTick>
 80023e4:	0002      	movs	r2, r0
 80023e6:	69bb      	ldr	r3, [r7, #24]
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	4a91      	ldr	r2, [pc, #580]	; (8002630 <HAL_RCC_OscConfig+0x624>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d901      	bls.n	80023f4 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 80023f0:	2303      	movs	r3, #3
 80023f2:	e116      	b.n	8002622 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023f4:	4b8d      	ldr	r3, [pc, #564]	; (800262c <HAL_RCC_OscConfig+0x620>)
 80023f6:	6a1b      	ldr	r3, [r3, #32]
 80023f8:	2202      	movs	r2, #2
 80023fa:	4013      	ands	r3, r2
 80023fc:	d1f0      	bne.n	80023e0 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80023fe:	231f      	movs	r3, #31
 8002400:	18fb      	adds	r3, r7, r3
 8002402:	781b      	ldrb	r3, [r3, #0]
 8002404:	2b01      	cmp	r3, #1
 8002406:	d105      	bne.n	8002414 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002408:	4b88      	ldr	r3, [pc, #544]	; (800262c <HAL_RCC_OscConfig+0x620>)
 800240a:	69da      	ldr	r2, [r3, #28]
 800240c:	4b87      	ldr	r3, [pc, #540]	; (800262c <HAL_RCC_OscConfig+0x620>)
 800240e:	4989      	ldr	r1, [pc, #548]	; (8002634 <HAL_RCC_OscConfig+0x628>)
 8002410:	400a      	ands	r2, r1
 8002412:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	2210      	movs	r2, #16
 800241a:	4013      	ands	r3, r2
 800241c:	d063      	beq.n	80024e6 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	695b      	ldr	r3, [r3, #20]
 8002422:	2b01      	cmp	r3, #1
 8002424:	d12a      	bne.n	800247c <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002426:	4b81      	ldr	r3, [pc, #516]	; (800262c <HAL_RCC_OscConfig+0x620>)
 8002428:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800242a:	4b80      	ldr	r3, [pc, #512]	; (800262c <HAL_RCC_OscConfig+0x620>)
 800242c:	2104      	movs	r1, #4
 800242e:	430a      	orrs	r2, r1
 8002430:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002432:	4b7e      	ldr	r3, [pc, #504]	; (800262c <HAL_RCC_OscConfig+0x620>)
 8002434:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002436:	4b7d      	ldr	r3, [pc, #500]	; (800262c <HAL_RCC_OscConfig+0x620>)
 8002438:	2101      	movs	r1, #1
 800243a:	430a      	orrs	r2, r1
 800243c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800243e:	f7ff fb59 	bl	8001af4 <HAL_GetTick>
 8002442:	0003      	movs	r3, r0
 8002444:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002446:	e008      	b.n	800245a <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002448:	f7ff fb54 	bl	8001af4 <HAL_GetTick>
 800244c:	0002      	movs	r2, r0
 800244e:	69bb      	ldr	r3, [r7, #24]
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	2b02      	cmp	r3, #2
 8002454:	d901      	bls.n	800245a <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8002456:	2303      	movs	r3, #3
 8002458:	e0e3      	b.n	8002622 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800245a:	4b74      	ldr	r3, [pc, #464]	; (800262c <HAL_RCC_OscConfig+0x620>)
 800245c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800245e:	2202      	movs	r2, #2
 8002460:	4013      	ands	r3, r2
 8002462:	d0f1      	beq.n	8002448 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002464:	4b71      	ldr	r3, [pc, #452]	; (800262c <HAL_RCC_OscConfig+0x620>)
 8002466:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002468:	22f8      	movs	r2, #248	; 0xf8
 800246a:	4393      	bics	r3, r2
 800246c:	0019      	movs	r1, r3
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	699b      	ldr	r3, [r3, #24]
 8002472:	00da      	lsls	r2, r3, #3
 8002474:	4b6d      	ldr	r3, [pc, #436]	; (800262c <HAL_RCC_OscConfig+0x620>)
 8002476:	430a      	orrs	r2, r1
 8002478:	635a      	str	r2, [r3, #52]	; 0x34
 800247a:	e034      	b.n	80024e6 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	695b      	ldr	r3, [r3, #20]
 8002480:	3305      	adds	r3, #5
 8002482:	d111      	bne.n	80024a8 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002484:	4b69      	ldr	r3, [pc, #420]	; (800262c <HAL_RCC_OscConfig+0x620>)
 8002486:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002488:	4b68      	ldr	r3, [pc, #416]	; (800262c <HAL_RCC_OscConfig+0x620>)
 800248a:	2104      	movs	r1, #4
 800248c:	438a      	bics	r2, r1
 800248e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002490:	4b66      	ldr	r3, [pc, #408]	; (800262c <HAL_RCC_OscConfig+0x620>)
 8002492:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002494:	22f8      	movs	r2, #248	; 0xf8
 8002496:	4393      	bics	r3, r2
 8002498:	0019      	movs	r1, r3
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	699b      	ldr	r3, [r3, #24]
 800249e:	00da      	lsls	r2, r3, #3
 80024a0:	4b62      	ldr	r3, [pc, #392]	; (800262c <HAL_RCC_OscConfig+0x620>)
 80024a2:	430a      	orrs	r2, r1
 80024a4:	635a      	str	r2, [r3, #52]	; 0x34
 80024a6:	e01e      	b.n	80024e6 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80024a8:	4b60      	ldr	r3, [pc, #384]	; (800262c <HAL_RCC_OscConfig+0x620>)
 80024aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024ac:	4b5f      	ldr	r3, [pc, #380]	; (800262c <HAL_RCC_OscConfig+0x620>)
 80024ae:	2104      	movs	r1, #4
 80024b0:	430a      	orrs	r2, r1
 80024b2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80024b4:	4b5d      	ldr	r3, [pc, #372]	; (800262c <HAL_RCC_OscConfig+0x620>)
 80024b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024b8:	4b5c      	ldr	r3, [pc, #368]	; (800262c <HAL_RCC_OscConfig+0x620>)
 80024ba:	2101      	movs	r1, #1
 80024bc:	438a      	bics	r2, r1
 80024be:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024c0:	f7ff fb18 	bl	8001af4 <HAL_GetTick>
 80024c4:	0003      	movs	r3, r0
 80024c6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80024c8:	e008      	b.n	80024dc <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80024ca:	f7ff fb13 	bl	8001af4 <HAL_GetTick>
 80024ce:	0002      	movs	r2, r0
 80024d0:	69bb      	ldr	r3, [r7, #24]
 80024d2:	1ad3      	subs	r3, r2, r3
 80024d4:	2b02      	cmp	r3, #2
 80024d6:	d901      	bls.n	80024dc <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 80024d8:	2303      	movs	r3, #3
 80024da:	e0a2      	b.n	8002622 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80024dc:	4b53      	ldr	r3, [pc, #332]	; (800262c <HAL_RCC_OscConfig+0x620>)
 80024de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024e0:	2202      	movs	r2, #2
 80024e2:	4013      	ands	r3, r2
 80024e4:	d1f1      	bne.n	80024ca <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6a1b      	ldr	r3, [r3, #32]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d100      	bne.n	80024f0 <HAL_RCC_OscConfig+0x4e4>
 80024ee:	e097      	b.n	8002620 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024f0:	4b4e      	ldr	r3, [pc, #312]	; (800262c <HAL_RCC_OscConfig+0x620>)
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	220c      	movs	r2, #12
 80024f6:	4013      	ands	r3, r2
 80024f8:	2b08      	cmp	r3, #8
 80024fa:	d100      	bne.n	80024fe <HAL_RCC_OscConfig+0x4f2>
 80024fc:	e06b      	b.n	80025d6 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6a1b      	ldr	r3, [r3, #32]
 8002502:	2b02      	cmp	r3, #2
 8002504:	d14c      	bne.n	80025a0 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002506:	4b49      	ldr	r3, [pc, #292]	; (800262c <HAL_RCC_OscConfig+0x620>)
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	4b48      	ldr	r3, [pc, #288]	; (800262c <HAL_RCC_OscConfig+0x620>)
 800250c:	494a      	ldr	r1, [pc, #296]	; (8002638 <HAL_RCC_OscConfig+0x62c>)
 800250e:	400a      	ands	r2, r1
 8002510:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002512:	f7ff faef 	bl	8001af4 <HAL_GetTick>
 8002516:	0003      	movs	r3, r0
 8002518:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800251a:	e008      	b.n	800252e <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800251c:	f7ff faea 	bl	8001af4 <HAL_GetTick>
 8002520:	0002      	movs	r2, r0
 8002522:	69bb      	ldr	r3, [r7, #24]
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	2b02      	cmp	r3, #2
 8002528:	d901      	bls.n	800252e <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 800252a:	2303      	movs	r3, #3
 800252c:	e079      	b.n	8002622 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800252e:	4b3f      	ldr	r3, [pc, #252]	; (800262c <HAL_RCC_OscConfig+0x620>)
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	2380      	movs	r3, #128	; 0x80
 8002534:	049b      	lsls	r3, r3, #18
 8002536:	4013      	ands	r3, r2
 8002538:	d1f0      	bne.n	800251c <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800253a:	4b3c      	ldr	r3, [pc, #240]	; (800262c <HAL_RCC_OscConfig+0x620>)
 800253c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800253e:	220f      	movs	r2, #15
 8002540:	4393      	bics	r3, r2
 8002542:	0019      	movs	r1, r3
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002548:	4b38      	ldr	r3, [pc, #224]	; (800262c <HAL_RCC_OscConfig+0x620>)
 800254a:	430a      	orrs	r2, r1
 800254c:	62da      	str	r2, [r3, #44]	; 0x2c
 800254e:	4b37      	ldr	r3, [pc, #220]	; (800262c <HAL_RCC_OscConfig+0x620>)
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	4a3a      	ldr	r2, [pc, #232]	; (800263c <HAL_RCC_OscConfig+0x630>)
 8002554:	4013      	ands	r3, r2
 8002556:	0019      	movs	r1, r3
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002560:	431a      	orrs	r2, r3
 8002562:	4b32      	ldr	r3, [pc, #200]	; (800262c <HAL_RCC_OscConfig+0x620>)
 8002564:	430a      	orrs	r2, r1
 8002566:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002568:	4b30      	ldr	r3, [pc, #192]	; (800262c <HAL_RCC_OscConfig+0x620>)
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	4b2f      	ldr	r3, [pc, #188]	; (800262c <HAL_RCC_OscConfig+0x620>)
 800256e:	2180      	movs	r1, #128	; 0x80
 8002570:	0449      	lsls	r1, r1, #17
 8002572:	430a      	orrs	r2, r1
 8002574:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002576:	f7ff fabd 	bl	8001af4 <HAL_GetTick>
 800257a:	0003      	movs	r3, r0
 800257c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800257e:	e008      	b.n	8002592 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002580:	f7ff fab8 	bl	8001af4 <HAL_GetTick>
 8002584:	0002      	movs	r2, r0
 8002586:	69bb      	ldr	r3, [r7, #24]
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	2b02      	cmp	r3, #2
 800258c:	d901      	bls.n	8002592 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800258e:	2303      	movs	r3, #3
 8002590:	e047      	b.n	8002622 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002592:	4b26      	ldr	r3, [pc, #152]	; (800262c <HAL_RCC_OscConfig+0x620>)
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	2380      	movs	r3, #128	; 0x80
 8002598:	049b      	lsls	r3, r3, #18
 800259a:	4013      	ands	r3, r2
 800259c:	d0f0      	beq.n	8002580 <HAL_RCC_OscConfig+0x574>
 800259e:	e03f      	b.n	8002620 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025a0:	4b22      	ldr	r3, [pc, #136]	; (800262c <HAL_RCC_OscConfig+0x620>)
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	4b21      	ldr	r3, [pc, #132]	; (800262c <HAL_RCC_OscConfig+0x620>)
 80025a6:	4924      	ldr	r1, [pc, #144]	; (8002638 <HAL_RCC_OscConfig+0x62c>)
 80025a8:	400a      	ands	r2, r1
 80025aa:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ac:	f7ff faa2 	bl	8001af4 <HAL_GetTick>
 80025b0:	0003      	movs	r3, r0
 80025b2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025b4:	e008      	b.n	80025c8 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025b6:	f7ff fa9d 	bl	8001af4 <HAL_GetTick>
 80025ba:	0002      	movs	r2, r0
 80025bc:	69bb      	ldr	r3, [r7, #24]
 80025be:	1ad3      	subs	r3, r2, r3
 80025c0:	2b02      	cmp	r3, #2
 80025c2:	d901      	bls.n	80025c8 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 80025c4:	2303      	movs	r3, #3
 80025c6:	e02c      	b.n	8002622 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025c8:	4b18      	ldr	r3, [pc, #96]	; (800262c <HAL_RCC_OscConfig+0x620>)
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	2380      	movs	r3, #128	; 0x80
 80025ce:	049b      	lsls	r3, r3, #18
 80025d0:	4013      	ands	r3, r2
 80025d2:	d1f0      	bne.n	80025b6 <HAL_RCC_OscConfig+0x5aa>
 80025d4:	e024      	b.n	8002620 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6a1b      	ldr	r3, [r3, #32]
 80025da:	2b01      	cmp	r3, #1
 80025dc:	d101      	bne.n	80025e2 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e01f      	b.n	8002622 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80025e2:	4b12      	ldr	r3, [pc, #72]	; (800262c <HAL_RCC_OscConfig+0x620>)
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80025e8:	4b10      	ldr	r3, [pc, #64]	; (800262c <HAL_RCC_OscConfig+0x620>)
 80025ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ec:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80025ee:	697a      	ldr	r2, [r7, #20]
 80025f0:	2380      	movs	r3, #128	; 0x80
 80025f2:	025b      	lsls	r3, r3, #9
 80025f4:	401a      	ands	r2, r3
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025fa:	429a      	cmp	r2, r3
 80025fc:	d10e      	bne.n	800261c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	220f      	movs	r2, #15
 8002602:	401a      	ands	r2, r3
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002608:	429a      	cmp	r2, r3
 800260a:	d107      	bne.n	800261c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800260c:	697a      	ldr	r2, [r7, #20]
 800260e:	23f0      	movs	r3, #240	; 0xf0
 8002610:	039b      	lsls	r3, r3, #14
 8002612:	401a      	ands	r2, r3
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002618:	429a      	cmp	r2, r3
 800261a:	d001      	beq.n	8002620 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	e000      	b.n	8002622 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8002620:	2300      	movs	r3, #0
}
 8002622:	0018      	movs	r0, r3
 8002624:	46bd      	mov	sp, r7
 8002626:	b008      	add	sp, #32
 8002628:	bd80      	pop	{r7, pc}
 800262a:	46c0      	nop			; (mov r8, r8)
 800262c:	40021000 	.word	0x40021000
 8002630:	00001388 	.word	0x00001388
 8002634:	efffffff 	.word	0xefffffff
 8002638:	feffffff 	.word	0xfeffffff
 800263c:	ffc2ffff 	.word	0xffc2ffff

08002640 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b084      	sub	sp, #16
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
 8002648:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d101      	bne.n	8002654 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	e0b3      	b.n	80027bc <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002654:	4b5b      	ldr	r3, [pc, #364]	; (80027c4 <HAL_RCC_ClockConfig+0x184>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	2201      	movs	r2, #1
 800265a:	4013      	ands	r3, r2
 800265c:	683a      	ldr	r2, [r7, #0]
 800265e:	429a      	cmp	r2, r3
 8002660:	d911      	bls.n	8002686 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002662:	4b58      	ldr	r3, [pc, #352]	; (80027c4 <HAL_RCC_ClockConfig+0x184>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	2201      	movs	r2, #1
 8002668:	4393      	bics	r3, r2
 800266a:	0019      	movs	r1, r3
 800266c:	4b55      	ldr	r3, [pc, #340]	; (80027c4 <HAL_RCC_ClockConfig+0x184>)
 800266e:	683a      	ldr	r2, [r7, #0]
 8002670:	430a      	orrs	r2, r1
 8002672:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002674:	4b53      	ldr	r3, [pc, #332]	; (80027c4 <HAL_RCC_ClockConfig+0x184>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	2201      	movs	r2, #1
 800267a:	4013      	ands	r3, r2
 800267c:	683a      	ldr	r2, [r7, #0]
 800267e:	429a      	cmp	r2, r3
 8002680:	d001      	beq.n	8002686 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e09a      	b.n	80027bc <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	2202      	movs	r2, #2
 800268c:	4013      	ands	r3, r2
 800268e:	d015      	beq.n	80026bc <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	2204      	movs	r2, #4
 8002696:	4013      	ands	r3, r2
 8002698:	d006      	beq.n	80026a8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800269a:	4b4b      	ldr	r3, [pc, #300]	; (80027c8 <HAL_RCC_ClockConfig+0x188>)
 800269c:	685a      	ldr	r2, [r3, #4]
 800269e:	4b4a      	ldr	r3, [pc, #296]	; (80027c8 <HAL_RCC_ClockConfig+0x188>)
 80026a0:	21e0      	movs	r1, #224	; 0xe0
 80026a2:	00c9      	lsls	r1, r1, #3
 80026a4:	430a      	orrs	r2, r1
 80026a6:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026a8:	4b47      	ldr	r3, [pc, #284]	; (80027c8 <HAL_RCC_ClockConfig+0x188>)
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	22f0      	movs	r2, #240	; 0xf0
 80026ae:	4393      	bics	r3, r2
 80026b0:	0019      	movs	r1, r3
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	689a      	ldr	r2, [r3, #8]
 80026b6:	4b44      	ldr	r3, [pc, #272]	; (80027c8 <HAL_RCC_ClockConfig+0x188>)
 80026b8:	430a      	orrs	r2, r1
 80026ba:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	2201      	movs	r2, #1
 80026c2:	4013      	ands	r3, r2
 80026c4:	d040      	beq.n	8002748 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	d107      	bne.n	80026de <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ce:	4b3e      	ldr	r3, [pc, #248]	; (80027c8 <HAL_RCC_ClockConfig+0x188>)
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	2380      	movs	r3, #128	; 0x80
 80026d4:	029b      	lsls	r3, r3, #10
 80026d6:	4013      	ands	r3, r2
 80026d8:	d114      	bne.n	8002704 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	e06e      	b.n	80027bc <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	2b02      	cmp	r3, #2
 80026e4:	d107      	bne.n	80026f6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026e6:	4b38      	ldr	r3, [pc, #224]	; (80027c8 <HAL_RCC_ClockConfig+0x188>)
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	2380      	movs	r3, #128	; 0x80
 80026ec:	049b      	lsls	r3, r3, #18
 80026ee:	4013      	ands	r3, r2
 80026f0:	d108      	bne.n	8002704 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e062      	b.n	80027bc <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026f6:	4b34      	ldr	r3, [pc, #208]	; (80027c8 <HAL_RCC_ClockConfig+0x188>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	2202      	movs	r2, #2
 80026fc:	4013      	ands	r3, r2
 80026fe:	d101      	bne.n	8002704 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	e05b      	b.n	80027bc <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002704:	4b30      	ldr	r3, [pc, #192]	; (80027c8 <HAL_RCC_ClockConfig+0x188>)
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	2203      	movs	r2, #3
 800270a:	4393      	bics	r3, r2
 800270c:	0019      	movs	r1, r3
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	685a      	ldr	r2, [r3, #4]
 8002712:	4b2d      	ldr	r3, [pc, #180]	; (80027c8 <HAL_RCC_ClockConfig+0x188>)
 8002714:	430a      	orrs	r2, r1
 8002716:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002718:	f7ff f9ec 	bl	8001af4 <HAL_GetTick>
 800271c:	0003      	movs	r3, r0
 800271e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002720:	e009      	b.n	8002736 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002722:	f7ff f9e7 	bl	8001af4 <HAL_GetTick>
 8002726:	0002      	movs	r2, r0
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	1ad3      	subs	r3, r2, r3
 800272c:	4a27      	ldr	r2, [pc, #156]	; (80027cc <HAL_RCC_ClockConfig+0x18c>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d901      	bls.n	8002736 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8002732:	2303      	movs	r3, #3
 8002734:	e042      	b.n	80027bc <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002736:	4b24      	ldr	r3, [pc, #144]	; (80027c8 <HAL_RCC_ClockConfig+0x188>)
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	220c      	movs	r2, #12
 800273c:	401a      	ands	r2, r3
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	429a      	cmp	r2, r3
 8002746:	d1ec      	bne.n	8002722 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002748:	4b1e      	ldr	r3, [pc, #120]	; (80027c4 <HAL_RCC_ClockConfig+0x184>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	2201      	movs	r2, #1
 800274e:	4013      	ands	r3, r2
 8002750:	683a      	ldr	r2, [r7, #0]
 8002752:	429a      	cmp	r2, r3
 8002754:	d211      	bcs.n	800277a <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002756:	4b1b      	ldr	r3, [pc, #108]	; (80027c4 <HAL_RCC_ClockConfig+0x184>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	2201      	movs	r2, #1
 800275c:	4393      	bics	r3, r2
 800275e:	0019      	movs	r1, r3
 8002760:	4b18      	ldr	r3, [pc, #96]	; (80027c4 <HAL_RCC_ClockConfig+0x184>)
 8002762:	683a      	ldr	r2, [r7, #0]
 8002764:	430a      	orrs	r2, r1
 8002766:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002768:	4b16      	ldr	r3, [pc, #88]	; (80027c4 <HAL_RCC_ClockConfig+0x184>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	2201      	movs	r2, #1
 800276e:	4013      	ands	r3, r2
 8002770:	683a      	ldr	r2, [r7, #0]
 8002772:	429a      	cmp	r2, r3
 8002774:	d001      	beq.n	800277a <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e020      	b.n	80027bc <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	2204      	movs	r2, #4
 8002780:	4013      	ands	r3, r2
 8002782:	d009      	beq.n	8002798 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002784:	4b10      	ldr	r3, [pc, #64]	; (80027c8 <HAL_RCC_ClockConfig+0x188>)
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	4a11      	ldr	r2, [pc, #68]	; (80027d0 <HAL_RCC_ClockConfig+0x190>)
 800278a:	4013      	ands	r3, r2
 800278c:	0019      	movs	r1, r3
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	68da      	ldr	r2, [r3, #12]
 8002792:	4b0d      	ldr	r3, [pc, #52]	; (80027c8 <HAL_RCC_ClockConfig+0x188>)
 8002794:	430a      	orrs	r2, r1
 8002796:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002798:	f000 f820 	bl	80027dc <HAL_RCC_GetSysClockFreq>
 800279c:	0001      	movs	r1, r0
 800279e:	4b0a      	ldr	r3, [pc, #40]	; (80027c8 <HAL_RCC_ClockConfig+0x188>)
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	091b      	lsrs	r3, r3, #4
 80027a4:	220f      	movs	r2, #15
 80027a6:	4013      	ands	r3, r2
 80027a8:	4a0a      	ldr	r2, [pc, #40]	; (80027d4 <HAL_RCC_ClockConfig+0x194>)
 80027aa:	5cd3      	ldrb	r3, [r2, r3]
 80027ac:	000a      	movs	r2, r1
 80027ae:	40da      	lsrs	r2, r3
 80027b0:	4b09      	ldr	r3, [pc, #36]	; (80027d8 <HAL_RCC_ClockConfig+0x198>)
 80027b2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80027b4:	2003      	movs	r0, #3
 80027b6:	f7ff f957 	bl	8001a68 <HAL_InitTick>
  
  return HAL_OK;
 80027ba:	2300      	movs	r3, #0
}
 80027bc:	0018      	movs	r0, r3
 80027be:	46bd      	mov	sp, r7
 80027c0:	b004      	add	sp, #16
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	40022000 	.word	0x40022000
 80027c8:	40021000 	.word	0x40021000
 80027cc:	00001388 	.word	0x00001388
 80027d0:	fffff8ff 	.word	0xfffff8ff
 80027d4:	08004074 	.word	0x08004074
 80027d8:	20000008 	.word	0x20000008

080027dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b086      	sub	sp, #24
 80027e0:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80027e2:	2300      	movs	r3, #0
 80027e4:	60fb      	str	r3, [r7, #12]
 80027e6:	2300      	movs	r3, #0
 80027e8:	60bb      	str	r3, [r7, #8]
 80027ea:	2300      	movs	r3, #0
 80027ec:	617b      	str	r3, [r7, #20]
 80027ee:	2300      	movs	r3, #0
 80027f0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80027f2:	2300      	movs	r3, #0
 80027f4:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80027f6:	4b20      	ldr	r3, [pc, #128]	; (8002878 <HAL_RCC_GetSysClockFreq+0x9c>)
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	220c      	movs	r2, #12
 8002800:	4013      	ands	r3, r2
 8002802:	2b04      	cmp	r3, #4
 8002804:	d002      	beq.n	800280c <HAL_RCC_GetSysClockFreq+0x30>
 8002806:	2b08      	cmp	r3, #8
 8002808:	d003      	beq.n	8002812 <HAL_RCC_GetSysClockFreq+0x36>
 800280a:	e02c      	b.n	8002866 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800280c:	4b1b      	ldr	r3, [pc, #108]	; (800287c <HAL_RCC_GetSysClockFreq+0xa0>)
 800280e:	613b      	str	r3, [r7, #16]
      break;
 8002810:	e02c      	b.n	800286c <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	0c9b      	lsrs	r3, r3, #18
 8002816:	220f      	movs	r2, #15
 8002818:	4013      	ands	r3, r2
 800281a:	4a19      	ldr	r2, [pc, #100]	; (8002880 <HAL_RCC_GetSysClockFreq+0xa4>)
 800281c:	5cd3      	ldrb	r3, [r2, r3]
 800281e:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002820:	4b15      	ldr	r3, [pc, #84]	; (8002878 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002824:	220f      	movs	r2, #15
 8002826:	4013      	ands	r3, r2
 8002828:	4a16      	ldr	r2, [pc, #88]	; (8002884 <HAL_RCC_GetSysClockFreq+0xa8>)
 800282a:	5cd3      	ldrb	r3, [r2, r3]
 800282c:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800282e:	68fa      	ldr	r2, [r7, #12]
 8002830:	2380      	movs	r3, #128	; 0x80
 8002832:	025b      	lsls	r3, r3, #9
 8002834:	4013      	ands	r3, r2
 8002836:	d009      	beq.n	800284c <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002838:	68b9      	ldr	r1, [r7, #8]
 800283a:	4810      	ldr	r0, [pc, #64]	; (800287c <HAL_RCC_GetSysClockFreq+0xa0>)
 800283c:	f7fd fc6e 	bl	800011c <__udivsi3>
 8002840:	0003      	movs	r3, r0
 8002842:	001a      	movs	r2, r3
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	4353      	muls	r3, r2
 8002848:	617b      	str	r3, [r7, #20]
 800284a:	e009      	b.n	8002860 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800284c:	6879      	ldr	r1, [r7, #4]
 800284e:	000a      	movs	r2, r1
 8002850:	0152      	lsls	r2, r2, #5
 8002852:	1a52      	subs	r2, r2, r1
 8002854:	0193      	lsls	r3, r2, #6
 8002856:	1a9b      	subs	r3, r3, r2
 8002858:	00db      	lsls	r3, r3, #3
 800285a:	185b      	adds	r3, r3, r1
 800285c:	021b      	lsls	r3, r3, #8
 800285e:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	613b      	str	r3, [r7, #16]
      break;
 8002864:	e002      	b.n	800286c <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002866:	4b08      	ldr	r3, [pc, #32]	; (8002888 <HAL_RCC_GetSysClockFreq+0xac>)
 8002868:	613b      	str	r3, [r7, #16]
      break;
 800286a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800286c:	693b      	ldr	r3, [r7, #16]
}
 800286e:	0018      	movs	r0, r3
 8002870:	46bd      	mov	sp, r7
 8002872:	b006      	add	sp, #24
 8002874:	bd80      	pop	{r7, pc}
 8002876:	46c0      	nop			; (mov r8, r8)
 8002878:	40021000 	.word	0x40021000
 800287c:	01312d00 	.word	0x01312d00
 8002880:	08004084 	.word	0x08004084
 8002884:	08004094 	.word	0x08004094
 8002888:	007a1200 	.word	0x007a1200

0800288c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b084      	sub	sp, #16
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d101      	bne.n	800289e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e0a8      	b.n	80029f0 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d109      	bne.n	80028ba <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	685a      	ldr	r2, [r3, #4]
 80028aa:	2382      	movs	r3, #130	; 0x82
 80028ac:	005b      	lsls	r3, r3, #1
 80028ae:	429a      	cmp	r2, r3
 80028b0:	d009      	beq.n	80028c6 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2200      	movs	r2, #0
 80028b6:	61da      	str	r2, [r3, #28]
 80028b8:	e005      	b.n	80028c6 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2200      	movs	r2, #0
 80028be:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2200      	movs	r2, #0
 80028c4:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2200      	movs	r2, #0
 80028ca:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	225d      	movs	r2, #93	; 0x5d
 80028d0:	5c9b      	ldrb	r3, [r3, r2]
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d107      	bne.n	80028e8 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	225c      	movs	r2, #92	; 0x5c
 80028dc:	2100      	movs	r1, #0
 80028de:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	0018      	movs	r0, r3
 80028e4:	f7fe ffe2 	bl	80018ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	225d      	movs	r2, #93	; 0x5d
 80028ec:	2102      	movs	r1, #2
 80028ee:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	2140      	movs	r1, #64	; 0x40
 80028fc:	438a      	bics	r2, r1
 80028fe:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	68da      	ldr	r2, [r3, #12]
 8002904:	23e0      	movs	r3, #224	; 0xe0
 8002906:	00db      	lsls	r3, r3, #3
 8002908:	429a      	cmp	r2, r3
 800290a:	d902      	bls.n	8002912 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800290c:	2300      	movs	r3, #0
 800290e:	60fb      	str	r3, [r7, #12]
 8002910:	e002      	b.n	8002918 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002912:	2380      	movs	r3, #128	; 0x80
 8002914:	015b      	lsls	r3, r3, #5
 8002916:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	68da      	ldr	r2, [r3, #12]
 800291c:	23f0      	movs	r3, #240	; 0xf0
 800291e:	011b      	lsls	r3, r3, #4
 8002920:	429a      	cmp	r2, r3
 8002922:	d008      	beq.n	8002936 <HAL_SPI_Init+0xaa>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	68da      	ldr	r2, [r3, #12]
 8002928:	23e0      	movs	r3, #224	; 0xe0
 800292a:	00db      	lsls	r3, r3, #3
 800292c:	429a      	cmp	r2, r3
 800292e:	d002      	beq.n	8002936 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2200      	movs	r2, #0
 8002934:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	685a      	ldr	r2, [r3, #4]
 800293a:	2382      	movs	r3, #130	; 0x82
 800293c:	005b      	lsls	r3, r3, #1
 800293e:	401a      	ands	r2, r3
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6899      	ldr	r1, [r3, #8]
 8002944:	2384      	movs	r3, #132	; 0x84
 8002946:	021b      	lsls	r3, r3, #8
 8002948:	400b      	ands	r3, r1
 800294a:	431a      	orrs	r2, r3
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	691b      	ldr	r3, [r3, #16]
 8002950:	2102      	movs	r1, #2
 8002952:	400b      	ands	r3, r1
 8002954:	431a      	orrs	r2, r3
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	695b      	ldr	r3, [r3, #20]
 800295a:	2101      	movs	r1, #1
 800295c:	400b      	ands	r3, r1
 800295e:	431a      	orrs	r2, r3
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6999      	ldr	r1, [r3, #24]
 8002964:	2380      	movs	r3, #128	; 0x80
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	400b      	ands	r3, r1
 800296a:	431a      	orrs	r2, r3
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	69db      	ldr	r3, [r3, #28]
 8002970:	2138      	movs	r1, #56	; 0x38
 8002972:	400b      	ands	r3, r1
 8002974:	431a      	orrs	r2, r3
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6a1b      	ldr	r3, [r3, #32]
 800297a:	2180      	movs	r1, #128	; 0x80
 800297c:	400b      	ands	r3, r1
 800297e:	431a      	orrs	r2, r3
 8002980:	0011      	movs	r1, r2
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002986:	2380      	movs	r3, #128	; 0x80
 8002988:	019b      	lsls	r3, r3, #6
 800298a:	401a      	ands	r2, r3
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	430a      	orrs	r2, r1
 8002992:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	699b      	ldr	r3, [r3, #24]
 8002998:	0c1b      	lsrs	r3, r3, #16
 800299a:	2204      	movs	r2, #4
 800299c:	401a      	ands	r2, r3
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a2:	2110      	movs	r1, #16
 80029a4:	400b      	ands	r3, r1
 80029a6:	431a      	orrs	r2, r3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029ac:	2108      	movs	r1, #8
 80029ae:	400b      	ands	r3, r1
 80029b0:	431a      	orrs	r2, r3
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	68d9      	ldr	r1, [r3, #12]
 80029b6:	23f0      	movs	r3, #240	; 0xf0
 80029b8:	011b      	lsls	r3, r3, #4
 80029ba:	400b      	ands	r3, r1
 80029bc:	431a      	orrs	r2, r3
 80029be:	0011      	movs	r1, r2
 80029c0:	68fa      	ldr	r2, [r7, #12]
 80029c2:	2380      	movs	r3, #128	; 0x80
 80029c4:	015b      	lsls	r3, r3, #5
 80029c6:	401a      	ands	r2, r3
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	430a      	orrs	r2, r1
 80029ce:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	69da      	ldr	r2, [r3, #28]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4907      	ldr	r1, [pc, #28]	; (80029f8 <HAL_SPI_Init+0x16c>)
 80029dc:	400a      	ands	r2, r1
 80029de:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2200      	movs	r2, #0
 80029e4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	225d      	movs	r2, #93	; 0x5d
 80029ea:	2101      	movs	r1, #1
 80029ec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80029ee:	2300      	movs	r3, #0
}
 80029f0:	0018      	movs	r0, r3
 80029f2:	46bd      	mov	sp, r7
 80029f4:	b004      	add	sp, #16
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	fffff7ff 	.word	0xfffff7ff

080029fc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b088      	sub	sp, #32
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	60f8      	str	r0, [r7, #12]
 8002a04:	60b9      	str	r1, [r7, #8]
 8002a06:	603b      	str	r3, [r7, #0]
 8002a08:	1dbb      	adds	r3, r7, #6
 8002a0a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002a0c:	231f      	movs	r3, #31
 8002a0e:	18fb      	adds	r3, r7, r3
 8002a10:	2200      	movs	r2, #0
 8002a12:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	225c      	movs	r2, #92	; 0x5c
 8002a18:	5c9b      	ldrb	r3, [r3, r2]
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d101      	bne.n	8002a22 <HAL_SPI_Transmit+0x26>
 8002a1e:	2302      	movs	r3, #2
 8002a20:	e147      	b.n	8002cb2 <HAL_SPI_Transmit+0x2b6>
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	225c      	movs	r2, #92	; 0x5c
 8002a26:	2101      	movs	r1, #1
 8002a28:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002a2a:	f7ff f863 	bl	8001af4 <HAL_GetTick>
 8002a2e:	0003      	movs	r3, r0
 8002a30:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002a32:	2316      	movs	r3, #22
 8002a34:	18fb      	adds	r3, r7, r3
 8002a36:	1dba      	adds	r2, r7, #6
 8002a38:	8812      	ldrh	r2, [r2, #0]
 8002a3a:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	225d      	movs	r2, #93	; 0x5d
 8002a40:	5c9b      	ldrb	r3, [r3, r2]
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d004      	beq.n	8002a52 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8002a48:	231f      	movs	r3, #31
 8002a4a:	18fb      	adds	r3, r7, r3
 8002a4c:	2202      	movs	r2, #2
 8002a4e:	701a      	strb	r2, [r3, #0]
    goto error;
 8002a50:	e128      	b.n	8002ca4 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d003      	beq.n	8002a60 <HAL_SPI_Transmit+0x64>
 8002a58:	1dbb      	adds	r3, r7, #6
 8002a5a:	881b      	ldrh	r3, [r3, #0]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d104      	bne.n	8002a6a <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8002a60:	231f      	movs	r3, #31
 8002a62:	18fb      	adds	r3, r7, r3
 8002a64:	2201      	movs	r2, #1
 8002a66:	701a      	strb	r2, [r3, #0]
    goto error;
 8002a68:	e11c      	b.n	8002ca4 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	225d      	movs	r2, #93	; 0x5d
 8002a6e:	2103      	movs	r1, #3
 8002a70:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2200      	movs	r2, #0
 8002a76:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	68ba      	ldr	r2, [r7, #8]
 8002a7c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	1dba      	adds	r2, r7, #6
 8002a82:	8812      	ldrh	r2, [r2, #0]
 8002a84:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	1dba      	adds	r2, r7, #6
 8002a8a:	8812      	ldrh	r2, [r2, #0]
 8002a8c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2200      	movs	r2, #0
 8002a92:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2244      	movs	r2, #68	; 0x44
 8002a98:	2100      	movs	r1, #0
 8002a9a:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	2246      	movs	r2, #70	; 0x46
 8002aa0:	2100      	movs	r1, #0
 8002aa2:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	2200      	movs	r2, #0
 8002aae:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	689a      	ldr	r2, [r3, #8]
 8002ab4:	2380      	movs	r3, #128	; 0x80
 8002ab6:	021b      	lsls	r3, r3, #8
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d110      	bne.n	8002ade <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	2140      	movs	r1, #64	; 0x40
 8002ac8:	438a      	bics	r2, r1
 8002aca:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	2180      	movs	r1, #128	; 0x80
 8002ad8:	01c9      	lsls	r1, r1, #7
 8002ada:	430a      	orrs	r2, r1
 8002adc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	2240      	movs	r2, #64	; 0x40
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	2b40      	cmp	r3, #64	; 0x40
 8002aea:	d007      	beq.n	8002afc <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	2140      	movs	r1, #64	; 0x40
 8002af8:	430a      	orrs	r2, r1
 8002afa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	68da      	ldr	r2, [r3, #12]
 8002b00:	23e0      	movs	r3, #224	; 0xe0
 8002b02:	00db      	lsls	r3, r3, #3
 8002b04:	429a      	cmp	r2, r3
 8002b06:	d952      	bls.n	8002bae <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d004      	beq.n	8002b1a <HAL_SPI_Transmit+0x11e>
 8002b10:	2316      	movs	r3, #22
 8002b12:	18fb      	adds	r3, r7, r3
 8002b14:	881b      	ldrh	r3, [r3, #0]
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d143      	bne.n	8002ba2 <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b1e:	881a      	ldrh	r2, [r3, #0]
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b2a:	1c9a      	adds	r2, r3, #2
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b34:	b29b      	uxth	r3, r3
 8002b36:	3b01      	subs	r3, #1
 8002b38:	b29a      	uxth	r2, r3
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002b3e:	e030      	b.n	8002ba2 <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	2202      	movs	r2, #2
 8002b48:	4013      	ands	r3, r2
 8002b4a:	2b02      	cmp	r3, #2
 8002b4c:	d112      	bne.n	8002b74 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b52:	881a      	ldrh	r2, [r3, #0]
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b5e:	1c9a      	adds	r2, r3, #2
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b68:	b29b      	uxth	r3, r3
 8002b6a:	3b01      	subs	r3, #1
 8002b6c:	b29a      	uxth	r2, r3
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002b72:	e016      	b.n	8002ba2 <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002b74:	f7fe ffbe 	bl	8001af4 <HAL_GetTick>
 8002b78:	0002      	movs	r2, r0
 8002b7a:	69bb      	ldr	r3, [r7, #24]
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	683a      	ldr	r2, [r7, #0]
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d802      	bhi.n	8002b8a <HAL_SPI_Transmit+0x18e>
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	3301      	adds	r3, #1
 8002b88:	d102      	bne.n	8002b90 <HAL_SPI_Transmit+0x194>
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d108      	bne.n	8002ba2 <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 8002b90:	231f      	movs	r3, #31
 8002b92:	18fb      	adds	r3, r7, r3
 8002b94:	2203      	movs	r2, #3
 8002b96:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	225d      	movs	r2, #93	; 0x5d
 8002b9c:	2101      	movs	r1, #1
 8002b9e:	5499      	strb	r1, [r3, r2]
          goto error;
 8002ba0:	e080      	b.n	8002ca4 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ba6:	b29b      	uxth	r3, r3
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d1c9      	bne.n	8002b40 <HAL_SPI_Transmit+0x144>
 8002bac:	e053      	b.n	8002c56 <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d004      	beq.n	8002bc0 <HAL_SPI_Transmit+0x1c4>
 8002bb6:	2316      	movs	r3, #22
 8002bb8:	18fb      	adds	r3, r7, r3
 8002bba:	881b      	ldrh	r3, [r3, #0]
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	d145      	bne.n	8002c4c <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	330c      	adds	r3, #12
 8002bca:	7812      	ldrb	r2, [r2, #0]
 8002bcc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bd2:	1c5a      	adds	r2, r3, #1
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bdc:	b29b      	uxth	r3, r3
 8002bde:	3b01      	subs	r3, #1
 8002be0:	b29a      	uxth	r2, r3
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8002be6:	e031      	b.n	8002c4c <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	2202      	movs	r2, #2
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	2b02      	cmp	r3, #2
 8002bf4:	d113      	bne.n	8002c1e <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	330c      	adds	r3, #12
 8002c00:	7812      	ldrb	r2, [r2, #0]
 8002c02:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c08:	1c5a      	adds	r2, r3, #1
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c12:	b29b      	uxth	r3, r3
 8002c14:	3b01      	subs	r3, #1
 8002c16:	b29a      	uxth	r2, r3
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002c1c:	e016      	b.n	8002c4c <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002c1e:	f7fe ff69 	bl	8001af4 <HAL_GetTick>
 8002c22:	0002      	movs	r2, r0
 8002c24:	69bb      	ldr	r3, [r7, #24]
 8002c26:	1ad3      	subs	r3, r2, r3
 8002c28:	683a      	ldr	r2, [r7, #0]
 8002c2a:	429a      	cmp	r2, r3
 8002c2c:	d802      	bhi.n	8002c34 <HAL_SPI_Transmit+0x238>
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	3301      	adds	r3, #1
 8002c32:	d102      	bne.n	8002c3a <HAL_SPI_Transmit+0x23e>
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d108      	bne.n	8002c4c <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 8002c3a:	231f      	movs	r3, #31
 8002c3c:	18fb      	adds	r3, r7, r3
 8002c3e:	2203      	movs	r2, #3
 8002c40:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	225d      	movs	r2, #93	; 0x5d
 8002c46:	2101      	movs	r1, #1
 8002c48:	5499      	strb	r1, [r3, r2]
          goto error;
 8002c4a:	e02b      	b.n	8002ca4 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c50:	b29b      	uxth	r3, r3
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d1c8      	bne.n	8002be8 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002c56:	69ba      	ldr	r2, [r7, #24]
 8002c58:	6839      	ldr	r1, [r7, #0]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	0018      	movs	r0, r3
 8002c5e:	f000 fcef 	bl	8003640 <SPI_EndRxTxTransaction>
 8002c62:	1e03      	subs	r3, r0, #0
 8002c64:	d002      	beq.n	8002c6c <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2220      	movs	r2, #32
 8002c6a:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d10a      	bne.n	8002c8a <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002c74:	2300      	movs	r3, #0
 8002c76:	613b      	str	r3, [r7, #16]
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	68db      	ldr	r3, [r3, #12]
 8002c7e:	613b      	str	r3, [r7, #16]
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	613b      	str	r3, [r7, #16]
 8002c88:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d004      	beq.n	8002c9c <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 8002c92:	231f      	movs	r3, #31
 8002c94:	18fb      	adds	r3, r7, r3
 8002c96:	2201      	movs	r2, #1
 8002c98:	701a      	strb	r2, [r3, #0]
 8002c9a:	e003      	b.n	8002ca4 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	225d      	movs	r2, #93	; 0x5d
 8002ca0:	2101      	movs	r1, #1
 8002ca2:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	225c      	movs	r2, #92	; 0x5c
 8002ca8:	2100      	movs	r1, #0
 8002caa:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002cac:	231f      	movs	r3, #31
 8002cae:	18fb      	adds	r3, r7, r3
 8002cb0:	781b      	ldrb	r3, [r3, #0]
}
 8002cb2:	0018      	movs	r0, r3
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	b008      	add	sp, #32
 8002cb8:	bd80      	pop	{r7, pc}
	...

08002cbc <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cbc:	b590      	push	{r4, r7, lr}
 8002cbe:	b089      	sub	sp, #36	; 0x24
 8002cc0:	af02      	add	r7, sp, #8
 8002cc2:	60f8      	str	r0, [r7, #12]
 8002cc4:	60b9      	str	r1, [r7, #8]
 8002cc6:	603b      	str	r3, [r7, #0]
 8002cc8:	1dbb      	adds	r3, r7, #6
 8002cca:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002ccc:	2117      	movs	r1, #23
 8002cce:	187b      	adds	r3, r7, r1
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	701a      	strb	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	225d      	movs	r2, #93	; 0x5d
 8002cd8:	5c9b      	ldrb	r3, [r3, r2]
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d003      	beq.n	8002ce8 <HAL_SPI_Receive+0x2c>
  {
    errorcode = HAL_BUSY;
 8002ce0:	187b      	adds	r3, r7, r1
 8002ce2:	2202      	movs	r2, #2
 8002ce4:	701a      	strb	r2, [r3, #0]
    goto error;
 8002ce6:	e12b      	b.n	8002f40 <HAL_SPI_Receive+0x284>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	685a      	ldr	r2, [r3, #4]
 8002cec:	2382      	movs	r3, #130	; 0x82
 8002cee:	005b      	lsls	r3, r3, #1
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d113      	bne.n	8002d1c <HAL_SPI_Receive+0x60>
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d10f      	bne.n	8002d1c <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	225d      	movs	r2, #93	; 0x5d
 8002d00:	2104      	movs	r1, #4
 8002d02:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002d04:	1dbb      	adds	r3, r7, #6
 8002d06:	881c      	ldrh	r4, [r3, #0]
 8002d08:	68ba      	ldr	r2, [r7, #8]
 8002d0a:	68b9      	ldr	r1, [r7, #8]
 8002d0c:	68f8      	ldr	r0, [r7, #12]
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	9300      	str	r3, [sp, #0]
 8002d12:	0023      	movs	r3, r4
 8002d14:	f000 f924 	bl	8002f60 <HAL_SPI_TransmitReceive>
 8002d18:	0003      	movs	r3, r0
 8002d1a:	e118      	b.n	8002f4e <HAL_SPI_Receive+0x292>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	225c      	movs	r2, #92	; 0x5c
 8002d20:	5c9b      	ldrb	r3, [r3, r2]
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	d101      	bne.n	8002d2a <HAL_SPI_Receive+0x6e>
 8002d26:	2302      	movs	r3, #2
 8002d28:	e111      	b.n	8002f4e <HAL_SPI_Receive+0x292>
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	225c      	movs	r2, #92	; 0x5c
 8002d2e:	2101      	movs	r1, #1
 8002d30:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002d32:	f7fe fedf 	bl	8001af4 <HAL_GetTick>
 8002d36:	0003      	movs	r3, r0
 8002d38:	613b      	str	r3, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d003      	beq.n	8002d48 <HAL_SPI_Receive+0x8c>
 8002d40:	1dbb      	adds	r3, r7, #6
 8002d42:	881b      	ldrh	r3, [r3, #0]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d104      	bne.n	8002d52 <HAL_SPI_Receive+0x96>
  {
    errorcode = HAL_ERROR;
 8002d48:	2317      	movs	r3, #23
 8002d4a:	18fb      	adds	r3, r7, r3
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	701a      	strb	r2, [r3, #0]
    goto error;
 8002d50:	e0f6      	b.n	8002f40 <HAL_SPI_Receive+0x284>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	225d      	movs	r2, #93	; 0x5d
 8002d56:	2104      	movs	r1, #4
 8002d58:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	68ba      	ldr	r2, [r7, #8]
 8002d64:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	1dba      	adds	r2, r7, #6
 8002d6a:	2144      	movs	r1, #68	; 0x44
 8002d6c:	8812      	ldrh	r2, [r2, #0]
 8002d6e:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	1dba      	adds	r2, r7, #6
 8002d74:	2146      	movs	r1, #70	; 0x46
 8002d76:	8812      	ldrh	r2, [r2, #0]
 8002d78:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2200      	movs	r2, #0
 8002d84:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	2200      	movs	r2, #0
 8002d96:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	68da      	ldr	r2, [r3, #12]
 8002d9c:	23e0      	movs	r3, #224	; 0xe0
 8002d9e:	00db      	lsls	r3, r3, #3
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d908      	bls.n	8002db6 <HAL_SPI_Receive+0xfa>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	685a      	ldr	r2, [r3, #4]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	496a      	ldr	r1, [pc, #424]	; (8002f58 <HAL_SPI_Receive+0x29c>)
 8002db0:	400a      	ands	r2, r1
 8002db2:	605a      	str	r2, [r3, #4]
 8002db4:	e008      	b.n	8002dc8 <HAL_SPI_Receive+0x10c>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	685a      	ldr	r2, [r3, #4]
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	2180      	movs	r1, #128	; 0x80
 8002dc2:	0149      	lsls	r1, r1, #5
 8002dc4:	430a      	orrs	r2, r1
 8002dc6:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	689a      	ldr	r2, [r3, #8]
 8002dcc:	2380      	movs	r3, #128	; 0x80
 8002dce:	021b      	lsls	r3, r3, #8
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d10f      	bne.n	8002df4 <HAL_SPI_Receive+0x138>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	2140      	movs	r1, #64	; 0x40
 8002de0:	438a      	bics	r2, r1
 8002de2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	495b      	ldr	r1, [pc, #364]	; (8002f5c <HAL_SPI_Receive+0x2a0>)
 8002df0:	400a      	ands	r2, r1
 8002df2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	2240      	movs	r2, #64	; 0x40
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	2b40      	cmp	r3, #64	; 0x40
 8002e00:	d007      	beq.n	8002e12 <HAL_SPI_Receive+0x156>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	2140      	movs	r1, #64	; 0x40
 8002e0e:	430a      	orrs	r2, r1
 8002e10:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	68da      	ldr	r2, [r3, #12]
 8002e16:	23e0      	movs	r3, #224	; 0xe0
 8002e18:	00db      	lsls	r3, r3, #3
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d900      	bls.n	8002e20 <HAL_SPI_Receive+0x164>
 8002e1e:	e071      	b.n	8002f04 <HAL_SPI_Receive+0x248>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002e20:	e035      	b.n	8002e8e <HAL_SPI_Receive+0x1d2>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	2201      	movs	r2, #1
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d117      	bne.n	8002e60 <HAL_SPI_Receive+0x1a4>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	330c      	adds	r3, #12
 8002e36:	001a      	movs	r2, r3
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3c:	7812      	ldrb	r2, [r2, #0]
 8002e3e:	b2d2      	uxtb	r2, r2
 8002e40:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e46:	1c5a      	adds	r2, r3, #1
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	2246      	movs	r2, #70	; 0x46
 8002e50:	5a9b      	ldrh	r3, [r3, r2]
 8002e52:	b29b      	uxth	r3, r3
 8002e54:	3b01      	subs	r3, #1
 8002e56:	b299      	uxth	r1, r3
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2246      	movs	r2, #70	; 0x46
 8002e5c:	5299      	strh	r1, [r3, r2]
 8002e5e:	e016      	b.n	8002e8e <HAL_SPI_Receive+0x1d2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002e60:	f7fe fe48 	bl	8001af4 <HAL_GetTick>
 8002e64:	0002      	movs	r2, r0
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	683a      	ldr	r2, [r7, #0]
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d802      	bhi.n	8002e76 <HAL_SPI_Receive+0x1ba>
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	3301      	adds	r3, #1
 8002e74:	d102      	bne.n	8002e7c <HAL_SPI_Receive+0x1c0>
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d108      	bne.n	8002e8e <HAL_SPI_Receive+0x1d2>
        {
          errorcode = HAL_TIMEOUT;
 8002e7c:	2317      	movs	r3, #23
 8002e7e:	18fb      	adds	r3, r7, r3
 8002e80:	2203      	movs	r2, #3
 8002e82:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	225d      	movs	r2, #93	; 0x5d
 8002e88:	2101      	movs	r1, #1
 8002e8a:	5499      	strb	r1, [r3, r2]
          goto error;
 8002e8c:	e058      	b.n	8002f40 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2246      	movs	r2, #70	; 0x46
 8002e92:	5a9b      	ldrh	r3, [r3, r2]
 8002e94:	b29b      	uxth	r3, r3
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d1c3      	bne.n	8002e22 <HAL_SPI_Receive+0x166>
 8002e9a:	e039      	b.n	8002f10 <HAL_SPI_Receive+0x254>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d115      	bne.n	8002ed6 <HAL_SPI_Receive+0x21a>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	68da      	ldr	r2, [r3, #12]
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb4:	b292      	uxth	r2, r2
 8002eb6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ebc:	1c9a      	adds	r2, r3, #2
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2246      	movs	r2, #70	; 0x46
 8002ec6:	5a9b      	ldrh	r3, [r3, r2]
 8002ec8:	b29b      	uxth	r3, r3
 8002eca:	3b01      	subs	r3, #1
 8002ecc:	b299      	uxth	r1, r3
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2246      	movs	r2, #70	; 0x46
 8002ed2:	5299      	strh	r1, [r3, r2]
 8002ed4:	e016      	b.n	8002f04 <HAL_SPI_Receive+0x248>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002ed6:	f7fe fe0d 	bl	8001af4 <HAL_GetTick>
 8002eda:	0002      	movs	r2, r0
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	1ad3      	subs	r3, r2, r3
 8002ee0:	683a      	ldr	r2, [r7, #0]
 8002ee2:	429a      	cmp	r2, r3
 8002ee4:	d802      	bhi.n	8002eec <HAL_SPI_Receive+0x230>
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	3301      	adds	r3, #1
 8002eea:	d102      	bne.n	8002ef2 <HAL_SPI_Receive+0x236>
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d108      	bne.n	8002f04 <HAL_SPI_Receive+0x248>
        {
          errorcode = HAL_TIMEOUT;
 8002ef2:	2317      	movs	r3, #23
 8002ef4:	18fb      	adds	r3, r7, r3
 8002ef6:	2203      	movs	r2, #3
 8002ef8:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	225d      	movs	r2, #93	; 0x5d
 8002efe:	2101      	movs	r1, #1
 8002f00:	5499      	strb	r1, [r3, r2]
          goto error;
 8002f02:	e01d      	b.n	8002f40 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2246      	movs	r2, #70	; 0x46
 8002f08:	5a9b      	ldrh	r3, [r3, r2]
 8002f0a:	b29b      	uxth	r3, r3
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d1c5      	bne.n	8002e9c <HAL_SPI_Receive+0x1e0>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002f10:	693a      	ldr	r2, [r7, #16]
 8002f12:	6839      	ldr	r1, [r7, #0]
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	0018      	movs	r0, r3
 8002f18:	f000 fb34 	bl	8003584 <SPI_EndRxTransaction>
 8002f1c:	1e03      	subs	r3, r0, #0
 8002f1e:	d002      	beq.n	8002f26 <HAL_SPI_Receive+0x26a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2220      	movs	r2, #32
 8002f24:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d004      	beq.n	8002f38 <HAL_SPI_Receive+0x27c>
  {
    errorcode = HAL_ERROR;
 8002f2e:	2317      	movs	r3, #23
 8002f30:	18fb      	adds	r3, r7, r3
 8002f32:	2201      	movs	r2, #1
 8002f34:	701a      	strb	r2, [r3, #0]
 8002f36:	e003      	b.n	8002f40 <HAL_SPI_Receive+0x284>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	225d      	movs	r2, #93	; 0x5d
 8002f3c:	2101      	movs	r1, #1
 8002f3e:	5499      	strb	r1, [r3, r2]
  }

error :
  __HAL_UNLOCK(hspi);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	225c      	movs	r2, #92	; 0x5c
 8002f44:	2100      	movs	r1, #0
 8002f46:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002f48:	2317      	movs	r3, #23
 8002f4a:	18fb      	adds	r3, r7, r3
 8002f4c:	781b      	ldrb	r3, [r3, #0]
}
 8002f4e:	0018      	movs	r0, r3
 8002f50:	46bd      	mov	sp, r7
 8002f52:	b007      	add	sp, #28
 8002f54:	bd90      	pop	{r4, r7, pc}
 8002f56:	46c0      	nop			; (mov r8, r8)
 8002f58:	ffffefff 	.word	0xffffefff
 8002f5c:	ffffbfff 	.word	0xffffbfff

08002f60 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b08a      	sub	sp, #40	; 0x28
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	60f8      	str	r0, [r7, #12]
 8002f68:	60b9      	str	r1, [r7, #8]
 8002f6a:	607a      	str	r2, [r7, #4]
 8002f6c:	001a      	movs	r2, r3
 8002f6e:	1cbb      	adds	r3, r7, #2
 8002f70:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002f72:	2301      	movs	r3, #1
 8002f74:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002f76:	2323      	movs	r3, #35	; 0x23
 8002f78:	18fb      	adds	r3, r7, r3
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	225c      	movs	r2, #92	; 0x5c
 8002f82:	5c9b      	ldrb	r3, [r3, r2]
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	d101      	bne.n	8002f8c <HAL_SPI_TransmitReceive+0x2c>
 8002f88:	2302      	movs	r3, #2
 8002f8a:	e1c4      	b.n	8003316 <HAL_SPI_TransmitReceive+0x3b6>
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	225c      	movs	r2, #92	; 0x5c
 8002f90:	2101      	movs	r1, #1
 8002f92:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002f94:	f7fe fdae 	bl	8001af4 <HAL_GetTick>
 8002f98:	0003      	movs	r3, r0
 8002f9a:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002f9c:	201b      	movs	r0, #27
 8002f9e:	183b      	adds	r3, r7, r0
 8002fa0:	68fa      	ldr	r2, [r7, #12]
 8002fa2:	215d      	movs	r1, #93	; 0x5d
 8002fa4:	5c52      	ldrb	r2, [r2, r1]
 8002fa6:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002fae:	2312      	movs	r3, #18
 8002fb0:	18fb      	adds	r3, r7, r3
 8002fb2:	1cba      	adds	r2, r7, #2
 8002fb4:	8812      	ldrh	r2, [r2, #0]
 8002fb6:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002fb8:	183b      	adds	r3, r7, r0
 8002fba:	781b      	ldrb	r3, [r3, #0]
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d011      	beq.n	8002fe4 <HAL_SPI_TransmitReceive+0x84>
 8002fc0:	697a      	ldr	r2, [r7, #20]
 8002fc2:	2382      	movs	r3, #130	; 0x82
 8002fc4:	005b      	lsls	r3, r3, #1
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d107      	bne.n	8002fda <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d103      	bne.n	8002fda <HAL_SPI_TransmitReceive+0x7a>
 8002fd2:	183b      	adds	r3, r7, r0
 8002fd4:	781b      	ldrb	r3, [r3, #0]
 8002fd6:	2b04      	cmp	r3, #4
 8002fd8:	d004      	beq.n	8002fe4 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8002fda:	2323      	movs	r3, #35	; 0x23
 8002fdc:	18fb      	adds	r3, r7, r3
 8002fde:	2202      	movs	r2, #2
 8002fe0:	701a      	strb	r2, [r3, #0]
    goto error;
 8002fe2:	e191      	b.n	8003308 <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d006      	beq.n	8002ff8 <HAL_SPI_TransmitReceive+0x98>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d003      	beq.n	8002ff8 <HAL_SPI_TransmitReceive+0x98>
 8002ff0:	1cbb      	adds	r3, r7, #2
 8002ff2:	881b      	ldrh	r3, [r3, #0]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d104      	bne.n	8003002 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8002ff8:	2323      	movs	r3, #35	; 0x23
 8002ffa:	18fb      	adds	r3, r7, r3
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	701a      	strb	r2, [r3, #0]
    goto error;
 8003000:	e182      	b.n	8003308 <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	225d      	movs	r2, #93	; 0x5d
 8003006:	5c9b      	ldrb	r3, [r3, r2]
 8003008:	b2db      	uxtb	r3, r3
 800300a:	2b04      	cmp	r3, #4
 800300c:	d003      	beq.n	8003016 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	225d      	movs	r2, #93	; 0x5d
 8003012:	2105      	movs	r1, #5
 8003014:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2200      	movs	r2, #0
 800301a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	687a      	ldr	r2, [r7, #4]
 8003020:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	1cba      	adds	r2, r7, #2
 8003026:	2146      	movs	r1, #70	; 0x46
 8003028:	8812      	ldrh	r2, [r2, #0]
 800302a:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	1cba      	adds	r2, r7, #2
 8003030:	2144      	movs	r1, #68	; 0x44
 8003032:	8812      	ldrh	r2, [r2, #0]
 8003034:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	68ba      	ldr	r2, [r7, #8]
 800303a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	1cba      	adds	r2, r7, #2
 8003040:	8812      	ldrh	r2, [r2, #0]
 8003042:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	1cba      	adds	r2, r7, #2
 8003048:	8812      	ldrh	r2, [r2, #0]
 800304a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2200      	movs	r2, #0
 8003050:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2200      	movs	r2, #0
 8003056:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	68da      	ldr	r2, [r3, #12]
 800305c:	23e0      	movs	r3, #224	; 0xe0
 800305e:	00db      	lsls	r3, r3, #3
 8003060:	429a      	cmp	r2, r3
 8003062:	d908      	bls.n	8003076 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	685a      	ldr	r2, [r3, #4]
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	49ac      	ldr	r1, [pc, #688]	; (8003320 <HAL_SPI_TransmitReceive+0x3c0>)
 8003070:	400a      	ands	r2, r1
 8003072:	605a      	str	r2, [r3, #4]
 8003074:	e008      	b.n	8003088 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	685a      	ldr	r2, [r3, #4]
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	2180      	movs	r1, #128	; 0x80
 8003082:	0149      	lsls	r1, r1, #5
 8003084:	430a      	orrs	r2, r1
 8003086:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	2240      	movs	r2, #64	; 0x40
 8003090:	4013      	ands	r3, r2
 8003092:	2b40      	cmp	r3, #64	; 0x40
 8003094:	d007      	beq.n	80030a6 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	2140      	movs	r1, #64	; 0x40
 80030a2:	430a      	orrs	r2, r1
 80030a4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	68da      	ldr	r2, [r3, #12]
 80030aa:	23e0      	movs	r3, #224	; 0xe0
 80030ac:	00db      	lsls	r3, r3, #3
 80030ae:	429a      	cmp	r2, r3
 80030b0:	d800      	bhi.n	80030b4 <HAL_SPI_TransmitReceive+0x154>
 80030b2:	e083      	b.n	80031bc <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d005      	beq.n	80030c8 <HAL_SPI_TransmitReceive+0x168>
 80030bc:	2312      	movs	r3, #18
 80030be:	18fb      	adds	r3, r7, r3
 80030c0:	881b      	ldrh	r3, [r3, #0]
 80030c2:	2b01      	cmp	r3, #1
 80030c4:	d000      	beq.n	80030c8 <HAL_SPI_TransmitReceive+0x168>
 80030c6:	e06d      	b.n	80031a4 <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030cc:	881a      	ldrh	r2, [r3, #0]
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030d8:	1c9a      	adds	r2, r3, #2
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030e2:	b29b      	uxth	r3, r3
 80030e4:	3b01      	subs	r3, #1
 80030e6:	b29a      	uxth	r2, r3
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80030ec:	e05a      	b.n	80031a4 <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	2202      	movs	r2, #2
 80030f6:	4013      	ands	r3, r2
 80030f8:	2b02      	cmp	r3, #2
 80030fa:	d11b      	bne.n	8003134 <HAL_SPI_TransmitReceive+0x1d4>
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003100:	b29b      	uxth	r3, r3
 8003102:	2b00      	cmp	r3, #0
 8003104:	d016      	beq.n	8003134 <HAL_SPI_TransmitReceive+0x1d4>
 8003106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003108:	2b01      	cmp	r3, #1
 800310a:	d113      	bne.n	8003134 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003110:	881a      	ldrh	r2, [r3, #0]
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800311c:	1c9a      	adds	r2, r3, #2
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003126:	b29b      	uxth	r3, r3
 8003128:	3b01      	subs	r3, #1
 800312a:	b29a      	uxth	r2, r3
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003130:	2300      	movs	r3, #0
 8003132:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	2201      	movs	r2, #1
 800313c:	4013      	ands	r3, r2
 800313e:	2b01      	cmp	r3, #1
 8003140:	d11c      	bne.n	800317c <HAL_SPI_TransmitReceive+0x21c>
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2246      	movs	r2, #70	; 0x46
 8003146:	5a9b      	ldrh	r3, [r3, r2]
 8003148:	b29b      	uxth	r3, r3
 800314a:	2b00      	cmp	r3, #0
 800314c:	d016      	beq.n	800317c <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	68da      	ldr	r2, [r3, #12]
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003158:	b292      	uxth	r2, r2
 800315a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003160:	1c9a      	adds	r2, r3, #2
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2246      	movs	r2, #70	; 0x46
 800316a:	5a9b      	ldrh	r3, [r3, r2]
 800316c:	b29b      	uxth	r3, r3
 800316e:	3b01      	subs	r3, #1
 8003170:	b299      	uxth	r1, r3
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2246      	movs	r2, #70	; 0x46
 8003176:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003178:	2301      	movs	r3, #1
 800317a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800317c:	f7fe fcba 	bl	8001af4 <HAL_GetTick>
 8003180:	0002      	movs	r2, r0
 8003182:	69fb      	ldr	r3, [r7, #28]
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003188:	429a      	cmp	r2, r3
 800318a:	d80b      	bhi.n	80031a4 <HAL_SPI_TransmitReceive+0x244>
 800318c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800318e:	3301      	adds	r3, #1
 8003190:	d008      	beq.n	80031a4 <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 8003192:	2323      	movs	r3, #35	; 0x23
 8003194:	18fb      	adds	r3, r7, r3
 8003196:	2203      	movs	r2, #3
 8003198:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	225d      	movs	r2, #93	; 0x5d
 800319e:	2101      	movs	r1, #1
 80031a0:	5499      	strb	r1, [r3, r2]
        goto error;
 80031a2:	e0b1      	b.n	8003308 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031a8:	b29b      	uxth	r3, r3
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d19f      	bne.n	80030ee <HAL_SPI_TransmitReceive+0x18e>
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2246      	movs	r2, #70	; 0x46
 80031b2:	5a9b      	ldrh	r3, [r3, r2]
 80031b4:	b29b      	uxth	r3, r3
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d199      	bne.n	80030ee <HAL_SPI_TransmitReceive+0x18e>
 80031ba:	e089      	b.n	80032d0 <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d005      	beq.n	80031d0 <HAL_SPI_TransmitReceive+0x270>
 80031c4:	2312      	movs	r3, #18
 80031c6:	18fb      	adds	r3, r7, r3
 80031c8:	881b      	ldrh	r3, [r3, #0]
 80031ca:	2b01      	cmp	r3, #1
 80031cc:	d000      	beq.n	80031d0 <HAL_SPI_TransmitReceive+0x270>
 80031ce:	e074      	b.n	80032ba <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	330c      	adds	r3, #12
 80031da:	7812      	ldrb	r2, [r2, #0]
 80031dc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031e2:	1c5a      	adds	r2, r3, #1
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031ec:	b29b      	uxth	r3, r3
 80031ee:	3b01      	subs	r3, #1
 80031f0:	b29a      	uxth	r2, r3
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80031f6:	e060      	b.n	80032ba <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	2202      	movs	r2, #2
 8003200:	4013      	ands	r3, r2
 8003202:	2b02      	cmp	r3, #2
 8003204:	d11c      	bne.n	8003240 <HAL_SPI_TransmitReceive+0x2e0>
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800320a:	b29b      	uxth	r3, r3
 800320c:	2b00      	cmp	r3, #0
 800320e:	d017      	beq.n	8003240 <HAL_SPI_TransmitReceive+0x2e0>
 8003210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003212:	2b01      	cmp	r3, #1
 8003214:	d114      	bne.n	8003240 <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	330c      	adds	r3, #12
 8003220:	7812      	ldrb	r2, [r2, #0]
 8003222:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003228:	1c5a      	adds	r2, r3, #1
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003232:	b29b      	uxth	r3, r3
 8003234:	3b01      	subs	r3, #1
 8003236:	b29a      	uxth	r2, r3
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800323c:	2300      	movs	r3, #0
 800323e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	2201      	movs	r2, #1
 8003248:	4013      	ands	r3, r2
 800324a:	2b01      	cmp	r3, #1
 800324c:	d11e      	bne.n	800328c <HAL_SPI_TransmitReceive+0x32c>
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2246      	movs	r2, #70	; 0x46
 8003252:	5a9b      	ldrh	r3, [r3, r2]
 8003254:	b29b      	uxth	r3, r3
 8003256:	2b00      	cmp	r3, #0
 8003258:	d018      	beq.n	800328c <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	330c      	adds	r3, #12
 8003260:	001a      	movs	r2, r3
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003266:	7812      	ldrb	r2, [r2, #0]
 8003268:	b2d2      	uxtb	r2, r2
 800326a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003270:	1c5a      	adds	r2, r3, #1
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2246      	movs	r2, #70	; 0x46
 800327a:	5a9b      	ldrh	r3, [r3, r2]
 800327c:	b29b      	uxth	r3, r3
 800327e:	3b01      	subs	r3, #1
 8003280:	b299      	uxth	r1, r3
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2246      	movs	r2, #70	; 0x46
 8003286:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003288:	2301      	movs	r3, #1
 800328a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800328c:	f7fe fc32 	bl	8001af4 <HAL_GetTick>
 8003290:	0002      	movs	r2, r0
 8003292:	69fb      	ldr	r3, [r7, #28]
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003298:	429a      	cmp	r2, r3
 800329a:	d802      	bhi.n	80032a2 <HAL_SPI_TransmitReceive+0x342>
 800329c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800329e:	3301      	adds	r3, #1
 80032a0:	d102      	bne.n	80032a8 <HAL_SPI_TransmitReceive+0x348>
 80032a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d108      	bne.n	80032ba <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 80032a8:	2323      	movs	r3, #35	; 0x23
 80032aa:	18fb      	adds	r3, r7, r3
 80032ac:	2203      	movs	r2, #3
 80032ae:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	225d      	movs	r2, #93	; 0x5d
 80032b4:	2101      	movs	r1, #1
 80032b6:	5499      	strb	r1, [r3, r2]
        goto error;
 80032b8:	e026      	b.n	8003308 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032be:	b29b      	uxth	r3, r3
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d199      	bne.n	80031f8 <HAL_SPI_TransmitReceive+0x298>
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2246      	movs	r2, #70	; 0x46
 80032c8:	5a9b      	ldrh	r3, [r3, r2]
 80032ca:	b29b      	uxth	r3, r3
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d193      	bne.n	80031f8 <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80032d0:	69fa      	ldr	r2, [r7, #28]
 80032d2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	0018      	movs	r0, r3
 80032d8:	f000 f9b2 	bl	8003640 <SPI_EndRxTxTransaction>
 80032dc:	1e03      	subs	r3, r0, #0
 80032de:	d006      	beq.n	80032ee <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 80032e0:	2323      	movs	r3, #35	; 0x23
 80032e2:	18fb      	adds	r3, r7, r3
 80032e4:	2201      	movs	r2, #1
 80032e6:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2220      	movs	r2, #32
 80032ec:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d004      	beq.n	8003300 <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 80032f6:	2323      	movs	r3, #35	; 0x23
 80032f8:	18fb      	adds	r3, r7, r3
 80032fa:	2201      	movs	r2, #1
 80032fc:	701a      	strb	r2, [r3, #0]
 80032fe:	e003      	b.n	8003308 <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	225d      	movs	r2, #93	; 0x5d
 8003304:	2101      	movs	r1, #1
 8003306:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	225c      	movs	r2, #92	; 0x5c
 800330c:	2100      	movs	r1, #0
 800330e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003310:	2323      	movs	r3, #35	; 0x23
 8003312:	18fb      	adds	r3, r7, r3
 8003314:	781b      	ldrb	r3, [r3, #0]
}
 8003316:	0018      	movs	r0, r3
 8003318:	46bd      	mov	sp, r7
 800331a:	b00a      	add	sp, #40	; 0x28
 800331c:	bd80      	pop	{r7, pc}
 800331e:	46c0      	nop			; (mov r8, r8)
 8003320:	ffffefff 	.word	0xffffefff

08003324 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b088      	sub	sp, #32
 8003328:	af00      	add	r7, sp, #0
 800332a:	60f8      	str	r0, [r7, #12]
 800332c:	60b9      	str	r1, [r7, #8]
 800332e:	603b      	str	r3, [r7, #0]
 8003330:	1dfb      	adds	r3, r7, #7
 8003332:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003334:	f7fe fbde 	bl	8001af4 <HAL_GetTick>
 8003338:	0002      	movs	r2, r0
 800333a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800333c:	1a9b      	subs	r3, r3, r2
 800333e:	683a      	ldr	r2, [r7, #0]
 8003340:	18d3      	adds	r3, r2, r3
 8003342:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003344:	f7fe fbd6 	bl	8001af4 <HAL_GetTick>
 8003348:	0003      	movs	r3, r0
 800334a:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800334c:	4b3a      	ldr	r3, [pc, #232]	; (8003438 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	015b      	lsls	r3, r3, #5
 8003352:	0d1b      	lsrs	r3, r3, #20
 8003354:	69fa      	ldr	r2, [r7, #28]
 8003356:	4353      	muls	r3, r2
 8003358:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800335a:	e058      	b.n	800340e <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	3301      	adds	r3, #1
 8003360:	d055      	beq.n	800340e <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003362:	f7fe fbc7 	bl	8001af4 <HAL_GetTick>
 8003366:	0002      	movs	r2, r0
 8003368:	69bb      	ldr	r3, [r7, #24]
 800336a:	1ad3      	subs	r3, r2, r3
 800336c:	69fa      	ldr	r2, [r7, #28]
 800336e:	429a      	cmp	r2, r3
 8003370:	d902      	bls.n	8003378 <SPI_WaitFlagStateUntilTimeout+0x54>
 8003372:	69fb      	ldr	r3, [r7, #28]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d142      	bne.n	80033fe <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	685a      	ldr	r2, [r3, #4]
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	21e0      	movs	r1, #224	; 0xe0
 8003384:	438a      	bics	r2, r1
 8003386:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	685a      	ldr	r2, [r3, #4]
 800338c:	2382      	movs	r3, #130	; 0x82
 800338e:	005b      	lsls	r3, r3, #1
 8003390:	429a      	cmp	r2, r3
 8003392:	d113      	bne.n	80033bc <SPI_WaitFlagStateUntilTimeout+0x98>
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	689a      	ldr	r2, [r3, #8]
 8003398:	2380      	movs	r3, #128	; 0x80
 800339a:	021b      	lsls	r3, r3, #8
 800339c:	429a      	cmp	r2, r3
 800339e:	d005      	beq.n	80033ac <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	689a      	ldr	r2, [r3, #8]
 80033a4:	2380      	movs	r3, #128	; 0x80
 80033a6:	00db      	lsls	r3, r3, #3
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d107      	bne.n	80033bc <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	681a      	ldr	r2, [r3, #0]
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	2140      	movs	r1, #64	; 0x40
 80033b8:	438a      	bics	r2, r1
 80033ba:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80033c0:	2380      	movs	r3, #128	; 0x80
 80033c2:	019b      	lsls	r3, r3, #6
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d110      	bne.n	80033ea <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	491a      	ldr	r1, [pc, #104]	; (800343c <SPI_WaitFlagStateUntilTimeout+0x118>)
 80033d4:	400a      	ands	r2, r1
 80033d6:	601a      	str	r2, [r3, #0]
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	2180      	movs	r1, #128	; 0x80
 80033e4:	0189      	lsls	r1, r1, #6
 80033e6:	430a      	orrs	r2, r1
 80033e8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	225d      	movs	r2, #93	; 0x5d
 80033ee:	2101      	movs	r1, #1
 80033f0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	225c      	movs	r2, #92	; 0x5c
 80033f6:	2100      	movs	r1, #0
 80033f8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80033fa:	2303      	movs	r3, #3
 80033fc:	e017      	b.n	800342e <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d101      	bne.n	8003408 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8003404:	2300      	movs	r3, #0
 8003406:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	3b01      	subs	r3, #1
 800340c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	68ba      	ldr	r2, [r7, #8]
 8003416:	4013      	ands	r3, r2
 8003418:	68ba      	ldr	r2, [r7, #8]
 800341a:	1ad3      	subs	r3, r2, r3
 800341c:	425a      	negs	r2, r3
 800341e:	4153      	adcs	r3, r2
 8003420:	b2db      	uxtb	r3, r3
 8003422:	001a      	movs	r2, r3
 8003424:	1dfb      	adds	r3, r7, #7
 8003426:	781b      	ldrb	r3, [r3, #0]
 8003428:	429a      	cmp	r2, r3
 800342a:	d197      	bne.n	800335c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800342c:	2300      	movs	r3, #0
}
 800342e:	0018      	movs	r0, r3
 8003430:	46bd      	mov	sp, r7
 8003432:	b008      	add	sp, #32
 8003434:	bd80      	pop	{r7, pc}
 8003436:	46c0      	nop			; (mov r8, r8)
 8003438:	20000008 	.word	0x20000008
 800343c:	ffffdfff 	.word	0xffffdfff

08003440 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b08a      	sub	sp, #40	; 0x28
 8003444:	af00      	add	r7, sp, #0
 8003446:	60f8      	str	r0, [r7, #12]
 8003448:	60b9      	str	r1, [r7, #8]
 800344a:	607a      	str	r2, [r7, #4]
 800344c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800344e:	2317      	movs	r3, #23
 8003450:	18fb      	adds	r3, r7, r3
 8003452:	2200      	movs	r2, #0
 8003454:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003456:	f7fe fb4d 	bl	8001af4 <HAL_GetTick>
 800345a:	0002      	movs	r2, r0
 800345c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800345e:	1a9b      	subs	r3, r3, r2
 8003460:	683a      	ldr	r2, [r7, #0]
 8003462:	18d3      	adds	r3, r2, r3
 8003464:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003466:	f7fe fb45 	bl	8001af4 <HAL_GetTick>
 800346a:	0003      	movs	r3, r0
 800346c:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	330c      	adds	r3, #12
 8003474:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003476:	4b41      	ldr	r3, [pc, #260]	; (800357c <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	0013      	movs	r3, r2
 800347c:	009b      	lsls	r3, r3, #2
 800347e:	189b      	adds	r3, r3, r2
 8003480:	00da      	lsls	r2, r3, #3
 8003482:	1ad3      	subs	r3, r2, r3
 8003484:	0d1b      	lsrs	r3, r3, #20
 8003486:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003488:	4353      	muls	r3, r2
 800348a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800348c:	e068      	b.n	8003560 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800348e:	68ba      	ldr	r2, [r7, #8]
 8003490:	23c0      	movs	r3, #192	; 0xc0
 8003492:	00db      	lsls	r3, r3, #3
 8003494:	429a      	cmp	r2, r3
 8003496:	d10a      	bne.n	80034ae <SPI_WaitFifoStateUntilTimeout+0x6e>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d107      	bne.n	80034ae <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800349e:	69fb      	ldr	r3, [r7, #28]
 80034a0:	781b      	ldrb	r3, [r3, #0]
 80034a2:	b2da      	uxtb	r2, r3
 80034a4:	2117      	movs	r1, #23
 80034a6:	187b      	adds	r3, r7, r1
 80034a8:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80034aa:	187b      	adds	r3, r7, r1
 80034ac:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	3301      	adds	r3, #1
 80034b2:	d055      	beq.n	8003560 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80034b4:	f7fe fb1e 	bl	8001af4 <HAL_GetTick>
 80034b8:	0002      	movs	r2, r0
 80034ba:	6a3b      	ldr	r3, [r7, #32]
 80034bc:	1ad3      	subs	r3, r2, r3
 80034be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034c0:	429a      	cmp	r2, r3
 80034c2:	d902      	bls.n	80034ca <SPI_WaitFifoStateUntilTimeout+0x8a>
 80034c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d142      	bne.n	8003550 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	685a      	ldr	r2, [r3, #4]
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	21e0      	movs	r1, #224	; 0xe0
 80034d6:	438a      	bics	r2, r1
 80034d8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	685a      	ldr	r2, [r3, #4]
 80034de:	2382      	movs	r3, #130	; 0x82
 80034e0:	005b      	lsls	r3, r3, #1
 80034e2:	429a      	cmp	r2, r3
 80034e4:	d113      	bne.n	800350e <SPI_WaitFifoStateUntilTimeout+0xce>
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	689a      	ldr	r2, [r3, #8]
 80034ea:	2380      	movs	r3, #128	; 0x80
 80034ec:	021b      	lsls	r3, r3, #8
 80034ee:	429a      	cmp	r2, r3
 80034f0:	d005      	beq.n	80034fe <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	689a      	ldr	r2, [r3, #8]
 80034f6:	2380      	movs	r3, #128	; 0x80
 80034f8:	00db      	lsls	r3, r3, #3
 80034fa:	429a      	cmp	r2, r3
 80034fc:	d107      	bne.n	800350e <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	681a      	ldr	r2, [r3, #0]
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	2140      	movs	r1, #64	; 0x40
 800350a:	438a      	bics	r2, r1
 800350c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003512:	2380      	movs	r3, #128	; 0x80
 8003514:	019b      	lsls	r3, r3, #6
 8003516:	429a      	cmp	r2, r3
 8003518:	d110      	bne.n	800353c <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	681a      	ldr	r2, [r3, #0]
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4916      	ldr	r1, [pc, #88]	; (8003580 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8003526:	400a      	ands	r2, r1
 8003528:	601a      	str	r2, [r3, #0]
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	2180      	movs	r1, #128	; 0x80
 8003536:	0189      	lsls	r1, r1, #6
 8003538:	430a      	orrs	r2, r1
 800353a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	225d      	movs	r2, #93	; 0x5d
 8003540:	2101      	movs	r1, #1
 8003542:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	225c      	movs	r2, #92	; 0x5c
 8003548:	2100      	movs	r1, #0
 800354a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800354c:	2303      	movs	r3, #3
 800354e:	e010      	b.n	8003572 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003550:	69bb      	ldr	r3, [r7, #24]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d101      	bne.n	800355a <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8003556:	2300      	movs	r3, #0
 8003558:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800355a:	69bb      	ldr	r3, [r7, #24]
 800355c:	3b01      	subs	r3, #1
 800355e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	68ba      	ldr	r2, [r7, #8]
 8003568:	4013      	ands	r3, r2
 800356a:	687a      	ldr	r2, [r7, #4]
 800356c:	429a      	cmp	r2, r3
 800356e:	d18e      	bne.n	800348e <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8003570:	2300      	movs	r3, #0
}
 8003572:	0018      	movs	r0, r3
 8003574:	46bd      	mov	sp, r7
 8003576:	b00a      	add	sp, #40	; 0x28
 8003578:	bd80      	pop	{r7, pc}
 800357a:	46c0      	nop			; (mov r8, r8)
 800357c:	20000008 	.word	0x20000008
 8003580:	ffffdfff 	.word	0xffffdfff

08003584 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b086      	sub	sp, #24
 8003588:	af02      	add	r7, sp, #8
 800358a:	60f8      	str	r0, [r7, #12]
 800358c:	60b9      	str	r1, [r7, #8]
 800358e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	685a      	ldr	r2, [r3, #4]
 8003594:	2382      	movs	r3, #130	; 0x82
 8003596:	005b      	lsls	r3, r3, #1
 8003598:	429a      	cmp	r2, r3
 800359a:	d113      	bne.n	80035c4 <SPI_EndRxTransaction+0x40>
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	689a      	ldr	r2, [r3, #8]
 80035a0:	2380      	movs	r3, #128	; 0x80
 80035a2:	021b      	lsls	r3, r3, #8
 80035a4:	429a      	cmp	r2, r3
 80035a6:	d005      	beq.n	80035b4 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	689a      	ldr	r2, [r3, #8]
 80035ac:	2380      	movs	r3, #128	; 0x80
 80035ae:	00db      	lsls	r3, r3, #3
 80035b0:	429a      	cmp	r2, r3
 80035b2:	d107      	bne.n	80035c4 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	2140      	movs	r1, #64	; 0x40
 80035c0:	438a      	bics	r2, r1
 80035c2:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80035c4:	68ba      	ldr	r2, [r7, #8]
 80035c6:	68f8      	ldr	r0, [r7, #12]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	9300      	str	r3, [sp, #0]
 80035cc:	0013      	movs	r3, r2
 80035ce:	2200      	movs	r2, #0
 80035d0:	2180      	movs	r1, #128	; 0x80
 80035d2:	f7ff fea7 	bl	8003324 <SPI_WaitFlagStateUntilTimeout>
 80035d6:	1e03      	subs	r3, r0, #0
 80035d8:	d007      	beq.n	80035ea <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035de:	2220      	movs	r2, #32
 80035e0:	431a      	orrs	r2, r3
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80035e6:	2303      	movs	r3, #3
 80035e8:	e026      	b.n	8003638 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	685a      	ldr	r2, [r3, #4]
 80035ee:	2382      	movs	r3, #130	; 0x82
 80035f0:	005b      	lsls	r3, r3, #1
 80035f2:	429a      	cmp	r2, r3
 80035f4:	d11f      	bne.n	8003636 <SPI_EndRxTransaction+0xb2>
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	689a      	ldr	r2, [r3, #8]
 80035fa:	2380      	movs	r3, #128	; 0x80
 80035fc:	021b      	lsls	r3, r3, #8
 80035fe:	429a      	cmp	r2, r3
 8003600:	d005      	beq.n	800360e <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	689a      	ldr	r2, [r3, #8]
 8003606:	2380      	movs	r3, #128	; 0x80
 8003608:	00db      	lsls	r3, r3, #3
 800360a:	429a      	cmp	r2, r3
 800360c:	d113      	bne.n	8003636 <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800360e:	68ba      	ldr	r2, [r7, #8]
 8003610:	23c0      	movs	r3, #192	; 0xc0
 8003612:	00d9      	lsls	r1, r3, #3
 8003614:	68f8      	ldr	r0, [r7, #12]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	9300      	str	r3, [sp, #0]
 800361a:	0013      	movs	r3, r2
 800361c:	2200      	movs	r2, #0
 800361e:	f7ff ff0f 	bl	8003440 <SPI_WaitFifoStateUntilTimeout>
 8003622:	1e03      	subs	r3, r0, #0
 8003624:	d007      	beq.n	8003636 <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800362a:	2220      	movs	r2, #32
 800362c:	431a      	orrs	r2, r3
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8003632:	2303      	movs	r3, #3
 8003634:	e000      	b.n	8003638 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 8003636:	2300      	movs	r3, #0
}
 8003638:	0018      	movs	r0, r3
 800363a:	46bd      	mov	sp, r7
 800363c:	b004      	add	sp, #16
 800363e:	bd80      	pop	{r7, pc}

08003640 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b086      	sub	sp, #24
 8003644:	af02      	add	r7, sp, #8
 8003646:	60f8      	str	r0, [r7, #12]
 8003648:	60b9      	str	r1, [r7, #8]
 800364a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800364c:	68ba      	ldr	r2, [r7, #8]
 800364e:	23c0      	movs	r3, #192	; 0xc0
 8003650:	0159      	lsls	r1, r3, #5
 8003652:	68f8      	ldr	r0, [r7, #12]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	9300      	str	r3, [sp, #0]
 8003658:	0013      	movs	r3, r2
 800365a:	2200      	movs	r2, #0
 800365c:	f7ff fef0 	bl	8003440 <SPI_WaitFifoStateUntilTimeout>
 8003660:	1e03      	subs	r3, r0, #0
 8003662:	d007      	beq.n	8003674 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003668:	2220      	movs	r2, #32
 800366a:	431a      	orrs	r2, r3
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003670:	2303      	movs	r3, #3
 8003672:	e027      	b.n	80036c4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003674:	68ba      	ldr	r2, [r7, #8]
 8003676:	68f8      	ldr	r0, [r7, #12]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	9300      	str	r3, [sp, #0]
 800367c:	0013      	movs	r3, r2
 800367e:	2200      	movs	r2, #0
 8003680:	2180      	movs	r1, #128	; 0x80
 8003682:	f7ff fe4f 	bl	8003324 <SPI_WaitFlagStateUntilTimeout>
 8003686:	1e03      	subs	r3, r0, #0
 8003688:	d007      	beq.n	800369a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800368e:	2220      	movs	r2, #32
 8003690:	431a      	orrs	r2, r3
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003696:	2303      	movs	r3, #3
 8003698:	e014      	b.n	80036c4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800369a:	68ba      	ldr	r2, [r7, #8]
 800369c:	23c0      	movs	r3, #192	; 0xc0
 800369e:	00d9      	lsls	r1, r3, #3
 80036a0:	68f8      	ldr	r0, [r7, #12]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	9300      	str	r3, [sp, #0]
 80036a6:	0013      	movs	r3, r2
 80036a8:	2200      	movs	r2, #0
 80036aa:	f7ff fec9 	bl	8003440 <SPI_WaitFifoStateUntilTimeout>
 80036ae:	1e03      	subs	r3, r0, #0
 80036b0:	d007      	beq.n	80036c2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036b6:	2220      	movs	r2, #32
 80036b8:	431a      	orrs	r2, r3
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80036be:	2303      	movs	r3, #3
 80036c0:	e000      	b.n	80036c4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80036c2:	2300      	movs	r3, #0
}
 80036c4:	0018      	movs	r0, r3
 80036c6:	46bd      	mov	sp, r7
 80036c8:	b004      	add	sp, #16
 80036ca:	bd80      	pop	{r7, pc}

080036cc <__errno>:
 80036cc:	4b01      	ldr	r3, [pc, #4]	; (80036d4 <__errno+0x8>)
 80036ce:	6818      	ldr	r0, [r3, #0]
 80036d0:	4770      	bx	lr
 80036d2:	46c0      	nop			; (mov r8, r8)
 80036d4:	20000014 	.word	0x20000014

080036d8 <__libc_init_array>:
 80036d8:	b570      	push	{r4, r5, r6, lr}
 80036da:	2600      	movs	r6, #0
 80036dc:	4d0c      	ldr	r5, [pc, #48]	; (8003710 <__libc_init_array+0x38>)
 80036de:	4c0d      	ldr	r4, [pc, #52]	; (8003714 <__libc_init_array+0x3c>)
 80036e0:	1b64      	subs	r4, r4, r5
 80036e2:	10a4      	asrs	r4, r4, #2
 80036e4:	42a6      	cmp	r6, r4
 80036e6:	d109      	bne.n	80036fc <__libc_init_array+0x24>
 80036e8:	2600      	movs	r6, #0
 80036ea:	f000 fc8b 	bl	8004004 <_init>
 80036ee:	4d0a      	ldr	r5, [pc, #40]	; (8003718 <__libc_init_array+0x40>)
 80036f0:	4c0a      	ldr	r4, [pc, #40]	; (800371c <__libc_init_array+0x44>)
 80036f2:	1b64      	subs	r4, r4, r5
 80036f4:	10a4      	asrs	r4, r4, #2
 80036f6:	42a6      	cmp	r6, r4
 80036f8:	d105      	bne.n	8003706 <__libc_init_array+0x2e>
 80036fa:	bd70      	pop	{r4, r5, r6, pc}
 80036fc:	00b3      	lsls	r3, r6, #2
 80036fe:	58eb      	ldr	r3, [r5, r3]
 8003700:	4798      	blx	r3
 8003702:	3601      	adds	r6, #1
 8003704:	e7ee      	b.n	80036e4 <__libc_init_array+0xc>
 8003706:	00b3      	lsls	r3, r6, #2
 8003708:	58eb      	ldr	r3, [r5, r3]
 800370a:	4798      	blx	r3
 800370c:	3601      	adds	r6, #1
 800370e:	e7f2      	b.n	80036f6 <__libc_init_array+0x1e>
 8003710:	080040d8 	.word	0x080040d8
 8003714:	080040d8 	.word	0x080040d8
 8003718:	080040d8 	.word	0x080040d8
 800371c:	080040dc 	.word	0x080040dc

08003720 <memset>:
 8003720:	0003      	movs	r3, r0
 8003722:	1882      	adds	r2, r0, r2
 8003724:	4293      	cmp	r3, r2
 8003726:	d100      	bne.n	800372a <memset+0xa>
 8003728:	4770      	bx	lr
 800372a:	7019      	strb	r1, [r3, #0]
 800372c:	3301      	adds	r3, #1
 800372e:	e7f9      	b.n	8003724 <memset+0x4>

08003730 <siprintf>:
 8003730:	b40e      	push	{r1, r2, r3}
 8003732:	b500      	push	{lr}
 8003734:	490b      	ldr	r1, [pc, #44]	; (8003764 <siprintf+0x34>)
 8003736:	b09c      	sub	sp, #112	; 0x70
 8003738:	ab1d      	add	r3, sp, #116	; 0x74
 800373a:	9002      	str	r0, [sp, #8]
 800373c:	9006      	str	r0, [sp, #24]
 800373e:	9107      	str	r1, [sp, #28]
 8003740:	9104      	str	r1, [sp, #16]
 8003742:	4809      	ldr	r0, [pc, #36]	; (8003768 <siprintf+0x38>)
 8003744:	4909      	ldr	r1, [pc, #36]	; (800376c <siprintf+0x3c>)
 8003746:	cb04      	ldmia	r3!, {r2}
 8003748:	9105      	str	r1, [sp, #20]
 800374a:	6800      	ldr	r0, [r0, #0]
 800374c:	a902      	add	r1, sp, #8
 800374e:	9301      	str	r3, [sp, #4]
 8003750:	f000 f870 	bl	8003834 <_svfiprintf_r>
 8003754:	2300      	movs	r3, #0
 8003756:	9a02      	ldr	r2, [sp, #8]
 8003758:	7013      	strb	r3, [r2, #0]
 800375a:	b01c      	add	sp, #112	; 0x70
 800375c:	bc08      	pop	{r3}
 800375e:	b003      	add	sp, #12
 8003760:	4718      	bx	r3
 8003762:	46c0      	nop			; (mov r8, r8)
 8003764:	7fffffff 	.word	0x7fffffff
 8003768:	20000014 	.word	0x20000014
 800376c:	ffff0208 	.word	0xffff0208

08003770 <__ssputs_r>:
 8003770:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003772:	688e      	ldr	r6, [r1, #8]
 8003774:	b085      	sub	sp, #20
 8003776:	0007      	movs	r7, r0
 8003778:	000c      	movs	r4, r1
 800377a:	9203      	str	r2, [sp, #12]
 800377c:	9301      	str	r3, [sp, #4]
 800377e:	429e      	cmp	r6, r3
 8003780:	d83c      	bhi.n	80037fc <__ssputs_r+0x8c>
 8003782:	2390      	movs	r3, #144	; 0x90
 8003784:	898a      	ldrh	r2, [r1, #12]
 8003786:	00db      	lsls	r3, r3, #3
 8003788:	421a      	tst	r2, r3
 800378a:	d034      	beq.n	80037f6 <__ssputs_r+0x86>
 800378c:	6909      	ldr	r1, [r1, #16]
 800378e:	6823      	ldr	r3, [r4, #0]
 8003790:	6960      	ldr	r0, [r4, #20]
 8003792:	1a5b      	subs	r3, r3, r1
 8003794:	9302      	str	r3, [sp, #8]
 8003796:	2303      	movs	r3, #3
 8003798:	4343      	muls	r3, r0
 800379a:	0fdd      	lsrs	r5, r3, #31
 800379c:	18ed      	adds	r5, r5, r3
 800379e:	9b01      	ldr	r3, [sp, #4]
 80037a0:	9802      	ldr	r0, [sp, #8]
 80037a2:	3301      	adds	r3, #1
 80037a4:	181b      	adds	r3, r3, r0
 80037a6:	106d      	asrs	r5, r5, #1
 80037a8:	42ab      	cmp	r3, r5
 80037aa:	d900      	bls.n	80037ae <__ssputs_r+0x3e>
 80037ac:	001d      	movs	r5, r3
 80037ae:	0553      	lsls	r3, r2, #21
 80037b0:	d532      	bpl.n	8003818 <__ssputs_r+0xa8>
 80037b2:	0029      	movs	r1, r5
 80037b4:	0038      	movs	r0, r7
 80037b6:	f000 fb53 	bl	8003e60 <_malloc_r>
 80037ba:	1e06      	subs	r6, r0, #0
 80037bc:	d109      	bne.n	80037d2 <__ssputs_r+0x62>
 80037be:	230c      	movs	r3, #12
 80037c0:	603b      	str	r3, [r7, #0]
 80037c2:	2340      	movs	r3, #64	; 0x40
 80037c4:	2001      	movs	r0, #1
 80037c6:	89a2      	ldrh	r2, [r4, #12]
 80037c8:	4240      	negs	r0, r0
 80037ca:	4313      	orrs	r3, r2
 80037cc:	81a3      	strh	r3, [r4, #12]
 80037ce:	b005      	add	sp, #20
 80037d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80037d2:	9a02      	ldr	r2, [sp, #8]
 80037d4:	6921      	ldr	r1, [r4, #16]
 80037d6:	f000 faba 	bl	8003d4e <memcpy>
 80037da:	89a3      	ldrh	r3, [r4, #12]
 80037dc:	4a14      	ldr	r2, [pc, #80]	; (8003830 <__ssputs_r+0xc0>)
 80037de:	401a      	ands	r2, r3
 80037e0:	2380      	movs	r3, #128	; 0x80
 80037e2:	4313      	orrs	r3, r2
 80037e4:	81a3      	strh	r3, [r4, #12]
 80037e6:	9b02      	ldr	r3, [sp, #8]
 80037e8:	6126      	str	r6, [r4, #16]
 80037ea:	18f6      	adds	r6, r6, r3
 80037ec:	6026      	str	r6, [r4, #0]
 80037ee:	6165      	str	r5, [r4, #20]
 80037f0:	9e01      	ldr	r6, [sp, #4]
 80037f2:	1aed      	subs	r5, r5, r3
 80037f4:	60a5      	str	r5, [r4, #8]
 80037f6:	9b01      	ldr	r3, [sp, #4]
 80037f8:	429e      	cmp	r6, r3
 80037fa:	d900      	bls.n	80037fe <__ssputs_r+0x8e>
 80037fc:	9e01      	ldr	r6, [sp, #4]
 80037fe:	0032      	movs	r2, r6
 8003800:	9903      	ldr	r1, [sp, #12]
 8003802:	6820      	ldr	r0, [r4, #0]
 8003804:	f000 faac 	bl	8003d60 <memmove>
 8003808:	68a3      	ldr	r3, [r4, #8]
 800380a:	2000      	movs	r0, #0
 800380c:	1b9b      	subs	r3, r3, r6
 800380e:	60a3      	str	r3, [r4, #8]
 8003810:	6823      	ldr	r3, [r4, #0]
 8003812:	199e      	adds	r6, r3, r6
 8003814:	6026      	str	r6, [r4, #0]
 8003816:	e7da      	b.n	80037ce <__ssputs_r+0x5e>
 8003818:	002a      	movs	r2, r5
 800381a:	0038      	movs	r0, r7
 800381c:	f000 fb96 	bl	8003f4c <_realloc_r>
 8003820:	1e06      	subs	r6, r0, #0
 8003822:	d1e0      	bne.n	80037e6 <__ssputs_r+0x76>
 8003824:	0038      	movs	r0, r7
 8003826:	6921      	ldr	r1, [r4, #16]
 8003828:	f000 faae 	bl	8003d88 <_free_r>
 800382c:	e7c7      	b.n	80037be <__ssputs_r+0x4e>
 800382e:	46c0      	nop			; (mov r8, r8)
 8003830:	fffffb7f 	.word	0xfffffb7f

08003834 <_svfiprintf_r>:
 8003834:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003836:	b0a1      	sub	sp, #132	; 0x84
 8003838:	9003      	str	r0, [sp, #12]
 800383a:	001d      	movs	r5, r3
 800383c:	898b      	ldrh	r3, [r1, #12]
 800383e:	000f      	movs	r7, r1
 8003840:	0016      	movs	r6, r2
 8003842:	061b      	lsls	r3, r3, #24
 8003844:	d511      	bpl.n	800386a <_svfiprintf_r+0x36>
 8003846:	690b      	ldr	r3, [r1, #16]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d10e      	bne.n	800386a <_svfiprintf_r+0x36>
 800384c:	2140      	movs	r1, #64	; 0x40
 800384e:	f000 fb07 	bl	8003e60 <_malloc_r>
 8003852:	6038      	str	r0, [r7, #0]
 8003854:	6138      	str	r0, [r7, #16]
 8003856:	2800      	cmp	r0, #0
 8003858:	d105      	bne.n	8003866 <_svfiprintf_r+0x32>
 800385a:	230c      	movs	r3, #12
 800385c:	9a03      	ldr	r2, [sp, #12]
 800385e:	3801      	subs	r0, #1
 8003860:	6013      	str	r3, [r2, #0]
 8003862:	b021      	add	sp, #132	; 0x84
 8003864:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003866:	2340      	movs	r3, #64	; 0x40
 8003868:	617b      	str	r3, [r7, #20]
 800386a:	2300      	movs	r3, #0
 800386c:	ac08      	add	r4, sp, #32
 800386e:	6163      	str	r3, [r4, #20]
 8003870:	3320      	adds	r3, #32
 8003872:	7663      	strb	r3, [r4, #25]
 8003874:	3310      	adds	r3, #16
 8003876:	76a3      	strb	r3, [r4, #26]
 8003878:	9507      	str	r5, [sp, #28]
 800387a:	0035      	movs	r5, r6
 800387c:	782b      	ldrb	r3, [r5, #0]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d001      	beq.n	8003886 <_svfiprintf_r+0x52>
 8003882:	2b25      	cmp	r3, #37	; 0x25
 8003884:	d147      	bne.n	8003916 <_svfiprintf_r+0xe2>
 8003886:	1bab      	subs	r3, r5, r6
 8003888:	9305      	str	r3, [sp, #20]
 800388a:	42b5      	cmp	r5, r6
 800388c:	d00c      	beq.n	80038a8 <_svfiprintf_r+0x74>
 800388e:	0032      	movs	r2, r6
 8003890:	0039      	movs	r1, r7
 8003892:	9803      	ldr	r0, [sp, #12]
 8003894:	f7ff ff6c 	bl	8003770 <__ssputs_r>
 8003898:	1c43      	adds	r3, r0, #1
 800389a:	d100      	bne.n	800389e <_svfiprintf_r+0x6a>
 800389c:	e0ae      	b.n	80039fc <_svfiprintf_r+0x1c8>
 800389e:	6962      	ldr	r2, [r4, #20]
 80038a0:	9b05      	ldr	r3, [sp, #20]
 80038a2:	4694      	mov	ip, r2
 80038a4:	4463      	add	r3, ip
 80038a6:	6163      	str	r3, [r4, #20]
 80038a8:	782b      	ldrb	r3, [r5, #0]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d100      	bne.n	80038b0 <_svfiprintf_r+0x7c>
 80038ae:	e0a5      	b.n	80039fc <_svfiprintf_r+0x1c8>
 80038b0:	2201      	movs	r2, #1
 80038b2:	2300      	movs	r3, #0
 80038b4:	4252      	negs	r2, r2
 80038b6:	6062      	str	r2, [r4, #4]
 80038b8:	a904      	add	r1, sp, #16
 80038ba:	3254      	adds	r2, #84	; 0x54
 80038bc:	1852      	adds	r2, r2, r1
 80038be:	1c6e      	adds	r6, r5, #1
 80038c0:	6023      	str	r3, [r4, #0]
 80038c2:	60e3      	str	r3, [r4, #12]
 80038c4:	60a3      	str	r3, [r4, #8]
 80038c6:	7013      	strb	r3, [r2, #0]
 80038c8:	65a3      	str	r3, [r4, #88]	; 0x58
 80038ca:	2205      	movs	r2, #5
 80038cc:	7831      	ldrb	r1, [r6, #0]
 80038ce:	4854      	ldr	r0, [pc, #336]	; (8003a20 <_svfiprintf_r+0x1ec>)
 80038d0:	f000 fa32 	bl	8003d38 <memchr>
 80038d4:	1c75      	adds	r5, r6, #1
 80038d6:	2800      	cmp	r0, #0
 80038d8:	d11f      	bne.n	800391a <_svfiprintf_r+0xe6>
 80038da:	6822      	ldr	r2, [r4, #0]
 80038dc:	06d3      	lsls	r3, r2, #27
 80038de:	d504      	bpl.n	80038ea <_svfiprintf_r+0xb6>
 80038e0:	2353      	movs	r3, #83	; 0x53
 80038e2:	a904      	add	r1, sp, #16
 80038e4:	185b      	adds	r3, r3, r1
 80038e6:	2120      	movs	r1, #32
 80038e8:	7019      	strb	r1, [r3, #0]
 80038ea:	0713      	lsls	r3, r2, #28
 80038ec:	d504      	bpl.n	80038f8 <_svfiprintf_r+0xc4>
 80038ee:	2353      	movs	r3, #83	; 0x53
 80038f0:	a904      	add	r1, sp, #16
 80038f2:	185b      	adds	r3, r3, r1
 80038f4:	212b      	movs	r1, #43	; 0x2b
 80038f6:	7019      	strb	r1, [r3, #0]
 80038f8:	7833      	ldrb	r3, [r6, #0]
 80038fa:	2b2a      	cmp	r3, #42	; 0x2a
 80038fc:	d016      	beq.n	800392c <_svfiprintf_r+0xf8>
 80038fe:	0035      	movs	r5, r6
 8003900:	2100      	movs	r1, #0
 8003902:	200a      	movs	r0, #10
 8003904:	68e3      	ldr	r3, [r4, #12]
 8003906:	782a      	ldrb	r2, [r5, #0]
 8003908:	1c6e      	adds	r6, r5, #1
 800390a:	3a30      	subs	r2, #48	; 0x30
 800390c:	2a09      	cmp	r2, #9
 800390e:	d94e      	bls.n	80039ae <_svfiprintf_r+0x17a>
 8003910:	2900      	cmp	r1, #0
 8003912:	d111      	bne.n	8003938 <_svfiprintf_r+0x104>
 8003914:	e017      	b.n	8003946 <_svfiprintf_r+0x112>
 8003916:	3501      	adds	r5, #1
 8003918:	e7b0      	b.n	800387c <_svfiprintf_r+0x48>
 800391a:	4b41      	ldr	r3, [pc, #260]	; (8003a20 <_svfiprintf_r+0x1ec>)
 800391c:	6822      	ldr	r2, [r4, #0]
 800391e:	1ac0      	subs	r0, r0, r3
 8003920:	2301      	movs	r3, #1
 8003922:	4083      	lsls	r3, r0
 8003924:	4313      	orrs	r3, r2
 8003926:	002e      	movs	r6, r5
 8003928:	6023      	str	r3, [r4, #0]
 800392a:	e7ce      	b.n	80038ca <_svfiprintf_r+0x96>
 800392c:	9b07      	ldr	r3, [sp, #28]
 800392e:	1d19      	adds	r1, r3, #4
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	9107      	str	r1, [sp, #28]
 8003934:	2b00      	cmp	r3, #0
 8003936:	db01      	blt.n	800393c <_svfiprintf_r+0x108>
 8003938:	930b      	str	r3, [sp, #44]	; 0x2c
 800393a:	e004      	b.n	8003946 <_svfiprintf_r+0x112>
 800393c:	425b      	negs	r3, r3
 800393e:	60e3      	str	r3, [r4, #12]
 8003940:	2302      	movs	r3, #2
 8003942:	4313      	orrs	r3, r2
 8003944:	6023      	str	r3, [r4, #0]
 8003946:	782b      	ldrb	r3, [r5, #0]
 8003948:	2b2e      	cmp	r3, #46	; 0x2e
 800394a:	d10a      	bne.n	8003962 <_svfiprintf_r+0x12e>
 800394c:	786b      	ldrb	r3, [r5, #1]
 800394e:	2b2a      	cmp	r3, #42	; 0x2a
 8003950:	d135      	bne.n	80039be <_svfiprintf_r+0x18a>
 8003952:	9b07      	ldr	r3, [sp, #28]
 8003954:	3502      	adds	r5, #2
 8003956:	1d1a      	adds	r2, r3, #4
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	9207      	str	r2, [sp, #28]
 800395c:	2b00      	cmp	r3, #0
 800395e:	db2b      	blt.n	80039b8 <_svfiprintf_r+0x184>
 8003960:	9309      	str	r3, [sp, #36]	; 0x24
 8003962:	4e30      	ldr	r6, [pc, #192]	; (8003a24 <_svfiprintf_r+0x1f0>)
 8003964:	2203      	movs	r2, #3
 8003966:	0030      	movs	r0, r6
 8003968:	7829      	ldrb	r1, [r5, #0]
 800396a:	f000 f9e5 	bl	8003d38 <memchr>
 800396e:	2800      	cmp	r0, #0
 8003970:	d006      	beq.n	8003980 <_svfiprintf_r+0x14c>
 8003972:	2340      	movs	r3, #64	; 0x40
 8003974:	1b80      	subs	r0, r0, r6
 8003976:	4083      	lsls	r3, r0
 8003978:	6822      	ldr	r2, [r4, #0]
 800397a:	3501      	adds	r5, #1
 800397c:	4313      	orrs	r3, r2
 800397e:	6023      	str	r3, [r4, #0]
 8003980:	7829      	ldrb	r1, [r5, #0]
 8003982:	2206      	movs	r2, #6
 8003984:	4828      	ldr	r0, [pc, #160]	; (8003a28 <_svfiprintf_r+0x1f4>)
 8003986:	1c6e      	adds	r6, r5, #1
 8003988:	7621      	strb	r1, [r4, #24]
 800398a:	f000 f9d5 	bl	8003d38 <memchr>
 800398e:	2800      	cmp	r0, #0
 8003990:	d03c      	beq.n	8003a0c <_svfiprintf_r+0x1d8>
 8003992:	4b26      	ldr	r3, [pc, #152]	; (8003a2c <_svfiprintf_r+0x1f8>)
 8003994:	2b00      	cmp	r3, #0
 8003996:	d125      	bne.n	80039e4 <_svfiprintf_r+0x1b0>
 8003998:	2207      	movs	r2, #7
 800399a:	9b07      	ldr	r3, [sp, #28]
 800399c:	3307      	adds	r3, #7
 800399e:	4393      	bics	r3, r2
 80039a0:	3308      	adds	r3, #8
 80039a2:	9307      	str	r3, [sp, #28]
 80039a4:	6963      	ldr	r3, [r4, #20]
 80039a6:	9a04      	ldr	r2, [sp, #16]
 80039a8:	189b      	adds	r3, r3, r2
 80039aa:	6163      	str	r3, [r4, #20]
 80039ac:	e765      	b.n	800387a <_svfiprintf_r+0x46>
 80039ae:	4343      	muls	r3, r0
 80039b0:	0035      	movs	r5, r6
 80039b2:	2101      	movs	r1, #1
 80039b4:	189b      	adds	r3, r3, r2
 80039b6:	e7a6      	b.n	8003906 <_svfiprintf_r+0xd2>
 80039b8:	2301      	movs	r3, #1
 80039ba:	425b      	negs	r3, r3
 80039bc:	e7d0      	b.n	8003960 <_svfiprintf_r+0x12c>
 80039be:	2300      	movs	r3, #0
 80039c0:	200a      	movs	r0, #10
 80039c2:	001a      	movs	r2, r3
 80039c4:	3501      	adds	r5, #1
 80039c6:	6063      	str	r3, [r4, #4]
 80039c8:	7829      	ldrb	r1, [r5, #0]
 80039ca:	1c6e      	adds	r6, r5, #1
 80039cc:	3930      	subs	r1, #48	; 0x30
 80039ce:	2909      	cmp	r1, #9
 80039d0:	d903      	bls.n	80039da <_svfiprintf_r+0x1a6>
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d0c5      	beq.n	8003962 <_svfiprintf_r+0x12e>
 80039d6:	9209      	str	r2, [sp, #36]	; 0x24
 80039d8:	e7c3      	b.n	8003962 <_svfiprintf_r+0x12e>
 80039da:	4342      	muls	r2, r0
 80039dc:	0035      	movs	r5, r6
 80039de:	2301      	movs	r3, #1
 80039e0:	1852      	adds	r2, r2, r1
 80039e2:	e7f1      	b.n	80039c8 <_svfiprintf_r+0x194>
 80039e4:	ab07      	add	r3, sp, #28
 80039e6:	9300      	str	r3, [sp, #0]
 80039e8:	003a      	movs	r2, r7
 80039ea:	0021      	movs	r1, r4
 80039ec:	4b10      	ldr	r3, [pc, #64]	; (8003a30 <_svfiprintf_r+0x1fc>)
 80039ee:	9803      	ldr	r0, [sp, #12]
 80039f0:	e000      	b.n	80039f4 <_svfiprintf_r+0x1c0>
 80039f2:	bf00      	nop
 80039f4:	9004      	str	r0, [sp, #16]
 80039f6:	9b04      	ldr	r3, [sp, #16]
 80039f8:	3301      	adds	r3, #1
 80039fa:	d1d3      	bne.n	80039a4 <_svfiprintf_r+0x170>
 80039fc:	89bb      	ldrh	r3, [r7, #12]
 80039fe:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003a00:	065b      	lsls	r3, r3, #25
 8003a02:	d400      	bmi.n	8003a06 <_svfiprintf_r+0x1d2>
 8003a04:	e72d      	b.n	8003862 <_svfiprintf_r+0x2e>
 8003a06:	2001      	movs	r0, #1
 8003a08:	4240      	negs	r0, r0
 8003a0a:	e72a      	b.n	8003862 <_svfiprintf_r+0x2e>
 8003a0c:	ab07      	add	r3, sp, #28
 8003a0e:	9300      	str	r3, [sp, #0]
 8003a10:	003a      	movs	r2, r7
 8003a12:	0021      	movs	r1, r4
 8003a14:	4b06      	ldr	r3, [pc, #24]	; (8003a30 <_svfiprintf_r+0x1fc>)
 8003a16:	9803      	ldr	r0, [sp, #12]
 8003a18:	f000 f87c 	bl	8003b14 <_printf_i>
 8003a1c:	e7ea      	b.n	80039f4 <_svfiprintf_r+0x1c0>
 8003a1e:	46c0      	nop			; (mov r8, r8)
 8003a20:	080040a4 	.word	0x080040a4
 8003a24:	080040aa 	.word	0x080040aa
 8003a28:	080040ae 	.word	0x080040ae
 8003a2c:	00000000 	.word	0x00000000
 8003a30:	08003771 	.word	0x08003771

08003a34 <_printf_common>:
 8003a34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003a36:	0015      	movs	r5, r2
 8003a38:	9301      	str	r3, [sp, #4]
 8003a3a:	688a      	ldr	r2, [r1, #8]
 8003a3c:	690b      	ldr	r3, [r1, #16]
 8003a3e:	000c      	movs	r4, r1
 8003a40:	9000      	str	r0, [sp, #0]
 8003a42:	4293      	cmp	r3, r2
 8003a44:	da00      	bge.n	8003a48 <_printf_common+0x14>
 8003a46:	0013      	movs	r3, r2
 8003a48:	0022      	movs	r2, r4
 8003a4a:	602b      	str	r3, [r5, #0]
 8003a4c:	3243      	adds	r2, #67	; 0x43
 8003a4e:	7812      	ldrb	r2, [r2, #0]
 8003a50:	2a00      	cmp	r2, #0
 8003a52:	d001      	beq.n	8003a58 <_printf_common+0x24>
 8003a54:	3301      	adds	r3, #1
 8003a56:	602b      	str	r3, [r5, #0]
 8003a58:	6823      	ldr	r3, [r4, #0]
 8003a5a:	069b      	lsls	r3, r3, #26
 8003a5c:	d502      	bpl.n	8003a64 <_printf_common+0x30>
 8003a5e:	682b      	ldr	r3, [r5, #0]
 8003a60:	3302      	adds	r3, #2
 8003a62:	602b      	str	r3, [r5, #0]
 8003a64:	6822      	ldr	r2, [r4, #0]
 8003a66:	2306      	movs	r3, #6
 8003a68:	0017      	movs	r7, r2
 8003a6a:	401f      	ands	r7, r3
 8003a6c:	421a      	tst	r2, r3
 8003a6e:	d027      	beq.n	8003ac0 <_printf_common+0x8c>
 8003a70:	0023      	movs	r3, r4
 8003a72:	3343      	adds	r3, #67	; 0x43
 8003a74:	781b      	ldrb	r3, [r3, #0]
 8003a76:	1e5a      	subs	r2, r3, #1
 8003a78:	4193      	sbcs	r3, r2
 8003a7a:	6822      	ldr	r2, [r4, #0]
 8003a7c:	0692      	lsls	r2, r2, #26
 8003a7e:	d430      	bmi.n	8003ae2 <_printf_common+0xae>
 8003a80:	0022      	movs	r2, r4
 8003a82:	9901      	ldr	r1, [sp, #4]
 8003a84:	9800      	ldr	r0, [sp, #0]
 8003a86:	9e08      	ldr	r6, [sp, #32]
 8003a88:	3243      	adds	r2, #67	; 0x43
 8003a8a:	47b0      	blx	r6
 8003a8c:	1c43      	adds	r3, r0, #1
 8003a8e:	d025      	beq.n	8003adc <_printf_common+0xa8>
 8003a90:	2306      	movs	r3, #6
 8003a92:	6820      	ldr	r0, [r4, #0]
 8003a94:	682a      	ldr	r2, [r5, #0]
 8003a96:	68e1      	ldr	r1, [r4, #12]
 8003a98:	2500      	movs	r5, #0
 8003a9a:	4003      	ands	r3, r0
 8003a9c:	2b04      	cmp	r3, #4
 8003a9e:	d103      	bne.n	8003aa8 <_printf_common+0x74>
 8003aa0:	1a8d      	subs	r5, r1, r2
 8003aa2:	43eb      	mvns	r3, r5
 8003aa4:	17db      	asrs	r3, r3, #31
 8003aa6:	401d      	ands	r5, r3
 8003aa8:	68a3      	ldr	r3, [r4, #8]
 8003aaa:	6922      	ldr	r2, [r4, #16]
 8003aac:	4293      	cmp	r3, r2
 8003aae:	dd01      	ble.n	8003ab4 <_printf_common+0x80>
 8003ab0:	1a9b      	subs	r3, r3, r2
 8003ab2:	18ed      	adds	r5, r5, r3
 8003ab4:	2700      	movs	r7, #0
 8003ab6:	42bd      	cmp	r5, r7
 8003ab8:	d120      	bne.n	8003afc <_printf_common+0xc8>
 8003aba:	2000      	movs	r0, #0
 8003abc:	e010      	b.n	8003ae0 <_printf_common+0xac>
 8003abe:	3701      	adds	r7, #1
 8003ac0:	68e3      	ldr	r3, [r4, #12]
 8003ac2:	682a      	ldr	r2, [r5, #0]
 8003ac4:	1a9b      	subs	r3, r3, r2
 8003ac6:	42bb      	cmp	r3, r7
 8003ac8:	ddd2      	ble.n	8003a70 <_printf_common+0x3c>
 8003aca:	0022      	movs	r2, r4
 8003acc:	2301      	movs	r3, #1
 8003ace:	9901      	ldr	r1, [sp, #4]
 8003ad0:	9800      	ldr	r0, [sp, #0]
 8003ad2:	9e08      	ldr	r6, [sp, #32]
 8003ad4:	3219      	adds	r2, #25
 8003ad6:	47b0      	blx	r6
 8003ad8:	1c43      	adds	r3, r0, #1
 8003ada:	d1f0      	bne.n	8003abe <_printf_common+0x8a>
 8003adc:	2001      	movs	r0, #1
 8003ade:	4240      	negs	r0, r0
 8003ae0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003ae2:	2030      	movs	r0, #48	; 0x30
 8003ae4:	18e1      	adds	r1, r4, r3
 8003ae6:	3143      	adds	r1, #67	; 0x43
 8003ae8:	7008      	strb	r0, [r1, #0]
 8003aea:	0021      	movs	r1, r4
 8003aec:	1c5a      	adds	r2, r3, #1
 8003aee:	3145      	adds	r1, #69	; 0x45
 8003af0:	7809      	ldrb	r1, [r1, #0]
 8003af2:	18a2      	adds	r2, r4, r2
 8003af4:	3243      	adds	r2, #67	; 0x43
 8003af6:	3302      	adds	r3, #2
 8003af8:	7011      	strb	r1, [r2, #0]
 8003afa:	e7c1      	b.n	8003a80 <_printf_common+0x4c>
 8003afc:	0022      	movs	r2, r4
 8003afe:	2301      	movs	r3, #1
 8003b00:	9901      	ldr	r1, [sp, #4]
 8003b02:	9800      	ldr	r0, [sp, #0]
 8003b04:	9e08      	ldr	r6, [sp, #32]
 8003b06:	321a      	adds	r2, #26
 8003b08:	47b0      	blx	r6
 8003b0a:	1c43      	adds	r3, r0, #1
 8003b0c:	d0e6      	beq.n	8003adc <_printf_common+0xa8>
 8003b0e:	3701      	adds	r7, #1
 8003b10:	e7d1      	b.n	8003ab6 <_printf_common+0x82>
	...

08003b14 <_printf_i>:
 8003b14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b16:	b08b      	sub	sp, #44	; 0x2c
 8003b18:	9206      	str	r2, [sp, #24]
 8003b1a:	000a      	movs	r2, r1
 8003b1c:	3243      	adds	r2, #67	; 0x43
 8003b1e:	9307      	str	r3, [sp, #28]
 8003b20:	9005      	str	r0, [sp, #20]
 8003b22:	9204      	str	r2, [sp, #16]
 8003b24:	7e0a      	ldrb	r2, [r1, #24]
 8003b26:	000c      	movs	r4, r1
 8003b28:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003b2a:	2a78      	cmp	r2, #120	; 0x78
 8003b2c:	d807      	bhi.n	8003b3e <_printf_i+0x2a>
 8003b2e:	2a62      	cmp	r2, #98	; 0x62
 8003b30:	d809      	bhi.n	8003b46 <_printf_i+0x32>
 8003b32:	2a00      	cmp	r2, #0
 8003b34:	d100      	bne.n	8003b38 <_printf_i+0x24>
 8003b36:	e0c1      	b.n	8003cbc <_printf_i+0x1a8>
 8003b38:	2a58      	cmp	r2, #88	; 0x58
 8003b3a:	d100      	bne.n	8003b3e <_printf_i+0x2a>
 8003b3c:	e08c      	b.n	8003c58 <_printf_i+0x144>
 8003b3e:	0026      	movs	r6, r4
 8003b40:	3642      	adds	r6, #66	; 0x42
 8003b42:	7032      	strb	r2, [r6, #0]
 8003b44:	e022      	b.n	8003b8c <_printf_i+0x78>
 8003b46:	0010      	movs	r0, r2
 8003b48:	3863      	subs	r0, #99	; 0x63
 8003b4a:	2815      	cmp	r0, #21
 8003b4c:	d8f7      	bhi.n	8003b3e <_printf_i+0x2a>
 8003b4e:	f7fc fadb 	bl	8000108 <__gnu_thumb1_case_shi>
 8003b52:	0016      	.short	0x0016
 8003b54:	fff6001f 	.word	0xfff6001f
 8003b58:	fff6fff6 	.word	0xfff6fff6
 8003b5c:	001ffff6 	.word	0x001ffff6
 8003b60:	fff6fff6 	.word	0xfff6fff6
 8003b64:	fff6fff6 	.word	0xfff6fff6
 8003b68:	003600a8 	.word	0x003600a8
 8003b6c:	fff6009a 	.word	0xfff6009a
 8003b70:	00b9fff6 	.word	0x00b9fff6
 8003b74:	0036fff6 	.word	0x0036fff6
 8003b78:	fff6fff6 	.word	0xfff6fff6
 8003b7c:	009e      	.short	0x009e
 8003b7e:	0026      	movs	r6, r4
 8003b80:	681a      	ldr	r2, [r3, #0]
 8003b82:	3642      	adds	r6, #66	; 0x42
 8003b84:	1d11      	adds	r1, r2, #4
 8003b86:	6019      	str	r1, [r3, #0]
 8003b88:	6813      	ldr	r3, [r2, #0]
 8003b8a:	7033      	strb	r3, [r6, #0]
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	e0a7      	b.n	8003ce0 <_printf_i+0x1cc>
 8003b90:	6808      	ldr	r0, [r1, #0]
 8003b92:	6819      	ldr	r1, [r3, #0]
 8003b94:	1d0a      	adds	r2, r1, #4
 8003b96:	0605      	lsls	r5, r0, #24
 8003b98:	d50b      	bpl.n	8003bb2 <_printf_i+0x9e>
 8003b9a:	680d      	ldr	r5, [r1, #0]
 8003b9c:	601a      	str	r2, [r3, #0]
 8003b9e:	2d00      	cmp	r5, #0
 8003ba0:	da03      	bge.n	8003baa <_printf_i+0x96>
 8003ba2:	232d      	movs	r3, #45	; 0x2d
 8003ba4:	9a04      	ldr	r2, [sp, #16]
 8003ba6:	426d      	negs	r5, r5
 8003ba8:	7013      	strb	r3, [r2, #0]
 8003baa:	4b61      	ldr	r3, [pc, #388]	; (8003d30 <_printf_i+0x21c>)
 8003bac:	270a      	movs	r7, #10
 8003bae:	9303      	str	r3, [sp, #12]
 8003bb0:	e01b      	b.n	8003bea <_printf_i+0xd6>
 8003bb2:	680d      	ldr	r5, [r1, #0]
 8003bb4:	601a      	str	r2, [r3, #0]
 8003bb6:	0641      	lsls	r1, r0, #25
 8003bb8:	d5f1      	bpl.n	8003b9e <_printf_i+0x8a>
 8003bba:	b22d      	sxth	r5, r5
 8003bbc:	e7ef      	b.n	8003b9e <_printf_i+0x8a>
 8003bbe:	680d      	ldr	r5, [r1, #0]
 8003bc0:	6819      	ldr	r1, [r3, #0]
 8003bc2:	1d08      	adds	r0, r1, #4
 8003bc4:	6018      	str	r0, [r3, #0]
 8003bc6:	062e      	lsls	r6, r5, #24
 8003bc8:	d501      	bpl.n	8003bce <_printf_i+0xba>
 8003bca:	680d      	ldr	r5, [r1, #0]
 8003bcc:	e003      	b.n	8003bd6 <_printf_i+0xc2>
 8003bce:	066d      	lsls	r5, r5, #25
 8003bd0:	d5fb      	bpl.n	8003bca <_printf_i+0xb6>
 8003bd2:	680d      	ldr	r5, [r1, #0]
 8003bd4:	b2ad      	uxth	r5, r5
 8003bd6:	4b56      	ldr	r3, [pc, #344]	; (8003d30 <_printf_i+0x21c>)
 8003bd8:	2708      	movs	r7, #8
 8003bda:	9303      	str	r3, [sp, #12]
 8003bdc:	2a6f      	cmp	r2, #111	; 0x6f
 8003bde:	d000      	beq.n	8003be2 <_printf_i+0xce>
 8003be0:	3702      	adds	r7, #2
 8003be2:	0023      	movs	r3, r4
 8003be4:	2200      	movs	r2, #0
 8003be6:	3343      	adds	r3, #67	; 0x43
 8003be8:	701a      	strb	r2, [r3, #0]
 8003bea:	6863      	ldr	r3, [r4, #4]
 8003bec:	60a3      	str	r3, [r4, #8]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	db03      	blt.n	8003bfa <_printf_i+0xe6>
 8003bf2:	2204      	movs	r2, #4
 8003bf4:	6821      	ldr	r1, [r4, #0]
 8003bf6:	4391      	bics	r1, r2
 8003bf8:	6021      	str	r1, [r4, #0]
 8003bfa:	2d00      	cmp	r5, #0
 8003bfc:	d102      	bne.n	8003c04 <_printf_i+0xf0>
 8003bfe:	9e04      	ldr	r6, [sp, #16]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d00c      	beq.n	8003c1e <_printf_i+0x10a>
 8003c04:	9e04      	ldr	r6, [sp, #16]
 8003c06:	0028      	movs	r0, r5
 8003c08:	0039      	movs	r1, r7
 8003c0a:	f7fc fb0d 	bl	8000228 <__aeabi_uidivmod>
 8003c0e:	9b03      	ldr	r3, [sp, #12]
 8003c10:	3e01      	subs	r6, #1
 8003c12:	5c5b      	ldrb	r3, [r3, r1]
 8003c14:	7033      	strb	r3, [r6, #0]
 8003c16:	002b      	movs	r3, r5
 8003c18:	0005      	movs	r5, r0
 8003c1a:	429f      	cmp	r7, r3
 8003c1c:	d9f3      	bls.n	8003c06 <_printf_i+0xf2>
 8003c1e:	2f08      	cmp	r7, #8
 8003c20:	d109      	bne.n	8003c36 <_printf_i+0x122>
 8003c22:	6823      	ldr	r3, [r4, #0]
 8003c24:	07db      	lsls	r3, r3, #31
 8003c26:	d506      	bpl.n	8003c36 <_printf_i+0x122>
 8003c28:	6863      	ldr	r3, [r4, #4]
 8003c2a:	6922      	ldr	r2, [r4, #16]
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	dc02      	bgt.n	8003c36 <_printf_i+0x122>
 8003c30:	2330      	movs	r3, #48	; 0x30
 8003c32:	3e01      	subs	r6, #1
 8003c34:	7033      	strb	r3, [r6, #0]
 8003c36:	9b04      	ldr	r3, [sp, #16]
 8003c38:	1b9b      	subs	r3, r3, r6
 8003c3a:	6123      	str	r3, [r4, #16]
 8003c3c:	9b07      	ldr	r3, [sp, #28]
 8003c3e:	0021      	movs	r1, r4
 8003c40:	9300      	str	r3, [sp, #0]
 8003c42:	9805      	ldr	r0, [sp, #20]
 8003c44:	9b06      	ldr	r3, [sp, #24]
 8003c46:	aa09      	add	r2, sp, #36	; 0x24
 8003c48:	f7ff fef4 	bl	8003a34 <_printf_common>
 8003c4c:	1c43      	adds	r3, r0, #1
 8003c4e:	d14c      	bne.n	8003cea <_printf_i+0x1d6>
 8003c50:	2001      	movs	r0, #1
 8003c52:	4240      	negs	r0, r0
 8003c54:	b00b      	add	sp, #44	; 0x2c
 8003c56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c58:	3145      	adds	r1, #69	; 0x45
 8003c5a:	700a      	strb	r2, [r1, #0]
 8003c5c:	4a34      	ldr	r2, [pc, #208]	; (8003d30 <_printf_i+0x21c>)
 8003c5e:	9203      	str	r2, [sp, #12]
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	6821      	ldr	r1, [r4, #0]
 8003c64:	ca20      	ldmia	r2!, {r5}
 8003c66:	601a      	str	r2, [r3, #0]
 8003c68:	0608      	lsls	r0, r1, #24
 8003c6a:	d516      	bpl.n	8003c9a <_printf_i+0x186>
 8003c6c:	07cb      	lsls	r3, r1, #31
 8003c6e:	d502      	bpl.n	8003c76 <_printf_i+0x162>
 8003c70:	2320      	movs	r3, #32
 8003c72:	4319      	orrs	r1, r3
 8003c74:	6021      	str	r1, [r4, #0]
 8003c76:	2710      	movs	r7, #16
 8003c78:	2d00      	cmp	r5, #0
 8003c7a:	d1b2      	bne.n	8003be2 <_printf_i+0xce>
 8003c7c:	2320      	movs	r3, #32
 8003c7e:	6822      	ldr	r2, [r4, #0]
 8003c80:	439a      	bics	r2, r3
 8003c82:	6022      	str	r2, [r4, #0]
 8003c84:	e7ad      	b.n	8003be2 <_printf_i+0xce>
 8003c86:	2220      	movs	r2, #32
 8003c88:	6809      	ldr	r1, [r1, #0]
 8003c8a:	430a      	orrs	r2, r1
 8003c8c:	6022      	str	r2, [r4, #0]
 8003c8e:	0022      	movs	r2, r4
 8003c90:	2178      	movs	r1, #120	; 0x78
 8003c92:	3245      	adds	r2, #69	; 0x45
 8003c94:	7011      	strb	r1, [r2, #0]
 8003c96:	4a27      	ldr	r2, [pc, #156]	; (8003d34 <_printf_i+0x220>)
 8003c98:	e7e1      	b.n	8003c5e <_printf_i+0x14a>
 8003c9a:	0648      	lsls	r0, r1, #25
 8003c9c:	d5e6      	bpl.n	8003c6c <_printf_i+0x158>
 8003c9e:	b2ad      	uxth	r5, r5
 8003ca0:	e7e4      	b.n	8003c6c <_printf_i+0x158>
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	680d      	ldr	r5, [r1, #0]
 8003ca6:	1d10      	adds	r0, r2, #4
 8003ca8:	6949      	ldr	r1, [r1, #20]
 8003caa:	6018      	str	r0, [r3, #0]
 8003cac:	6813      	ldr	r3, [r2, #0]
 8003cae:	062e      	lsls	r6, r5, #24
 8003cb0:	d501      	bpl.n	8003cb6 <_printf_i+0x1a2>
 8003cb2:	6019      	str	r1, [r3, #0]
 8003cb4:	e002      	b.n	8003cbc <_printf_i+0x1a8>
 8003cb6:	066d      	lsls	r5, r5, #25
 8003cb8:	d5fb      	bpl.n	8003cb2 <_printf_i+0x19e>
 8003cba:	8019      	strh	r1, [r3, #0]
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	9e04      	ldr	r6, [sp, #16]
 8003cc0:	6123      	str	r3, [r4, #16]
 8003cc2:	e7bb      	b.n	8003c3c <_printf_i+0x128>
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	1d11      	adds	r1, r2, #4
 8003cc8:	6019      	str	r1, [r3, #0]
 8003cca:	6816      	ldr	r6, [r2, #0]
 8003ccc:	2100      	movs	r1, #0
 8003cce:	0030      	movs	r0, r6
 8003cd0:	6862      	ldr	r2, [r4, #4]
 8003cd2:	f000 f831 	bl	8003d38 <memchr>
 8003cd6:	2800      	cmp	r0, #0
 8003cd8:	d001      	beq.n	8003cde <_printf_i+0x1ca>
 8003cda:	1b80      	subs	r0, r0, r6
 8003cdc:	6060      	str	r0, [r4, #4]
 8003cde:	6863      	ldr	r3, [r4, #4]
 8003ce0:	6123      	str	r3, [r4, #16]
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	9a04      	ldr	r2, [sp, #16]
 8003ce6:	7013      	strb	r3, [r2, #0]
 8003ce8:	e7a8      	b.n	8003c3c <_printf_i+0x128>
 8003cea:	6923      	ldr	r3, [r4, #16]
 8003cec:	0032      	movs	r2, r6
 8003cee:	9906      	ldr	r1, [sp, #24]
 8003cf0:	9805      	ldr	r0, [sp, #20]
 8003cf2:	9d07      	ldr	r5, [sp, #28]
 8003cf4:	47a8      	blx	r5
 8003cf6:	1c43      	adds	r3, r0, #1
 8003cf8:	d0aa      	beq.n	8003c50 <_printf_i+0x13c>
 8003cfa:	6823      	ldr	r3, [r4, #0]
 8003cfc:	079b      	lsls	r3, r3, #30
 8003cfe:	d415      	bmi.n	8003d2c <_printf_i+0x218>
 8003d00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d02:	68e0      	ldr	r0, [r4, #12]
 8003d04:	4298      	cmp	r0, r3
 8003d06:	daa5      	bge.n	8003c54 <_printf_i+0x140>
 8003d08:	0018      	movs	r0, r3
 8003d0a:	e7a3      	b.n	8003c54 <_printf_i+0x140>
 8003d0c:	0022      	movs	r2, r4
 8003d0e:	2301      	movs	r3, #1
 8003d10:	9906      	ldr	r1, [sp, #24]
 8003d12:	9805      	ldr	r0, [sp, #20]
 8003d14:	9e07      	ldr	r6, [sp, #28]
 8003d16:	3219      	adds	r2, #25
 8003d18:	47b0      	blx	r6
 8003d1a:	1c43      	adds	r3, r0, #1
 8003d1c:	d098      	beq.n	8003c50 <_printf_i+0x13c>
 8003d1e:	3501      	adds	r5, #1
 8003d20:	68e3      	ldr	r3, [r4, #12]
 8003d22:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003d24:	1a9b      	subs	r3, r3, r2
 8003d26:	42ab      	cmp	r3, r5
 8003d28:	dcf0      	bgt.n	8003d0c <_printf_i+0x1f8>
 8003d2a:	e7e9      	b.n	8003d00 <_printf_i+0x1ec>
 8003d2c:	2500      	movs	r5, #0
 8003d2e:	e7f7      	b.n	8003d20 <_printf_i+0x20c>
 8003d30:	080040b5 	.word	0x080040b5
 8003d34:	080040c6 	.word	0x080040c6

08003d38 <memchr>:
 8003d38:	b2c9      	uxtb	r1, r1
 8003d3a:	1882      	adds	r2, r0, r2
 8003d3c:	4290      	cmp	r0, r2
 8003d3e:	d101      	bne.n	8003d44 <memchr+0xc>
 8003d40:	2000      	movs	r0, #0
 8003d42:	4770      	bx	lr
 8003d44:	7803      	ldrb	r3, [r0, #0]
 8003d46:	428b      	cmp	r3, r1
 8003d48:	d0fb      	beq.n	8003d42 <memchr+0xa>
 8003d4a:	3001      	adds	r0, #1
 8003d4c:	e7f6      	b.n	8003d3c <memchr+0x4>

08003d4e <memcpy>:
 8003d4e:	2300      	movs	r3, #0
 8003d50:	b510      	push	{r4, lr}
 8003d52:	429a      	cmp	r2, r3
 8003d54:	d100      	bne.n	8003d58 <memcpy+0xa>
 8003d56:	bd10      	pop	{r4, pc}
 8003d58:	5ccc      	ldrb	r4, [r1, r3]
 8003d5a:	54c4      	strb	r4, [r0, r3]
 8003d5c:	3301      	adds	r3, #1
 8003d5e:	e7f8      	b.n	8003d52 <memcpy+0x4>

08003d60 <memmove>:
 8003d60:	b510      	push	{r4, lr}
 8003d62:	4288      	cmp	r0, r1
 8003d64:	d902      	bls.n	8003d6c <memmove+0xc>
 8003d66:	188b      	adds	r3, r1, r2
 8003d68:	4298      	cmp	r0, r3
 8003d6a:	d303      	bcc.n	8003d74 <memmove+0x14>
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	e007      	b.n	8003d80 <memmove+0x20>
 8003d70:	5c8b      	ldrb	r3, [r1, r2]
 8003d72:	5483      	strb	r3, [r0, r2]
 8003d74:	3a01      	subs	r2, #1
 8003d76:	d2fb      	bcs.n	8003d70 <memmove+0x10>
 8003d78:	bd10      	pop	{r4, pc}
 8003d7a:	5ccc      	ldrb	r4, [r1, r3]
 8003d7c:	54c4      	strb	r4, [r0, r3]
 8003d7e:	3301      	adds	r3, #1
 8003d80:	429a      	cmp	r2, r3
 8003d82:	d1fa      	bne.n	8003d7a <memmove+0x1a>
 8003d84:	e7f8      	b.n	8003d78 <memmove+0x18>
	...

08003d88 <_free_r>:
 8003d88:	b570      	push	{r4, r5, r6, lr}
 8003d8a:	0005      	movs	r5, r0
 8003d8c:	2900      	cmp	r1, #0
 8003d8e:	d010      	beq.n	8003db2 <_free_r+0x2a>
 8003d90:	1f0c      	subs	r4, r1, #4
 8003d92:	6823      	ldr	r3, [r4, #0]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	da00      	bge.n	8003d9a <_free_r+0x12>
 8003d98:	18e4      	adds	r4, r4, r3
 8003d9a:	0028      	movs	r0, r5
 8003d9c:	f000 f918 	bl	8003fd0 <__malloc_lock>
 8003da0:	4a1d      	ldr	r2, [pc, #116]	; (8003e18 <_free_r+0x90>)
 8003da2:	6813      	ldr	r3, [r2, #0]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d105      	bne.n	8003db4 <_free_r+0x2c>
 8003da8:	6063      	str	r3, [r4, #4]
 8003daa:	6014      	str	r4, [r2, #0]
 8003dac:	0028      	movs	r0, r5
 8003dae:	f000 f917 	bl	8003fe0 <__malloc_unlock>
 8003db2:	bd70      	pop	{r4, r5, r6, pc}
 8003db4:	42a3      	cmp	r3, r4
 8003db6:	d908      	bls.n	8003dca <_free_r+0x42>
 8003db8:	6821      	ldr	r1, [r4, #0]
 8003dba:	1860      	adds	r0, r4, r1
 8003dbc:	4283      	cmp	r3, r0
 8003dbe:	d1f3      	bne.n	8003da8 <_free_r+0x20>
 8003dc0:	6818      	ldr	r0, [r3, #0]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	1841      	adds	r1, r0, r1
 8003dc6:	6021      	str	r1, [r4, #0]
 8003dc8:	e7ee      	b.n	8003da8 <_free_r+0x20>
 8003dca:	001a      	movs	r2, r3
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d001      	beq.n	8003dd6 <_free_r+0x4e>
 8003dd2:	42a3      	cmp	r3, r4
 8003dd4:	d9f9      	bls.n	8003dca <_free_r+0x42>
 8003dd6:	6811      	ldr	r1, [r2, #0]
 8003dd8:	1850      	adds	r0, r2, r1
 8003dda:	42a0      	cmp	r0, r4
 8003ddc:	d10b      	bne.n	8003df6 <_free_r+0x6e>
 8003dde:	6820      	ldr	r0, [r4, #0]
 8003de0:	1809      	adds	r1, r1, r0
 8003de2:	1850      	adds	r0, r2, r1
 8003de4:	6011      	str	r1, [r2, #0]
 8003de6:	4283      	cmp	r3, r0
 8003de8:	d1e0      	bne.n	8003dac <_free_r+0x24>
 8003dea:	6818      	ldr	r0, [r3, #0]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	1841      	adds	r1, r0, r1
 8003df0:	6011      	str	r1, [r2, #0]
 8003df2:	6053      	str	r3, [r2, #4]
 8003df4:	e7da      	b.n	8003dac <_free_r+0x24>
 8003df6:	42a0      	cmp	r0, r4
 8003df8:	d902      	bls.n	8003e00 <_free_r+0x78>
 8003dfa:	230c      	movs	r3, #12
 8003dfc:	602b      	str	r3, [r5, #0]
 8003dfe:	e7d5      	b.n	8003dac <_free_r+0x24>
 8003e00:	6821      	ldr	r1, [r4, #0]
 8003e02:	1860      	adds	r0, r4, r1
 8003e04:	4283      	cmp	r3, r0
 8003e06:	d103      	bne.n	8003e10 <_free_r+0x88>
 8003e08:	6818      	ldr	r0, [r3, #0]
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	1841      	adds	r1, r0, r1
 8003e0e:	6021      	str	r1, [r4, #0]
 8003e10:	6063      	str	r3, [r4, #4]
 8003e12:	6054      	str	r4, [r2, #4]
 8003e14:	e7ca      	b.n	8003dac <_free_r+0x24>
 8003e16:	46c0      	nop			; (mov r8, r8)
 8003e18:	20000148 	.word	0x20000148

08003e1c <sbrk_aligned>:
 8003e1c:	b570      	push	{r4, r5, r6, lr}
 8003e1e:	4e0f      	ldr	r6, [pc, #60]	; (8003e5c <sbrk_aligned+0x40>)
 8003e20:	000d      	movs	r5, r1
 8003e22:	6831      	ldr	r1, [r6, #0]
 8003e24:	0004      	movs	r4, r0
 8003e26:	2900      	cmp	r1, #0
 8003e28:	d102      	bne.n	8003e30 <sbrk_aligned+0x14>
 8003e2a:	f000 f8bf 	bl	8003fac <_sbrk_r>
 8003e2e:	6030      	str	r0, [r6, #0]
 8003e30:	0029      	movs	r1, r5
 8003e32:	0020      	movs	r0, r4
 8003e34:	f000 f8ba 	bl	8003fac <_sbrk_r>
 8003e38:	1c43      	adds	r3, r0, #1
 8003e3a:	d00a      	beq.n	8003e52 <sbrk_aligned+0x36>
 8003e3c:	2303      	movs	r3, #3
 8003e3e:	1cc5      	adds	r5, r0, #3
 8003e40:	439d      	bics	r5, r3
 8003e42:	42a8      	cmp	r0, r5
 8003e44:	d007      	beq.n	8003e56 <sbrk_aligned+0x3a>
 8003e46:	1a29      	subs	r1, r5, r0
 8003e48:	0020      	movs	r0, r4
 8003e4a:	f000 f8af 	bl	8003fac <_sbrk_r>
 8003e4e:	1c43      	adds	r3, r0, #1
 8003e50:	d101      	bne.n	8003e56 <sbrk_aligned+0x3a>
 8003e52:	2501      	movs	r5, #1
 8003e54:	426d      	negs	r5, r5
 8003e56:	0028      	movs	r0, r5
 8003e58:	bd70      	pop	{r4, r5, r6, pc}
 8003e5a:	46c0      	nop			; (mov r8, r8)
 8003e5c:	2000014c 	.word	0x2000014c

08003e60 <_malloc_r>:
 8003e60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003e62:	2203      	movs	r2, #3
 8003e64:	1ccb      	adds	r3, r1, #3
 8003e66:	4393      	bics	r3, r2
 8003e68:	3308      	adds	r3, #8
 8003e6a:	0006      	movs	r6, r0
 8003e6c:	001f      	movs	r7, r3
 8003e6e:	2b0c      	cmp	r3, #12
 8003e70:	d232      	bcs.n	8003ed8 <_malloc_r+0x78>
 8003e72:	270c      	movs	r7, #12
 8003e74:	42b9      	cmp	r1, r7
 8003e76:	d831      	bhi.n	8003edc <_malloc_r+0x7c>
 8003e78:	0030      	movs	r0, r6
 8003e7a:	f000 f8a9 	bl	8003fd0 <__malloc_lock>
 8003e7e:	4d32      	ldr	r5, [pc, #200]	; (8003f48 <_malloc_r+0xe8>)
 8003e80:	682b      	ldr	r3, [r5, #0]
 8003e82:	001c      	movs	r4, r3
 8003e84:	2c00      	cmp	r4, #0
 8003e86:	d12e      	bne.n	8003ee6 <_malloc_r+0x86>
 8003e88:	0039      	movs	r1, r7
 8003e8a:	0030      	movs	r0, r6
 8003e8c:	f7ff ffc6 	bl	8003e1c <sbrk_aligned>
 8003e90:	0004      	movs	r4, r0
 8003e92:	1c43      	adds	r3, r0, #1
 8003e94:	d11e      	bne.n	8003ed4 <_malloc_r+0x74>
 8003e96:	682c      	ldr	r4, [r5, #0]
 8003e98:	0025      	movs	r5, r4
 8003e9a:	2d00      	cmp	r5, #0
 8003e9c:	d14a      	bne.n	8003f34 <_malloc_r+0xd4>
 8003e9e:	6823      	ldr	r3, [r4, #0]
 8003ea0:	0029      	movs	r1, r5
 8003ea2:	18e3      	adds	r3, r4, r3
 8003ea4:	0030      	movs	r0, r6
 8003ea6:	9301      	str	r3, [sp, #4]
 8003ea8:	f000 f880 	bl	8003fac <_sbrk_r>
 8003eac:	9b01      	ldr	r3, [sp, #4]
 8003eae:	4283      	cmp	r3, r0
 8003eb0:	d143      	bne.n	8003f3a <_malloc_r+0xda>
 8003eb2:	6823      	ldr	r3, [r4, #0]
 8003eb4:	3703      	adds	r7, #3
 8003eb6:	1aff      	subs	r7, r7, r3
 8003eb8:	2303      	movs	r3, #3
 8003eba:	439f      	bics	r7, r3
 8003ebc:	3708      	adds	r7, #8
 8003ebe:	2f0c      	cmp	r7, #12
 8003ec0:	d200      	bcs.n	8003ec4 <_malloc_r+0x64>
 8003ec2:	270c      	movs	r7, #12
 8003ec4:	0039      	movs	r1, r7
 8003ec6:	0030      	movs	r0, r6
 8003ec8:	f7ff ffa8 	bl	8003e1c <sbrk_aligned>
 8003ecc:	1c43      	adds	r3, r0, #1
 8003ece:	d034      	beq.n	8003f3a <_malloc_r+0xda>
 8003ed0:	6823      	ldr	r3, [r4, #0]
 8003ed2:	19df      	adds	r7, r3, r7
 8003ed4:	6027      	str	r7, [r4, #0]
 8003ed6:	e013      	b.n	8003f00 <_malloc_r+0xa0>
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	dacb      	bge.n	8003e74 <_malloc_r+0x14>
 8003edc:	230c      	movs	r3, #12
 8003ede:	2500      	movs	r5, #0
 8003ee0:	6033      	str	r3, [r6, #0]
 8003ee2:	0028      	movs	r0, r5
 8003ee4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003ee6:	6822      	ldr	r2, [r4, #0]
 8003ee8:	1bd1      	subs	r1, r2, r7
 8003eea:	d420      	bmi.n	8003f2e <_malloc_r+0xce>
 8003eec:	290b      	cmp	r1, #11
 8003eee:	d917      	bls.n	8003f20 <_malloc_r+0xc0>
 8003ef0:	19e2      	adds	r2, r4, r7
 8003ef2:	6027      	str	r7, [r4, #0]
 8003ef4:	42a3      	cmp	r3, r4
 8003ef6:	d111      	bne.n	8003f1c <_malloc_r+0xbc>
 8003ef8:	602a      	str	r2, [r5, #0]
 8003efa:	6863      	ldr	r3, [r4, #4]
 8003efc:	6011      	str	r1, [r2, #0]
 8003efe:	6053      	str	r3, [r2, #4]
 8003f00:	0030      	movs	r0, r6
 8003f02:	0025      	movs	r5, r4
 8003f04:	f000 f86c 	bl	8003fe0 <__malloc_unlock>
 8003f08:	2207      	movs	r2, #7
 8003f0a:	350b      	adds	r5, #11
 8003f0c:	1d23      	adds	r3, r4, #4
 8003f0e:	4395      	bics	r5, r2
 8003f10:	1aea      	subs	r2, r5, r3
 8003f12:	429d      	cmp	r5, r3
 8003f14:	d0e5      	beq.n	8003ee2 <_malloc_r+0x82>
 8003f16:	1b5b      	subs	r3, r3, r5
 8003f18:	50a3      	str	r3, [r4, r2]
 8003f1a:	e7e2      	b.n	8003ee2 <_malloc_r+0x82>
 8003f1c:	605a      	str	r2, [r3, #4]
 8003f1e:	e7ec      	b.n	8003efa <_malloc_r+0x9a>
 8003f20:	6862      	ldr	r2, [r4, #4]
 8003f22:	42a3      	cmp	r3, r4
 8003f24:	d101      	bne.n	8003f2a <_malloc_r+0xca>
 8003f26:	602a      	str	r2, [r5, #0]
 8003f28:	e7ea      	b.n	8003f00 <_malloc_r+0xa0>
 8003f2a:	605a      	str	r2, [r3, #4]
 8003f2c:	e7e8      	b.n	8003f00 <_malloc_r+0xa0>
 8003f2e:	0023      	movs	r3, r4
 8003f30:	6864      	ldr	r4, [r4, #4]
 8003f32:	e7a7      	b.n	8003e84 <_malloc_r+0x24>
 8003f34:	002c      	movs	r4, r5
 8003f36:	686d      	ldr	r5, [r5, #4]
 8003f38:	e7af      	b.n	8003e9a <_malloc_r+0x3a>
 8003f3a:	230c      	movs	r3, #12
 8003f3c:	0030      	movs	r0, r6
 8003f3e:	6033      	str	r3, [r6, #0]
 8003f40:	f000 f84e 	bl	8003fe0 <__malloc_unlock>
 8003f44:	e7cd      	b.n	8003ee2 <_malloc_r+0x82>
 8003f46:	46c0      	nop			; (mov r8, r8)
 8003f48:	20000148 	.word	0x20000148

08003f4c <_realloc_r>:
 8003f4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003f4e:	0007      	movs	r7, r0
 8003f50:	000e      	movs	r6, r1
 8003f52:	0014      	movs	r4, r2
 8003f54:	2900      	cmp	r1, #0
 8003f56:	d105      	bne.n	8003f64 <_realloc_r+0x18>
 8003f58:	0011      	movs	r1, r2
 8003f5a:	f7ff ff81 	bl	8003e60 <_malloc_r>
 8003f5e:	0005      	movs	r5, r0
 8003f60:	0028      	movs	r0, r5
 8003f62:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003f64:	2a00      	cmp	r2, #0
 8003f66:	d103      	bne.n	8003f70 <_realloc_r+0x24>
 8003f68:	f7ff ff0e 	bl	8003d88 <_free_r>
 8003f6c:	0025      	movs	r5, r4
 8003f6e:	e7f7      	b.n	8003f60 <_realloc_r+0x14>
 8003f70:	f000 f83e 	bl	8003ff0 <_malloc_usable_size_r>
 8003f74:	9001      	str	r0, [sp, #4]
 8003f76:	4284      	cmp	r4, r0
 8003f78:	d803      	bhi.n	8003f82 <_realloc_r+0x36>
 8003f7a:	0035      	movs	r5, r6
 8003f7c:	0843      	lsrs	r3, r0, #1
 8003f7e:	42a3      	cmp	r3, r4
 8003f80:	d3ee      	bcc.n	8003f60 <_realloc_r+0x14>
 8003f82:	0021      	movs	r1, r4
 8003f84:	0038      	movs	r0, r7
 8003f86:	f7ff ff6b 	bl	8003e60 <_malloc_r>
 8003f8a:	1e05      	subs	r5, r0, #0
 8003f8c:	d0e8      	beq.n	8003f60 <_realloc_r+0x14>
 8003f8e:	9b01      	ldr	r3, [sp, #4]
 8003f90:	0022      	movs	r2, r4
 8003f92:	429c      	cmp	r4, r3
 8003f94:	d900      	bls.n	8003f98 <_realloc_r+0x4c>
 8003f96:	001a      	movs	r2, r3
 8003f98:	0031      	movs	r1, r6
 8003f9a:	0028      	movs	r0, r5
 8003f9c:	f7ff fed7 	bl	8003d4e <memcpy>
 8003fa0:	0031      	movs	r1, r6
 8003fa2:	0038      	movs	r0, r7
 8003fa4:	f7ff fef0 	bl	8003d88 <_free_r>
 8003fa8:	e7da      	b.n	8003f60 <_realloc_r+0x14>
	...

08003fac <_sbrk_r>:
 8003fac:	2300      	movs	r3, #0
 8003fae:	b570      	push	{r4, r5, r6, lr}
 8003fb0:	4d06      	ldr	r5, [pc, #24]	; (8003fcc <_sbrk_r+0x20>)
 8003fb2:	0004      	movs	r4, r0
 8003fb4:	0008      	movs	r0, r1
 8003fb6:	602b      	str	r3, [r5, #0]
 8003fb8:	f7fd fcdc 	bl	8001974 <_sbrk>
 8003fbc:	1c43      	adds	r3, r0, #1
 8003fbe:	d103      	bne.n	8003fc8 <_sbrk_r+0x1c>
 8003fc0:	682b      	ldr	r3, [r5, #0]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d000      	beq.n	8003fc8 <_sbrk_r+0x1c>
 8003fc6:	6023      	str	r3, [r4, #0]
 8003fc8:	bd70      	pop	{r4, r5, r6, pc}
 8003fca:	46c0      	nop			; (mov r8, r8)
 8003fcc:	20000150 	.word	0x20000150

08003fd0 <__malloc_lock>:
 8003fd0:	b510      	push	{r4, lr}
 8003fd2:	4802      	ldr	r0, [pc, #8]	; (8003fdc <__malloc_lock+0xc>)
 8003fd4:	f000 f814 	bl	8004000 <__retarget_lock_acquire_recursive>
 8003fd8:	bd10      	pop	{r4, pc}
 8003fda:	46c0      	nop			; (mov r8, r8)
 8003fdc:	20000154 	.word	0x20000154

08003fe0 <__malloc_unlock>:
 8003fe0:	b510      	push	{r4, lr}
 8003fe2:	4802      	ldr	r0, [pc, #8]	; (8003fec <__malloc_unlock+0xc>)
 8003fe4:	f000 f80d 	bl	8004002 <__retarget_lock_release_recursive>
 8003fe8:	bd10      	pop	{r4, pc}
 8003fea:	46c0      	nop			; (mov r8, r8)
 8003fec:	20000154 	.word	0x20000154

08003ff0 <_malloc_usable_size_r>:
 8003ff0:	1f0b      	subs	r3, r1, #4
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	1f18      	subs	r0, r3, #4
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	da01      	bge.n	8003ffe <_malloc_usable_size_r+0xe>
 8003ffa:	580b      	ldr	r3, [r1, r0]
 8003ffc:	18c0      	adds	r0, r0, r3
 8003ffe:	4770      	bx	lr

08004000 <__retarget_lock_acquire_recursive>:
 8004000:	4770      	bx	lr

08004002 <__retarget_lock_release_recursive>:
 8004002:	4770      	bx	lr

08004004 <_init>:
 8004004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004006:	46c0      	nop			; (mov r8, r8)
 8004008:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800400a:	bc08      	pop	{r3}
 800400c:	469e      	mov	lr, r3
 800400e:	4770      	bx	lr

08004010 <_fini>:
 8004010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004012:	46c0      	nop			; (mov r8, r8)
 8004014:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004016:	bc08      	pop	{r3}
 8004018:	469e      	mov	lr, r3
 800401a:	4770      	bx	lr
